
/Users/admin/CTD_2023/mqtt_thing/target/5.3.0/argon/mqtt_thing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b40  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8b5c  000b8b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e578  000b8b80  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000020c  2003e5e4  2003e5e4  0001e5e4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8bec  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8bf0  000b8bf0  00018bf0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8bf6  000b8bf6  00018bf6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8c1a  000b8c1a  00018c1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149f87  00000000  00000000  00018c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016c80  00000000  00000000  00162ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00049552  00000000  00000000  00179825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003548  00000000  00000000  001c2d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ba48  00000000  00000000  001c62bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040f1f  00000000  00000000  001d1d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000512b9  00000000  00000000  00212c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141d09  00000000  00000000  00263edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009d64  00000000  00000000  003a5be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fcfd 	bl	b7a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fd05 	bl	b7a6c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e578 	.word	0x2003e578
   b406c:	000b8b80 	.word	0x000b8b80
   b4070:	2003e5e4 	.word	0x2003e5e4
   b4074:	2003e5e4 	.word	0x2003e5e4
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 fa9f 	bl	b75c4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b8b38 	.word	0x000b8b38
   b40a0:	000b8b5c 	.word	0x000b8b5c

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8b6 	b.w	b4214 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f927 	bl	b42fc <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 ba3f 	b.w	b7534 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f002 b9fb 	b.w	b64b0 <malloc>

000b40ba <_Znaj>:
   b40ba:	f002 b9f9 	b.w	b64b0 <malloc>

000b40be <_ZdaPv>:
   b40be:	f002 b9ff 	b.w	b64c0 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f002 b9fd 	b.w	b64c0 <free>
	...

000b40c8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ca:	4a03      	ldr	r2, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x10>)
   b40cc:	4903      	ldr	r1, [pc, #12]	; (b40dc <__cxa_pure_virtual+0x14>)
   b40ce:	200c      	movs	r0, #12
   b40d0:	f002 f942 	bl	b6358 <panic_>
  while (1);
   b40d4:	e7fe      	b.n	b40d4 <__cxa_pure_virtual+0xc>
   b40d6:	bf00      	nop
   b40d8:	000b6009 	.word	0x000b6009
   b40dc:	000b7bc8 	.word	0x000b7bc8

000b40e0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40e0:	7800      	ldrb	r0, [r0, #0]
   b40e2:	fab0 f080 	clz	r0, r0
   b40e6:	0940      	lsrs	r0, r0, #5
   b40e8:	4770      	bx	lr

000b40ea <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ea:	2301      	movs	r3, #1
   b40ec:	7003      	strb	r3, [r0, #0]
   b40ee:	4770      	bx	lr

000b40f0 <_Z8callbackPcPhj>:
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
}

void callback(char* topic, byte* payload, unsigned int length) {
   b40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  char p[length + 1];
   b40f2:	f102 0308 	add.w	r3, r2, #8
void callback(char* topic, byte* payload, unsigned int length) {
   b40f6:	b085      	sub	sp, #20
  char p[length + 1];
   b40f8:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   b40fc:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40fe:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   b4102:	4615      	mov	r5, r2
   b4104:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   b4106:	4668      	mov	r0, sp
   b4108:	f003 fca2 	bl	b7a50 <memcpy>
  p[length] = NULL;
   b410c:	2300      	movs	r3, #0

  if (String(topic).equals("inTopic/HipposAreVeryTasty/A")) {
   b410e:	4621      	mov	r1, r4
   b4110:	4638      	mov	r0, r7
  p[length] = NULL;
   b4112:	f80d 3005 	strb.w	r3, [sp, r5]
  if (String(topic).equals("inTopic/HipposAreVeryTasty/A")) {
   b4116:	f002 fd8e 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b411a:	4934      	ldr	r1, [pc, #208]	; (b41ec <_Z8callbackPcPhj+0xfc>)
   b411c:	4638      	mov	r0, r7
   b411e:	f002 fdb0 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b4122:	4605      	mov	r5, r0
   b4124:	4638      	mov	r0, r7
  char p[length + 1];
   b4126:	466e      	mov	r6, sp
  if (String(topic).equals("inTopic/HipposAreVeryTasty/A")) {
   b4128:	f002 fd3a 	bl	b6ba0 <_ZN6StringD1Ev>
   b412c:	b125      	cbz	r5, b4138 <_Z8callbackPcPhj+0x48>
    buttonStateA = !buttonStateA;
   b412e:	4a30      	ldr	r2, [pc, #192]	; (b41f0 <_Z8callbackPcPhj+0x100>)
   b4130:	7813      	ldrb	r3, [r2, #0]
   b4132:	f083 0301 	eor.w	r3, r3, #1
   b4136:	7013      	strb	r3, [r2, #0]
  }
  if (String(topic).equals("inTopic/HipposAreVeryTasty/B")) {
   b4138:	4621      	mov	r1, r4
   b413a:	4638      	mov	r0, r7
   b413c:	f002 fd7b 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b4140:	492c      	ldr	r1, [pc, #176]	; (b41f4 <_Z8callbackPcPhj+0x104>)
   b4142:	4638      	mov	r0, r7
   b4144:	f002 fd9d 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b4148:	4605      	mov	r5, r0
   b414a:	4638      	mov	r0, r7
   b414c:	f002 fd28 	bl	b6ba0 <_ZN6StringD1Ev>
   b4150:	b125      	cbz	r5, b415c <_Z8callbackPcPhj+0x6c>
    buttonStateB = !buttonStateB;
   b4152:	4a29      	ldr	r2, [pc, #164]	; (b41f8 <_Z8callbackPcPhj+0x108>)
   b4154:	7813      	ldrb	r3, [r2, #0]
   b4156:	f083 0301 	eor.w	r3, r3, #1
   b415a:	7013      	strb	r3, [r2, #0]
  }
  if (String(topic).equals("inTopic/HipposAreVeryTasty/C")) {
   b415c:	4621      	mov	r1, r4
   b415e:	4638      	mov	r0, r7
   b4160:	f002 fd69 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b4164:	4925      	ldr	r1, [pc, #148]	; (b41fc <_Z8callbackPcPhj+0x10c>)
   b4166:	4638      	mov	r0, r7
   b4168:	f002 fd8b 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b416c:	4605      	mov	r5, r0
   b416e:	4638      	mov	r0, r7
   b4170:	f002 fd16 	bl	b6ba0 <_ZN6StringD1Ev>
   b4174:	b125      	cbz	r5, b4180 <_Z8callbackPcPhj+0x90>
    buttonStateC = !buttonStateC;
   b4176:	4a22      	ldr	r2, [pc, #136]	; (b4200 <_Z8callbackPcPhj+0x110>)
   b4178:	7813      	ldrb	r3, [r2, #0]
   b417a:	f083 0301 	eor.w	r3, r3, #1
   b417e:	7013      	strb	r3, [r2, #0]
  }

  if (String(topic).equals("inTopic/HipposAreVeryTasty/Led")) {
   b4180:	4621      	mov	r1, r4
   b4182:	4638      	mov	r0, r7
   b4184:	f002 fd57 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b4188:	491e      	ldr	r1, [pc, #120]	; (b4204 <_Z8callbackPcPhj+0x114>)
   b418a:	4638      	mov	r0, r7
   b418c:	f002 fd79 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b4190:	4604      	mov	r4, r0
   b4192:	4638      	mov	r0, r7
   b4194:	f002 fd04 	bl	b6ba0 <_ZN6StringD1Ev>
   b4198:	b184      	cbz	r4, b41bc <_Z8callbackPcPhj+0xcc>
    if (String(p).equals("1")) {
   b419a:	4631      	mov	r1, r6
   b419c:	4638      	mov	r0, r7
   b419e:	f002 fd4a 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b41a2:	4919      	ldr	r1, [pc, #100]	; (b4208 <_Z8callbackPcPhj+0x118>)
   b41a4:	4638      	mov	r0, r7
   b41a6:	f002 fd6c 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b41aa:	4604      	mov	r4, r0
   b41ac:	4638      	mov	r0, r7
   b41ae:	f002 fcf7 	bl	b6ba0 <_ZN6StringD1Ev>
   b41b2:	b134      	cbz	r4, b41c2 <_Z8callbackPcPhj+0xd2>
      digitalWrite(D7, 1);
   b41b4:	2101      	movs	r1, #1
    } else if (String(p).equals("0")) {
      digitalWrite(D7, 0);
   b41b6:	2007      	movs	r0, #7
   b41b8:	f003 fa85 	bl	b76c6 <digitalWrite>
    } else {
      Serial.println("failed");
    }
  }
}
   b41bc:	3714      	adds	r7, #20
   b41be:	46bd      	mov	sp, r7
   b41c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (String(p).equals("0")) {
   b41c2:	4631      	mov	r1, r6
   b41c4:	4638      	mov	r0, r7
   b41c6:	f002 fd36 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b41ca:	4910      	ldr	r1, [pc, #64]	; (b420c <_Z8callbackPcPhj+0x11c>)
   b41cc:	4638      	mov	r0, r7
   b41ce:	f002 fd58 	bl	b6c82 <_ZNK6String6equalsEPKc>
   b41d2:	4605      	mov	r5, r0
   b41d4:	4638      	mov	r0, r7
   b41d6:	f002 fce3 	bl	b6ba0 <_ZN6StringD1Ev>
   b41da:	b10d      	cbz	r5, b41e0 <_Z8callbackPcPhj+0xf0>
      digitalWrite(D7, 0);
   b41dc:	4621      	mov	r1, r4
   b41de:	e7ea      	b.n	b41b6 <_Z8callbackPcPhj+0xc6>
      Serial.println("failed");
   b41e0:	f003 f922 	bl	b7428 <_Z16_fetch_usbserialv>
   b41e4:	490a      	ldr	r1, [pc, #40]	; (b4210 <_Z8callbackPcPhj+0x120>)
   b41e6:	f002 fbca 	bl	b697e <_ZN5Print7printlnEPKc>
}
   b41ea:	e7e7      	b.n	b41bc <_Z8callbackPcPhj+0xcc>
   b41ec:	000b7bdd 	.word	0x000b7bdd
   b41f0:	2003e5e4 	.word	0x2003e5e4
   b41f4:	000b7bfa 	.word	0x000b7bfa
   b41f8:	2003e5e5 	.word	0x2003e5e5
   b41fc:	000b7c17 	.word	0x000b7c17
   b4200:	2003e5e6 	.word	0x2003e5e6
   b4204:	000b7c34 	.word	0x000b7c34
   b4208:	000b7c53 	.word	0x000b7c53
   b420c:	000b7c55 	.word	0x000b7c55
   b4210:	000b7c57 	.word	0x000b7c57

000b4214 <setup>:
void setup() {
   b4214:	b508      	push	{r3, lr}
  display.setup();
   b4216:	480f      	ldr	r0, [pc, #60]	; (b4254 <setup+0x40>)
   b4218:	f001 fe66 	bl	b5ee8 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b421c:	480d      	ldr	r0, [pc, #52]	; (b4254 <setup+0x40>)
   b421e:	f001 fab9 	bl	b5794 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println("Connecting...");
   b4222:	490d      	ldr	r1, [pc, #52]	; (b4258 <setup+0x44>)
   b4224:	480b      	ldr	r0, [pc, #44]	; (b4254 <setup+0x40>)
   b4226:	f002 fbaa 	bl	b697e <_ZN5Print7printlnEPKc>
  display.display();
   b422a:	480a      	ldr	r0, [pc, #40]	; (b4254 <setup+0x40>)
   b422c:	f001 fd20 	bl	b5c70 <_ZN16Adafruit_SSD13067displayEv>
  pinMode(D7, OUTPUT);
   b4230:	2101      	movs	r1, #1
   b4232:	2007      	movs	r0, #7
   b4234:	f003 fa36 	bl	b76a4 <pinMode>
  Serial.begin(9600);
   b4238:	f003 f8f6 	bl	b7428 <_Z16_fetch_usbserialv>
   b423c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4240:	f003 f8e2 	bl	b7408 <_ZN9USBSerial5beginEl>
  while (!Serial.isConnected()) {}
   b4244:	f003 f8f0 	bl	b7428 <_Z16_fetch_usbserialv>
   b4248:	f003 f8e2 	bl	b7410 <_ZN9USBSerial11isConnectedEv>
   b424c:	2800      	cmp	r0, #0
   b424e:	d0f9      	beq.n	b4244 <setup+0x30>
}
   b4250:	bd08      	pop	{r3, pc}
   b4252:	bf00      	nop
   b4254:	2003e648 	.word	0x2003e648
   b4258:	000b7c5e 	.word	0x000b7c5e

000b425c <_Z12resetDisplayv>:
void resetDisplay() {
   b425c:	b510      	push	{r4, lr}
  display.clearDisplay();
   b425e:	4c07      	ldr	r4, [pc, #28]	; (b427c <_Z12resetDisplayv+0x20>)
   b4260:	4620      	mov	r0, r4
   b4262:	f001 fa97 	bl	b5794 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4266:	2101      	movs	r1, #1
   b4268:	4620      	mov	r0, r4
   b426a:	f001 f8da 	bl	b5422 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b426e:	2200      	movs	r2, #0
   b4270:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4274:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
   b4278:	bd10      	pop	{r4, pc}
   b427a:	bf00      	nop
   b427c:	2003e648 	.word	0x2003e648

000b4280 <_Z19displayButtonStatesv>:

void displayButtonStates() {
   b4280:	b510      	push	{r4, lr}
  resetDisplay();
  display.print("Button A: ");
   b4282:	4c17      	ldr	r4, [pc, #92]	; (b42e0 <_Z19displayButtonStatesv+0x60>)
  resetDisplay();
   b4284:	f7ff ffea 	bl	b425c <_Z12resetDisplayv>
  display.print("Button A: ");
   b4288:	4916      	ldr	r1, [pc, #88]	; (b42e4 <_Z19displayButtonStatesv+0x64>)
   b428a:	4620      	mov	r0, r4
   b428c:	f002 fb64 	bl	b6958 <_ZN5Print5printEPKc>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4290:	4b15      	ldr	r3, [pc, #84]	; (b42e8 <_Z19displayButtonStatesv+0x68>)
   b4292:	220a      	movs	r2, #10
   b4294:	7819      	ldrb	r1, [r3, #0]
   b4296:	4620      	mov	r0, r4
   b4298:	f002 fb7b 	bl	b6992 <_ZN5Print11printNumberEmh>
        n += println();
   b429c:	4620      	mov	r0, r4
   b429e:	f002 fb62 	bl	b6966 <_ZN5Print7printlnEv>
  display.println(buttonStateA);
  display.print("Button B: ");
   b42a2:	4912      	ldr	r1, [pc, #72]	; (b42ec <_Z19displayButtonStatesv+0x6c>)
   b42a4:	4620      	mov	r0, r4
   b42a6:	f002 fb57 	bl	b6958 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42aa:	4b11      	ldr	r3, [pc, #68]	; (b42f0 <_Z19displayButtonStatesv+0x70>)
   b42ac:	220a      	movs	r2, #10
   b42ae:	7819      	ldrb	r1, [r3, #0]
   b42b0:	4620      	mov	r0, r4
   b42b2:	f002 fb6e 	bl	b6992 <_ZN5Print11printNumberEmh>
        n += println();
   b42b6:	4620      	mov	r0, r4
   b42b8:	f002 fb55 	bl	b6966 <_ZN5Print7printlnEv>
  display.println(buttonStateB);
  display.print("Button C: ");
   b42bc:	490d      	ldr	r1, [pc, #52]	; (b42f4 <_Z19displayButtonStatesv+0x74>)
   b42be:	4620      	mov	r0, r4
   b42c0:	f002 fb4a 	bl	b6958 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42c4:	4b0c      	ldr	r3, [pc, #48]	; (b42f8 <_Z19displayButtonStatesv+0x78>)
   b42c6:	220a      	movs	r2, #10
   b42c8:	7819      	ldrb	r1, [r3, #0]
   b42ca:	4620      	mov	r0, r4
   b42cc:	f002 fb61 	bl	b6992 <_ZN5Print11printNumberEmh>
        n += println();
   b42d0:	4620      	mov	r0, r4
   b42d2:	f002 fb48 	bl	b6966 <_ZN5Print7printlnEv>
  display.println(buttonStateC);
  display.display();
   b42d6:	4620      	mov	r0, r4
   b42d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b42dc:	f001 bcc8 	b.w	b5c70 <_ZN16Adafruit_SSD13067displayEv>
   b42e0:	2003e648 	.word	0x2003e648
   b42e4:	000b7c6c 	.word	0x000b7c6c
   b42e8:	2003e5e4 	.word	0x2003e5e4
   b42ec:	000b7c77 	.word	0x000b7c77
   b42f0:	2003e5e5 	.word	0x2003e5e5
   b42f4:	000b7c82 	.word	0x000b7c82
   b42f8:	2003e5e6 	.word	0x2003e5e6

000b42fc <loop>:
void loop() {
   b42fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b42fe:	4823      	ldr	r0, [pc, #140]	; (b438c <loop+0x90>)
   b4300:	f001 fe1b 	bl	b5f3a <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected()) {
   b4304:	4822      	ldr	r0, [pc, #136]	; (b4390 <loop+0x94>)
   b4306:	f000 f98d 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b430a:	b310      	cbz	r0, b4352 <loop+0x56>
    client.loop();
   b430c:	4820      	ldr	r0, [pc, #128]	; (b4390 <loop+0x94>)
   b430e:	f000 fb60 	bl	b49d2 <_ZN4MQTT4loopEv>
    if (display.pressedA()) {
   b4312:	481e      	ldr	r0, [pc, #120]	; (b438c <loop+0x90>)
   b4314:	f001 fe2a 	bl	b5f6c <_ZN16OledWingAdafruit8pressedAEv>
   b4318:	b120      	cbz	r0, b4324 <loop+0x28>
      client.publish("inTopic/HipposAreVeryTasty/A", "m");
   b431a:	4a1e      	ldr	r2, [pc, #120]	; (b4394 <loop+0x98>)
   b431c:	491e      	ldr	r1, [pc, #120]	; (b4398 <loop+0x9c>)
   b431e:	481c      	ldr	r0, [pc, #112]	; (b4390 <loop+0x94>)
   b4320:	f000 fafb 	bl	b491a <_ZN4MQTT7publishEPKcS1_>
    if (display.pressedB()) {
   b4324:	4819      	ldr	r0, [pc, #100]	; (b438c <loop+0x90>)
   b4326:	f001 fe2b 	bl	b5f80 <_ZN16OledWingAdafruit8pressedBEv>
   b432a:	b120      	cbz	r0, b4336 <loop+0x3a>
      client.publish("inTopic/HipposAreVeryTasty/B", "m");
   b432c:	4a19      	ldr	r2, [pc, #100]	; (b4394 <loop+0x98>)
   b432e:	491b      	ldr	r1, [pc, #108]	; (b439c <loop+0xa0>)
   b4330:	4817      	ldr	r0, [pc, #92]	; (b4390 <loop+0x94>)
   b4332:	f000 faf2 	bl	b491a <_ZN4MQTT7publishEPKcS1_>
    if (display.pressedC()) {
   b4336:	4815      	ldr	r0, [pc, #84]	; (b438c <loop+0x90>)
   b4338:	f001 fe2c 	bl	b5f94 <_ZN16OledWingAdafruit8pressedCEv>
   b433c:	b120      	cbz	r0, b4348 <loop+0x4c>
      client.publish("inTopic/HipposAreVeryTasty/C", "m");
   b433e:	4a15      	ldr	r2, [pc, #84]	; (b4394 <loop+0x98>)
   b4340:	4917      	ldr	r1, [pc, #92]	; (b43a0 <loop+0xa4>)
   b4342:	4813      	ldr	r0, [pc, #76]	; (b4390 <loop+0x94>)
   b4344:	f000 fae9 	bl	b491a <_ZN4MQTT7publishEPKcS1_>
}
   b4348:	b005      	add	sp, #20
   b434a:	f85d eb04 	ldr.w	lr, [sp], #4
    displayButtonStates();
   b434e:	f7ff bf97 	b.w	b4280 <_Z19displayButtonStatesv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4352:	4668      	mov	r0, sp
   b4354:	f002 f83c 	bl	b63d0 <spark_deviceID>
    client.connect(System.deviceID());
   b4358:	9900      	ldr	r1, [sp, #0]
   b435a:	480d      	ldr	r0, [pc, #52]	; (b4390 <loop+0x94>)
   b435c:	f000 fa52 	bl	b4804 <_ZN4MQTT7connectEPKc>
   b4360:	4668      	mov	r0, sp
   b4362:	f002 fc1d 	bl	b6ba0 <_ZN6StringD1Ev>
    client.subscribe("inTopic/HipposAreVeryTasty/Led");
   b4366:	490f      	ldr	r1, [pc, #60]	; (b43a4 <loop+0xa8>)
   b4368:	4809      	ldr	r0, [pc, #36]	; (b4390 <loop+0x94>)
   b436a:	f000 fc7a 	bl	b4c62 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("inTopic/HipposAreVeryTasty/A");
   b436e:	490a      	ldr	r1, [pc, #40]	; (b4398 <loop+0x9c>)
   b4370:	4807      	ldr	r0, [pc, #28]	; (b4390 <loop+0x94>)
   b4372:	f000 fc76 	bl	b4c62 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("inTopic/HipposAreVeryTasty/B");
   b4376:	4909      	ldr	r1, [pc, #36]	; (b439c <loop+0xa0>)
   b4378:	4805      	ldr	r0, [pc, #20]	; (b4390 <loop+0x94>)
   b437a:	f000 fc72 	bl	b4c62 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("inTopic/HipposAreVeryTasty/C");
   b437e:	4908      	ldr	r1, [pc, #32]	; (b43a0 <loop+0xa4>)
   b4380:	4803      	ldr	r0, [pc, #12]	; (b4390 <loop+0x94>)
}
   b4382:	b005      	add	sp, #20
   b4384:	f85d eb04 	ldr.w	lr, [sp], #4
    client.subscribe("inTopic/HipposAreVeryTasty/C");
   b4388:	f000 bc6b 	b.w	b4c62 <_ZN4MQTT9subscribeEPKc>
   b438c:	2003e648 	.word	0x2003e648
   b4390:	2003e5e8 	.word	0x2003e5e8
   b4394:	000b7c9a 	.word	0x000b7c9a
   b4398:	000b7bdd 	.word	0x000b7bdd
   b439c:	000b7bfa 	.word	0x000b7bfa
   b43a0:	000b7c17 	.word	0x000b7c17
   b43a4:	000b7c34 	.word	0x000b7c34

000b43a8 <_GLOBAL__sub_I_client>:
   b43a8:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b43aa:	2100      	movs	r1, #0
   b43ac:	2001      	movs	r0, #1
   b43ae:	f001 fff3 	bl	b6398 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b43b2:	2300      	movs	r3, #0
   b43b4:	9300      	str	r3, [sp, #0]
   b43b6:	4907      	ldr	r1, [pc, #28]	; (b43d4 <_GLOBAL__sub_I_client+0x2c>)
   b43b8:	4b07      	ldr	r3, [pc, #28]	; (b43d8 <_GLOBAL__sub_I_client+0x30>)
   b43ba:	4808      	ldr	r0, [pc, #32]	; (b43dc <_GLOBAL__sub_I_client+0x34>)
   b43bc:	f240 725b 	movw	r2, #1883	; 0x75b
   b43c0:	f000 f854 	bl	b446c <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b43c4:	4806      	ldr	r0, [pc, #24]	; (b43e0 <_GLOBAL__sub_I_client+0x38>)
   b43c6:	2107      	movs	r1, #7
   b43c8:	b003      	add	sp, #12
   b43ca:	f85d eb04 	ldr.w	lr, [sp], #4
OledWingAdafruit display;
   b43ce:	f001 bd5d 	b.w	b5e8c <_ZN16OledWingAdafruitC1Ei>
   b43d2:	bf00      	nop
   b43d4:	000b7c8d 	.word	0x000b7c8d
   b43d8:	000b40f1 	.word	0x000b40f1
   b43dc:	2003e5e8 	.word	0x2003e5e8
   b43e0:	2003e648 	.word	0x2003e648

000b43e4 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b43e4:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b43e8:	b510      	push	{r4, lr}
   b43ea:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b43ec:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b43ee:	b113      	cbz	r3, b43f6 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b43f0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b43f2:	f001 fde9 	bl	b5fc8 <os_mutex_lock>
#endif
#endif
#endif
        }
   b43f6:	4620      	mov	r0, r4
   b43f8:	bd10      	pop	{r4, pc}

000b43fa <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b43fa:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b43fc:	6803      	ldr	r3, [r0, #0]
   b43fe:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4402:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4404:	b112      	cbz	r2, b440c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4406:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4408:	f001 fde6 	bl	b5fd8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b440c:	4620      	mov	r0, r4
   b440e:	bd10      	pop	{r4, pc}

000b4410 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4412:	461f      	mov	r7, r3
   b4414:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4418:	4604      	mov	r4, r0
   b441a:	460d      	mov	r5, r1
   b441c:	4616      	mov	r6, r2
    if (thread) {
   b441e:	b12b      	cbz	r3, b442c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4420:	2301      	movs	r3, #1
   b4422:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4426:	3058      	adds	r0, #88	; 0x58
   b4428:	f001 fdbe 	bl	b5fa8 <os_mutex_create>
    }
    this->callback = callback;
   b442c:	9b08      	ldr	r3, [sp, #32]
   b442e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4430:	2300      	movs	r3, #0
   b4432:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4434:	b106      	cbz	r6, b4438 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4436:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4438:	b125      	cbz	r5, b4444 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b443a:	4629      	mov	r1, r5
   b443c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4440:	f002 fc0d 	bl	b6c5e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4444:	9b06      	ldr	r3, [sp, #24]
   b4446:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4448:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b444a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b444c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4450:	2bff      	cmp	r3, #255	; 0xff
   b4452:	bfb8      	it	lt
   b4454:	23ff      	movlt	r3, #255	; 0xff
   b4456:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b445a:	b108      	cbz	r0, b4460 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b445c:	f7ff fe2f 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4460:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4464:	f7ff fe29 	bl	b40ba <_Znaj>
   b4468:	61e0      	str	r0, [r4, #28]
}
   b446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b446c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b446c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4470:	4604      	mov	r4, r0
            bool thread) {
   b4472:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4474:	4617      	mov	r7, r2
   b4476:	4698      	mov	r8, r3
   b4478:	460e      	mov	r6, r1
            bool thread) {
   b447a:	f002 ff03 	bl	b7284 <_ZN9TCPClientC1Ev>
   b447e:	490d      	ldr	r1, [pc, #52]	; (b44b4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4480:	61e5      	str	r5, [r4, #28]
   b4482:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4486:	f002 fbd6 	bl	b6c36 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b448a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b448e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4490:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4494:	22ff      	movs	r2, #255	; 0xff
   b4496:	230f      	movs	r3, #15
   b4498:	e9cd 3200 	strd	r3, r2, [sp]
   b449c:	4620      	mov	r0, r4
            bool thread) {
   b449e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b44a2:	463b      	mov	r3, r7
   b44a4:	462a      	mov	r2, r5
   b44a6:	4631      	mov	r1, r6
   b44a8:	f7ff ffb2 	bl	b4410 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b44ac:	4620      	mov	r0, r4
   b44ae:	b004      	add	sp, #16
   b44b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44b4:	000b7c76 	.word	0x000b7c76

000b44b8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b44bc:	4620      	mov	r0, r4
   b44be:	f002 fe3d 	bl	b713c <_ZN9TCPClient9availableEv>
   b44c2:	2800      	cmp	r0, #0
   b44c4:	d0fa      	beq.n	b44bc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b44c6:	4620      	mov	r0, r4
   b44c8:	f002 fc22 	bl	b6d10 <_ZN9TCPClient4readEv>
}
   b44cc:	b2c0      	uxtb	r0, r0
   b44ce:	bd10      	pop	{r4, pc}

000b44d0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b44d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44d4:	4605      	mov	r5, r0
   b44d6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b44d8:	f7ff ffee 	bl	b44b8 <_ZN4MQTT8readByteEv>
   b44dc:	69eb      	ldr	r3, [r5, #28]
   b44de:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b44e0:	69eb      	ldr	r3, [r5, #28]
   b44e2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b44e6:	f04f 0901 	mov.w	r9, #1
   b44ea:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b44ee:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b44f0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b44f2:	4628      	mov	r0, r5
   b44f4:	f7ff ffe0 	bl	b44b8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b44f8:	4626      	mov	r6, r4
   b44fa:	69eb      	ldr	r3, [r5, #28]
   b44fc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b44fe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4502:	fb13 f309 	smulbb	r3, r3, r9
   b4506:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4508:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b450a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b450c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b450e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4510:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4514:	d4ed      	bmi.n	b44f2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4516:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4518:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b451c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4520:	d11e      	bne.n	b4560 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4522:	4628      	mov	r0, r5
   b4524:	f7ff ffc8 	bl	b44b8 <_ZN4MQTT8readByteEv>
   b4528:	69eb      	ldr	r3, [r5, #28]
   b452a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b452c:	4628      	mov	r0, r5
   b452e:	f7ff ffc3 	bl	b44b8 <_ZN4MQTT8readByteEv>
   b4532:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4534:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4536:	b2b6      	uxth	r6, r6
   b4538:	69eb      	ldr	r3, [r5, #28]
   b453a:	b2a4      	uxth	r4, r4
   b453c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b453e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4540:	b2b6      	uxth	r6, r6
   b4542:	42be      	cmp	r6, r7
   b4544:	d20e      	bcs.n	b4564 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4546:	4628      	mov	r0, r5
   b4548:	f7ff ffb6 	bl	b44b8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b454c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4550:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4552:	bf84      	itt	hi
   b4554:	69eb      	ldrhi	r3, [r5, #28]
   b4556:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4558:	3401      	adds	r4, #1
   b455a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b455c:	3601      	adds	r6, #1
   b455e:	e7ef      	b.n	b4540 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4560:	2600      	movs	r6, #0
   b4562:	e7ed      	b.n	b4540 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4564:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4568:	42a3      	cmp	r3, r4
   b456a:	bf2c      	ite	cs
   b456c:	4620      	movcs	r0, r4
   b456e:	2000      	movcc	r0, #0
   b4570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4574 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4578:	4615      	mov	r5, r2
   b457a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b457c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b457e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4580:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4582:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4584:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4586:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b458a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b458e:	f103 0401 	add.w	r4, r3, #1
   b4592:	4403      	add	r3, r0
            digit |= 0x80;
   b4594:	bf88      	it	hi
   b4596:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b459a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b459e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b45a2:	b2e4      	uxtb	r4, r4
   b45a4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b45a8:	d81e      	bhi.n	b45e8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b45aa:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b45ae:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b45b2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b45b4:	4622      	mov	r2, r4
   b45b6:	a901      	add	r1, sp, #4
   b45b8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b45ba:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b45be:	f003 fa47 	bl	b7a50 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b45c2:	1c72      	adds	r2, r6, #1
   b45c4:	4422      	add	r2, r4
   b45c6:	4641      	mov	r1, r8
   b45c8:	4638      	mov	r0, r7
   b45ca:	f002 fb8c 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
   b45ce:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45d0:	f001 fd22 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b45d4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b45d6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b45d8:	4432      	add	r2, r6
   b45da:	b2a8      	uxth	r0, r5
}
   b45dc:	1a13      	subs	r3, r2, r0
   b45de:	4258      	negs	r0, r3
   b45e0:	4158      	adcs	r0, r3
   b45e2:	b002      	add	sp, #8
   b45e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b45e8:	4623      	mov	r3, r4
   b45ea:	e7ca      	b.n	b4582 <_ZN4MQTT5writeEhPht+0xe>

000b45ec <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b45ec:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b45ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45f0:	4605      	mov	r5, r0
    pos += 2;
   b45f2:	b298      	uxth	r0, r3
   b45f4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b45f6:	5cce      	ldrb	r6, [r1, r3]
   b45f8:	b29c      	uxth	r4, r3
   b45fa:	b156      	cbz	r6, b4612 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b45fc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4600:	4584      	cmp	ip, r0
   b4602:	f103 0701 	add.w	r7, r3, #1
   b4606:	d904      	bls.n	b4612 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4608:	1c44      	adds	r4, r0, #1
   b460a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b460c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b460e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4610:	e7f1      	b.n	b45f6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4612:	b299      	uxth	r1, r3
   b4614:	1a41      	subs	r1, r0, r1
   b4616:	440a      	add	r2, r1
   b4618:	0a21      	lsrs	r1, r4, #8
   b461a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b461e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4622:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4624 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4624:	b538      	push	{r3, r4, r5, lr}
   b4626:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4628:	f002 fcaa 	bl	b6f80 <_ZN9TCPClient9connectedEv>
   b462c:	2800      	cmp	r0, #0
   b462e:	bf14      	ite	ne
   b4630:	2501      	movne	r5, #1
   b4632:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4634:	d102      	bne.n	b463c <_ZN4MQTT11isConnectedEv+0x18>
   b4636:	4620      	mov	r0, r4
   b4638:	f002 fdda 	bl	b71f0 <_ZN9TCPClient4stopEv>
    return rc;
}
   b463c:	4628      	mov	r0, r5
   b463e:	bd38      	pop	{r3, r4, r5, pc}

000b4640 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4644:	b088      	sub	sp, #32
   b4646:	4604      	mov	r4, r0
   b4648:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b464c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4650:	4689      	mov	r9, r1
   b4652:	4617      	mov	r7, r2
   b4654:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4656:	f7ff ffe5 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b465a:	4605      	mov	r5, r0
   b465c:	2800      	cmp	r0, #0
   b465e:	f040 80cd 	bne.w	b47fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4662:	4621      	mov	r1, r4
   b4664:	a801      	add	r0, sp, #4
   b4666:	f7ff febd 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b466a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b466c:	2900      	cmp	r1, #0
   b466e:	f040 8088 	bne.w	b4782 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4672:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4678:	462b      	mov	r3, r5
   b467a:	4620      	mov	r0, r4
   b467c:	f002 fc02 	bl	b6e84 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4680:	2800      	cmp	r0, #0
   b4682:	d07a      	beq.n	b477a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4684:	2301      	movs	r3, #1
   b4686:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4688:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b468c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b468e:	2b04      	cmp	r3, #4
   b4690:	4b5b      	ldr	r3, [pc, #364]	; (b4800 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4692:	f040 8081 	bne.w	b4798 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4696:	6818      	ldr	r0, [r3, #0]
   b4698:	8899      	ldrh	r1, [r3, #4]
   b469a:	799b      	ldrb	r3, [r3, #6]
   b469c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b46a0:	f88d 300e 	strb.w	r3, [sp, #14]
   b46a4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b46a6:	f8c2 0005 	str.w	r0, [r2, #5]
   b46aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b46ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b46b2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b46b6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b46b8:	230c      	movs	r3, #12
            if (willTopic) {
   b46ba:	f1b8 0f00 	cmp.w	r8, #0
   b46be:	f000 8081 	beq.w	b47c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b46c2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b46c6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b46ca:	0140      	lsls	r0, r0, #5
   b46cc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b46d0:	f040 0006 	orr.w	r0, r0, #6
   b46d4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b46d6:	f1ba 0f00 	cmp.w	sl, #0
   b46da:	d101      	bne.n	b46e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b46dc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b46e0:	b11f      	cbz	r7, b46ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b46e2:	2e00      	cmp	r6, #0
   b46e4:	d170      	bne.n	b47c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b46e6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b46ea:	69e2      	ldr	r2, [r4, #28]
   b46ec:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b46ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b46f0:	69e1      	ldr	r1, [r4, #28]
   b46f2:	1c58      	adds	r0, r3, #1
   b46f4:	1212      	asrs	r2, r2, #8
   b46f6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b46f8:	1c9a      	adds	r2, r3, #2
   b46fa:	69e1      	ldr	r1, [r4, #28]
   b46fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b46fe:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4700:	3303      	adds	r3, #3
   b4702:	69e2      	ldr	r2, [r4, #28]
   b4704:	4649      	mov	r1, r9
   b4706:	4620      	mov	r0, r4
   b4708:	f7ff ff70 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
   b470c:	4603      	mov	r3, r0
            if (willTopic) {
   b470e:	f1b8 0f00 	cmp.w	r8, #0
   b4712:	d00b      	beq.n	b472c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4714:	69e2      	ldr	r2, [r4, #28]
   b4716:	4641      	mov	r1, r8
   b4718:	4620      	mov	r0, r4
   b471a:	f7ff ff67 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b471e:	69e2      	ldr	r2, [r4, #28]
   b4720:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4722:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4724:	4620      	mov	r0, r4
   b4726:	f7ff ff61 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
   b472a:	4603      	mov	r3, r0
            if(user != NULL) {
   b472c:	b167      	cbz	r7, b4748 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b472e:	69e2      	ldr	r2, [r4, #28]
   b4730:	4639      	mov	r1, r7
   b4732:	4620      	mov	r0, r4
   b4734:	f7ff ff5a 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
   b4738:	4603      	mov	r3, r0
                if(pass != NULL) {
   b473a:	b12e      	cbz	r6, b4748 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b473c:	69e2      	ldr	r2, [r4, #28]
   b473e:	4631      	mov	r1, r6
   b4740:	4620      	mov	r0, r4
   b4742:	f7ff ff53 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
   b4746:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4748:	3b05      	subs	r3, #5
   b474a:	69e2      	ldr	r2, [r4, #28]
   b474c:	b29b      	uxth	r3, r3
   b474e:	2110      	movs	r1, #16
   b4750:	4620      	mov	r0, r4
   b4752:	f7ff ff0f 	bl	b4574 <_ZN4MQTT5writeEhPht>
   b4756:	f001 fc5f 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b475a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b475e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4762:	4620      	mov	r0, r4
   b4764:	f002 fcea 	bl	b713c <_ZN9TCPClient9availableEv>
   b4768:	bb88      	cbnz	r0, b47ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b476a:	f001 fc55 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b476e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4770:	1ac0      	subs	r0, r0, r3
   b4772:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4774:	4373      	muls	r3, r6
   b4776:	4298      	cmp	r0, r3
   b4778:	d9f3      	bls.n	b4762 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b477a:	4620      	mov	r0, r4
   b477c:	f002 fd38 	bl	b71f0 <_ZN9TCPClient4stopEv>
   b4780:	e035      	b.n	b47ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4782:	a802      	add	r0, sp, #8
   b4784:	f001 fff6 	bl	b6774 <_ZN9IPAddressC1EPKh>
   b4788:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b478c:	462b      	mov	r3, r5
   b478e:	a902      	add	r1, sp, #8
   b4790:	4620      	mov	r0, r4
   b4792:	f002 fc57 	bl	b7044 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4796:	e773      	b.n	b4680 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4798:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b479c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b47a0:	7bdb      	ldrb	r3, [r3, #15]
   b47a2:	f10d 0c08 	add.w	ip, sp, #8
   b47a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b47aa:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b47ae:	ab02      	add	r3, sp, #8
   b47b0:	cb03      	ldmia	r3!, {r0, r1}
   b47b2:	f8c2 0005 	str.w	r0, [r2, #5]
   b47b6:	f8c2 1009 	str.w	r1, [r2, #9]
   b47ba:	f89c 3000 	ldrb.w	r3, [ip]
   b47be:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b47c0:	230e      	movs	r3, #14
   b47c2:	e77a      	b.n	b46ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b47c4:	2002      	movs	r0, #2
   b47c6:	e786      	b.n	b46d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b47c8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b47cc:	e78d      	b.n	b46ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b47ce:	a902      	add	r1, sp, #8
   b47d0:	4620      	mov	r0, r4
   b47d2:	f7ff fe7d 	bl	b44d0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b47d6:	2804      	cmp	r0, #4
   b47d8:	d1cf      	bne.n	b477a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b47da:	69e3      	ldr	r3, [r4, #28]
   b47dc:	78de      	ldrb	r6, [r3, #3]
   b47de:	2e00      	cmp	r6, #0
   b47e0:	d1cb      	bne.n	b477a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b47e2:	f001 fc19 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b47e6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b47e8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b47ea:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b47ee:	a801      	add	r0, sp, #4
   b47f0:	f7ff fe03 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b47f4:	4628      	mov	r0, r5
   b47f6:	b008      	add	sp, #32
   b47f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b47fc:	2500      	movs	r5, #0
   b47fe:	e7f9      	b.n	b47f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4800:	000b7ba4 	.word	0x000b7ba4

000b4804 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b4804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b4806:	2301      	movs	r3, #1
   b4808:	2204      	movs	r2, #4
   b480a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b480e:	2300      	movs	r3, #0
   b4810:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b4814:	e9cd 3300 	strd	r3, r3, [sp]
   b4818:	461a      	mov	r2, r3
   b481a:	f7ff ff11 	bl	b4640 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b481e:	b007      	add	sp, #28
   b4820:	f85d fb04 	ldr.w	pc, [sp], #4

000b4824 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4828:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b482c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4830:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4834:	4604      	mov	r4, r0
   b4836:	468b      	mov	fp, r1
   b4838:	4616      	mov	r6, r2
   b483a:	461f      	mov	r7, r3
    if (isConnected()) {
   b483c:	f7ff fef2 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b4840:	4682      	mov	sl, r0
   b4842:	2800      	cmp	r0, #0
   b4844:	d051      	beq.n	b48ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4846:	4621      	mov	r1, r4
   b4848:	a801      	add	r0, sp, #4
   b484a:	f7ff fdcb 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b484e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4852:	69e0      	ldr	r0, [r4, #28]
   b4854:	2100      	movs	r1, #0
   b4856:	f003 f909 	bl	b7a6c <memset>
        length = writeString(topic, buffer, length);
   b485a:	2305      	movs	r3, #5
   b485c:	69e2      	ldr	r2, [r4, #28]
   b485e:	4659      	mov	r1, fp
   b4860:	4620      	mov	r0, r4
   b4862:	f7ff fec3 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4866:	1e6b      	subs	r3, r5, #1
   b4868:	2b01      	cmp	r3, #1
   b486a:	d815      	bhi.n	b4898 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b486c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b486e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4870:	3101      	adds	r1, #1
   b4872:	b289      	uxth	r1, r1
   b4874:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4876:	0a09      	lsrs	r1, r1, #8
   b4878:	5419      	strb	r1, [r3, r0]
   b487a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b487c:	69e3      	ldr	r3, [r4, #28]
   b487e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4880:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4882:	3002      	adds	r0, #2
   b4884:	5499      	strb	r1, [r3, r2]
   b4886:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4888:	f1b8 0f00 	cmp.w	r8, #0
   b488c:	d004      	beq.n	b4898 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b488e:	8c23      	ldrh	r3, [r4, #32]
   b4890:	1c5a      	adds	r2, r3, #1
   b4892:	8422      	strh	r2, [r4, #32]
   b4894:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4898:	2100      	movs	r1, #0
   b489a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b489c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b489e:	69e2      	ldr	r2, [r4, #28]
   b48a0:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b48a2:	d90a      	bls.n	b48ba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b48a4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b48a8:	459c      	cmp	ip, r3
   b48aa:	d906      	bls.n	b48ba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b48ac:	f816 c001 	ldrb.w	ip, [r6, r1]
   b48b0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b48b4:	3101      	adds	r1, #1
   b48b6:	b289      	uxth	r1, r1
   b48b8:	e7ef      	b.n	b489a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b48ba:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b48be:	2900      	cmp	r1, #0
   b48c0:	bf0c      	ite	eq
   b48c2:	2130      	moveq	r1, #48	; 0x30
   b48c4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b48c6:	f1b9 0f00 	cmp.w	r9, #0
   b48ca:	d001      	beq.n	b48d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b48cc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b48d0:	2d02      	cmp	r5, #2
   b48d2:	d10e      	bne.n	b48f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b48d4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b48d8:	3b05      	subs	r3, #5
   b48da:	b29b      	uxth	r3, r3
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff fe49 	bl	b4574 <_ZN4MQTT5writeEhPht>
   b48e2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b48e4:	a801      	add	r0, sp, #4
   b48e6:	f7ff fd88 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b48ea:	4650      	mov	r0, sl
   b48ec:	b003      	add	sp, #12
   b48ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b48f2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b48f4:	bf08      	it	eq
   b48f6:	f041 0102 	orreq.w	r1, r1, #2
   b48fa:	e7ed      	b.n	b48d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b48fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b48fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b48fe:	9c08      	ldr	r4, [sp, #32]
   b4900:	9403      	str	r4, [sp, #12]
   b4902:	2400      	movs	r4, #0
   b4904:	9402      	str	r4, [sp, #8]
   b4906:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b490a:	9401      	str	r4, [sp, #4]
   b490c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4910:	9400      	str	r4, [sp, #0]
   b4912:	f7ff ff87 	bl	b4824 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4916:	b004      	add	sp, #16
   b4918:	bd10      	pop	{r4, pc}

000b491a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b491a:	b530      	push	{r4, r5, lr}
   b491c:	b087      	sub	sp, #28
   b491e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4920:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4922:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4924:	9204      	str	r2, [sp, #16]
   b4926:	f7ff fb83 	bl	b4030 <strlen>
   b492a:	2500      	movs	r5, #0
   b492c:	4603      	mov	r3, r0
   b492e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4932:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4936:	9500      	str	r5, [sp, #0]
   b4938:	4620      	mov	r0, r4
   b493a:	f7ff ffdf 	bl	b48fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b493e:	b007      	add	sp, #28
   b4940:	bd30      	pop	{r4, r5, pc}

000b4942 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4942:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4944:	4604      	mov	r4, r0
   b4946:	460e      	mov	r6, r1
    if (isConnected()) {
   b4948:	f7ff fe6c 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b494c:	4605      	mov	r5, r0
   b494e:	b1c8      	cbz	r0, b4984 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4950:	4621      	mov	r1, r4
   b4952:	a801      	add	r0, sp, #4
   b4954:	f7ff fd46 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4958:	69e3      	ldr	r3, [r4, #28]
   b495a:	2262      	movs	r2, #98	; 0x62
   b495c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b495e:	69e3      	ldr	r3, [r4, #28]
   b4960:	2202      	movs	r2, #2
   b4962:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4964:	69e3      	ldr	r3, [r4, #28]
   b4966:	0a32      	lsrs	r2, r6, #8
   b4968:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b496a:	69e3      	ldr	r3, [r4, #28]
   b496c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b496e:	69e1      	ldr	r1, [r4, #28]
   b4970:	2204      	movs	r2, #4
   b4972:	4620      	mov	r0, r4
   b4974:	f002 f9b7 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
   b4978:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b497a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b497c:	bf18      	it	ne
   b497e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4980:	f7ff fd3b 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b4984:	4628      	mov	r0, r5
   b4986:	b002      	add	sp, #8
   b4988:	bd70      	pop	{r4, r5, r6, pc}

000b498a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b498a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b498c:	4604      	mov	r4, r0
   b498e:	460e      	mov	r6, r1
    if (isConnected()) {
   b4990:	f7ff fe48 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b4994:	4605      	mov	r5, r0
   b4996:	b1c8      	cbz	r0, b49cc <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4998:	4621      	mov	r1, r4
   b499a:	a801      	add	r0, sp, #4
   b499c:	f7ff fd22 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b49a0:	69e3      	ldr	r3, [r4, #28]
   b49a2:	2272      	movs	r2, #114	; 0x72
   b49a4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b49a6:	69e3      	ldr	r3, [r4, #28]
   b49a8:	2202      	movs	r2, #2
   b49aa:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b49ac:	69e3      	ldr	r3, [r4, #28]
   b49ae:	0a32      	lsrs	r2, r6, #8
   b49b0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b49b2:	69e3      	ldr	r3, [r4, #28]
   b49b4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b49b6:	69e1      	ldr	r1, [r4, #28]
   b49b8:	2204      	movs	r2, #4
   b49ba:	4620      	mov	r0, r4
   b49bc:	f002 f993 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
   b49c0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b49c2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b49c4:	bf18      	it	ne
   b49c6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b49c8:	f7ff fd17 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b49cc:	4628      	mov	r0, r5
   b49ce:	b002      	add	sp, #8
   b49d0:	bd70      	pop	{r4, r5, r6, pc}

000b49d2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b49d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49d6:	ed2d 8b02 	vpush	{d8}
   b49da:	b087      	sub	sp, #28
   b49dc:	af00      	add	r7, sp, #0
   b49de:	4604      	mov	r4, r0
    if (isConnected()) {
   b49e0:	f7ff fe20 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b49e4:	4681      	mov	r9, r0
   b49e6:	b1f8      	cbz	r0, b4a28 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b49e8:	4621      	mov	r1, r4
   b49ea:	f107 0014 	add.w	r0, r7, #20
   b49ee:	f7ff fcf9 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
   b49f2:	f001 fb11 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b49f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b49f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b49fc:	4353      	muls	r3, r2
   b49fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4a00:	1a82      	subs	r2, r0, r2
   b4a02:	429a      	cmp	r2, r3
   b4a04:	4606      	mov	r6, r0
   b4a06:	d803      	bhi.n	b4a10 <_ZN4MQTT4loopEv+0x3e>
   b4a08:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4a0a:	1a82      	subs	r2, r0, r2
   b4a0c:	4293      	cmp	r3, r2
   b4a0e:	d221      	bcs.n	b4a54 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4a10:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4a14:	b17b      	cbz	r3, b4a36 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4a16:	4620      	mov	r0, r4
   b4a18:	f002 fbea 	bl	b71f0 <_ZN9TCPClient4stopEv>
                return false;
   b4a1c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4a20:	f107 0014 	add.w	r0, r7, #20
   b4a24:	f7ff fce9 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b4a28:	4648      	mov	r0, r9
   b4a2a:	371c      	adds	r7, #28
   b4a2c:	46bd      	mov	sp, r7
   b4a2e:	ecbd 8b02 	vpop	{d8}
   b4a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4a36:	69e2      	ldr	r2, [r4, #28]
   b4a38:	21c0      	movs	r1, #192	; 0xc0
   b4a3a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4a3c:	69e2      	ldr	r2, [r4, #28]
   b4a3e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4a40:	69e1      	ldr	r1, [r4, #28]
   b4a42:	2202      	movs	r2, #2
   b4a44:	4620      	mov	r0, r4
   b4a46:	f002 f94e 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4a4a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4a4e:	2301      	movs	r3, #1
   b4a50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4a54:	4620      	mov	r0, r4
   b4a56:	f002 fb71 	bl	b713c <_ZN9TCPClient9availableEv>
   b4a5a:	2800      	cmp	r0, #0
   b4a5c:	d0e0      	beq.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4a5e:	f107 0113 	add.w	r1, r7, #19
   b4a62:	4620      	mov	r0, r4
   b4a64:	f7ff fd34 	bl	b44d0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4a68:	4683      	mov	fp, r0
   b4a6a:	2800      	cmp	r0, #0
   b4a6c:	d0d8      	beq.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4a6e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4a70:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4a72:	7819      	ldrb	r1, [r3, #0]
   b4a74:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4a78:	2a30      	cmp	r2, #48	; 0x30
   b4a7a:	d17f      	bne.n	b4b7c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4a7c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4a80:	f1ba 0f00 	cmp.w	sl, #0
   b4a84:	d0cc      	beq.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4a86:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4a8a:	466a      	mov	r2, sp
   b4a8c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4a90:	eb03 020c 	add.w	r2, r3, ip
   b4a94:	7851      	ldrb	r1, [r2, #1]
   b4a96:	7895      	ldrb	r5, [r2, #2]
   b4a98:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4a9c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4a9e:	f105 0208 	add.w	r2, r5, #8
   b4aa2:	4669      	mov	r1, sp
   b4aa4:	08d2      	lsrs	r2, r2, #3
   b4aa6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4aaa:	4695      	mov	sp, r2
   b4aac:	f10c 0203 	add.w	r2, ip, #3
   b4ab0:	60fa      	str	r2, [r7, #12]
   b4ab2:	eb03 0e02 	add.w	lr, r3, r2
   b4ab6:	eb0d 0205 	add.w	r2, sp, r5
   b4aba:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4abc:	f8c7 d008 	str.w	sp, [r7, #8]
   b4ac0:	607a      	str	r2, [r7, #4]
   b4ac2:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4ac6:	428a      	cmp	r2, r1
   b4ac8:	d006      	beq.n	b4ad8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4aca:	460a      	mov	r2, r1
   b4acc:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4ad0:	f802 8b01 	strb.w	r8, [r2], #1
   b4ad4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4ad6:	e7f4      	b.n	b4ac2 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4ad8:	2200      	movs	r2, #0
   b4ada:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4adc:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4ae0:	68f9      	ldr	r1, [r7, #12]
   b4ae2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4ae6:	ebab 020c 	sub.w	r2, fp, ip
   b4aea:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4aec:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4af0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4af4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4af6:	d125      	bne.n	b4b44 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4af8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4afc:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4afe:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b00:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4b04:	f10c 0105 	add.w	r1, ip, #5
   b4b08:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4b0a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b0c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4b10:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4b12:	69e3      	ldr	r3, [r4, #28]
   b4b14:	2240      	movs	r2, #64	; 0x40
   b4b16:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4b18:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b1a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4b1e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4b22:	69e3      	ldr	r3, [r4, #28]
   b4b24:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4b28:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4b2a:	69e3      	ldr	r3, [r4, #28]
   b4b2c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4b30:	69e1      	ldr	r1, [r4, #28]
   b4b32:	2204      	movs	r2, #4
   b4b34:	4620      	mov	r0, r4
   b4b36:	f002 f8d6 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4b3a:	6266      	str	r6, [r4, #36]	; 0x24
   b4b3c:	ee18 3a10 	vmov	r3, s16
   b4b40:	469d      	mov	sp, r3
   b4b42:	e76d      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4b44:	f1b8 0f04 	cmp.w	r8, #4
   b4b48:	d115      	bne.n	b4b76 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b4a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4b4e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4b50:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b52:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4b56:	f10c 0105 	add.w	r1, ip, #5
   b4b5a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4b5c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b5e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4b62:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4b64:	69e3      	ldr	r3, [r4, #28]
   b4b66:	2250      	movs	r2, #80	; 0x50
   b4b68:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4b6a:	69e3      	ldr	r3, [r4, #28]
   b4b6c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b6e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4b72:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4b74:	e7d5      	b.n	b4b22 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4b76:	4419      	add	r1, r3
   b4b78:	47d0      	blx	sl
   b4b7a:	e7df      	b.n	b4b3c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4b7c:	2a50      	cmp	r2, #80	; 0x50
   b4b7e:	d108      	bne.n	b4b92 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4b80:	789a      	ldrb	r2, [r3, #2]
   b4b82:	78d9      	ldrb	r1, [r3, #3]
   b4b84:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4b88:	b289      	uxth	r1, r1
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff fed9 	bl	b4942 <_ZN4MQTT14publishReleaseEt>
   b4b90:	e746      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4b92:	2a40      	cmp	r2, #64	; 0x40
   b4b94:	d112      	bne.n	b4bbc <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4b96:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4b98:	2a00      	cmp	r2, #0
   b4b9a:	f43f af41 	beq.w	b4a20 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4b9e:	f1bb 0f04 	cmp.w	fp, #4
   b4ba2:	f47f af3d 	bne.w	b4a20 <_ZN4MQTT4loopEv+0x4e>
   b4ba6:	f011 0f06 	tst.w	r1, #6
   b4baa:	f47f af39 	bne.w	b4a20 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4bae:	7899      	ldrb	r1, [r3, #2]
   b4bb0:	78d8      	ldrb	r0, [r3, #3]
   b4bb2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4bb6:	b280      	uxth	r0, r0
   b4bb8:	4790      	blx	r2
   b4bba:	e731      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4bbc:	2a60      	cmp	r2, #96	; 0x60
   b4bbe:	d108      	bne.n	b4bd2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4bc0:	789a      	ldrb	r2, [r3, #2]
   b4bc2:	78d9      	ldrb	r1, [r3, #3]
   b4bc4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4bc8:	b289      	uxth	r1, r1
   b4bca:	4620      	mov	r0, r4
   b4bcc:	f7ff fedd 	bl	b498a <_ZN4MQTT15publishCompleteEt>
   b4bd0:	e726      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4bd2:	2a70      	cmp	r2, #112	; 0x70
   b4bd4:	d0df      	beq.n	b4b96 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4bd6:	2a90      	cmp	r2, #144	; 0x90
   b4bd8:	f43f af22 	beq.w	b4a20 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4bdc:	2ac0      	cmp	r2, #192	; 0xc0
   b4bde:	d10a      	bne.n	b4bf6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4be0:	22d0      	movs	r2, #208	; 0xd0
   b4be2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4be4:	69e3      	ldr	r3, [r4, #28]
   b4be6:	2200      	movs	r2, #0
   b4be8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4bea:	69e1      	ldr	r1, [r4, #28]
   b4bec:	2202      	movs	r2, #2
   b4bee:	4620      	mov	r0, r4
   b4bf0:	f002 f879 	bl	b6ce6 <_ZN9TCPClient5writeEPKhj>
   b4bf4:	e714      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4bf6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4bf8:	bf04      	itt	eq
   b4bfa:	2300      	moveq	r3, #0
   b4bfc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4c00:	e70e      	b.n	b4a20 <_ZN4MQTT4loopEv+0x4e>

000b4c02 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4c04:	4604      	mov	r4, r0
   b4c06:	460f      	mov	r7, r1
   b4c08:	4616      	mov	r6, r2
    if (isConnected()) {
   b4c0a:	f7ff fd0b 	bl	b4624 <_ZN4MQTT11isConnectedEv>
   b4c0e:	4605      	mov	r5, r0
   b4c10:	b310      	cbz	r0, b4c58 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4c12:	4621      	mov	r1, r4
   b4c14:	a801      	add	r0, sp, #4
   b4c16:	f7ff fbe5 	bl	b43e4 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4c1a:	8c23      	ldrh	r3, [r4, #32]
   b4c1c:	3301      	adds	r3, #1
   b4c1e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4c20:	b1eb      	cbz	r3, b4c5e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4c22:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4c24:	8c23      	ldrh	r3, [r4, #32]
   b4c26:	69e2      	ldr	r2, [r4, #28]
   b4c28:	0a1b      	lsrs	r3, r3, #8
   b4c2a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4c2c:	69e3      	ldr	r3, [r4, #28]
   b4c2e:	8c22      	ldrh	r2, [r4, #32]
   b4c30:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4c32:	69e2      	ldr	r2, [r4, #28]
   b4c34:	2307      	movs	r3, #7
   b4c36:	4639      	mov	r1, r7
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f7ff fcd7 	bl	b45ec <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4c3e:	69e3      	ldr	r3, [r4, #28]
   b4c40:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4c42:	3804      	subs	r0, #4
   b4c44:	b283      	uxth	r3, r0
   b4c46:	69e2      	ldr	r2, [r4, #28]
   b4c48:	2182      	movs	r1, #130	; 0x82
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f7ff fc92 	bl	b4574 <_ZN4MQTT5writeEhPht>
   b4c50:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4c52:	a801      	add	r0, sp, #4
   b4c54:	f7ff fbd1 	bl	b43fa <_ZN4MQTT11MutexLockerD1Ev>
}
   b4c58:	4628      	mov	r0, r5
   b4c5a:	b003      	add	sp, #12
   b4c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4c5e:	2301      	movs	r3, #1
   b4c60:	e7df      	b.n	b4c22 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4c62 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4c62:	2200      	movs	r2, #0
   b4c64:	f7ff bfcd 	b.w	b4c02 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4c68 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c6c:	b085      	sub	sp, #20
   b4c6e:	461f      	mov	r7, r3
   b4c70:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4c74:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4c78:	eba8 0902 	sub.w	r9, r8, r2
   b4c7c:	eba7 0a01 	sub.w	sl, r7, r1
   b4c80:	f1b9 0f00 	cmp.w	r9, #0
   b4c84:	bfb8      	it	lt
   b4c86:	f1c9 0900 	rsblt	r9, r9, #0
   b4c8a:	f1ba 0f00 	cmp.w	sl, #0
   b4c8e:	bfb8      	it	lt
   b4c90:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4c94:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4c96:	4683      	mov	fp, r0
   b4c98:	460c      	mov	r4, r1
   b4c9a:	4615      	mov	r5, r2
    if (steep) {
   b4c9c:	dd04      	ble.n	b4ca8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4c9e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4ca0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4ca2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4ca4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4ca6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4ca8:	42bc      	cmp	r4, r7
   b4caa:	dd05      	ble.n	b4cb8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4cac:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4cae:	4645      	mov	r5, r8
   b4cb0:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4cb2:	4622      	mov	r2, r4
   b4cb4:	463c      	mov	r4, r7
   b4cb6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4cb8:	1b3e      	subs	r6, r7, r4
   b4cba:	b2b2      	uxth	r2, r6
   b4cbc:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4cbe:	eba8 0205 	sub.w	r2, r8, r5
   b4cc2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4cc6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4cca:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4cce:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4cd2:	4545      	cmp	r5, r8
   b4cd4:	bfb4      	ite	lt
   b4cd6:	2201      	movlt	r2, #1
   b4cd8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4cdc:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4cde:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4ce0:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4ce2:	42bc      	cmp	r4, r7
   b4ce4:	dc1c      	bgt.n	b4d20 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4ce6:	f8db 2000 	ldr.w	r2, [fp]
   b4cea:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4cec:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4cee:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4cf2:	bfc7      	ittee	gt
   b4cf4:	4629      	movgt	r1, r5
   b4cf6:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4cf8:	462a      	movle	r2, r5
   b4cfa:	4621      	movle	r1, r4
   b4cfc:	4658      	mov	r0, fp
   b4cfe:	47c0      	blx	r8
        }
        err -= dy;
   b4d00:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4d02:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4d04:	1ab6      	subs	r6, r6, r2
   b4d06:	b2b1      	uxth	r1, r6
   b4d08:	b236      	sxth	r6, r6
        if (err < 0) {
   b4d0a:	2e00      	cmp	r6, #0
   b4d0c:	da05      	bge.n	b4d1a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4d0e:	9a02      	ldr	r2, [sp, #8]
   b4d10:	4415      	add	r5, r2
            err += dx;
   b4d12:	9a00      	ldr	r2, [sp, #0]
   b4d14:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4d16:	b22d      	sxth	r5, r5
            err += dx;
   b4d18:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4d1a:	3401      	adds	r4, #1
   b4d1c:	b224      	sxth	r4, r4
   b4d1e:	e7e0      	b.n	b4ce2 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4d20:	b005      	add	sp, #20
   b4d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4d26 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4d26:	4770      	bx	lr

000b4d28 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4d28:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4d2a:	6804      	ldr	r4, [r0, #0]
   b4d2c:	6924      	ldr	r4, [r4, #16]
   b4d2e:	46a4      	mov	ip, r4
}
   b4d30:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4d34:	4760      	bx	ip

000b4d36 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4d36:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4d38:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4d3a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4d3e:	9502      	str	r5, [sp, #8]
   b4d40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4d42:	46a4      	mov	ip, r4
}
   b4d44:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4d46:	4760      	bx	ip

000b4d48 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4d48:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4d4a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4d4c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4d50:	9502      	str	r5, [sp, #8]
   b4d52:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4d54:	46a4      	mov	ip, r4
}
   b4d56:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4d58:	4760      	bx	ip

000b4d5a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4d5a:	b470      	push	{r4, r5, r6}
   b4d5c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4d60:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4d64:	6804      	ldr	r4, [r0, #0]
   b4d66:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4d6a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4d6c:	46a4      	mov	ip, r4
}
   b4d6e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4d70:	4760      	bx	ip

000b4d72 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4d76:	461c      	mov	r4, r3
    startWrite();
   b4d78:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4d7a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4d7e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4d80:	4605      	mov	r5, r0
   b4d82:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4d84:	3c01      	subs	r4, #1
   b4d86:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4d88:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4d8a:	b224      	sxth	r4, r4
    startWrite();
   b4d8c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4d8e:	682b      	ldr	r3, [r5, #0]
   b4d90:	f8cd 8004 	str.w	r8, [sp, #4]
   b4d94:	9400      	str	r4, [sp, #0]
   b4d96:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4d98:	4628      	mov	r0, r5
   b4d9a:	463b      	mov	r3, r7
   b4d9c:	4632      	mov	r2, r6
   b4d9e:	4639      	mov	r1, r7
   b4da0:	47a0      	blx	r4
    endWrite();
   b4da2:	682b      	ldr	r3, [r5, #0]
   b4da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4da6:	4628      	mov	r0, r5
}
   b4da8:	b002      	add	sp, #8
   b4daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4dae:	4718      	bx	r3

000b4db0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4db4:	461d      	mov	r5, r3
    startWrite();
   b4db6:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4db8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4dbc:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4dbe:	4604      	mov	r4, r0
   b4dc0:	4617      	mov	r7, r2
   b4dc2:	460e      	mov	r6, r1
    startWrite();
   b4dc4:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4dc6:	e9cd 7800 	strd	r7, r8, [sp]
   b4dca:	6822      	ldr	r2, [r4, #0]
   b4dcc:	1e6b      	subs	r3, r5, #1
   b4dce:	4433      	add	r3, r6
   b4dd0:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4dd2:	4620      	mov	r0, r4
   b4dd4:	b21b      	sxth	r3, r3
   b4dd6:	463a      	mov	r2, r7
   b4dd8:	4631      	mov	r1, r6
   b4dda:	47a8      	blx	r5
    endWrite();
   b4ddc:	6823      	ldr	r3, [r4, #0]
   b4dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4de0:	4620      	mov	r0, r4
}
   b4de2:	b002      	add	sp, #8
   b4de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4de8:	4718      	bx	r3

000b4dea <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4dea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4dee:	461e      	mov	r6, r3
    startWrite();
   b4df0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4df2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4df6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4df8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4dfc:	460c      	mov	r4, r1
   b4dfe:	4605      	mov	r5, r0
   b4e00:	4617      	mov	r7, r2
    startWrite();
   b4e02:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4e04:	4426      	add	r6, r4
   b4e06:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4e08:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4e0a:	da0b      	bge.n	b4e24 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4e0c:	f8cd 8000 	str.w	r8, [sp]
   b4e10:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4e14:	4621      	mov	r1, r4
   b4e16:	464b      	mov	r3, r9
   b4e18:	463a      	mov	r2, r7
   b4e1a:	4628      	mov	r0, r5
   b4e1c:	3401      	adds	r4, #1
   b4e1e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4e20:	b224      	sxth	r4, r4
   b4e22:	e7f0      	b.n	b4e06 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e26:	4628      	mov	r0, r5
}
   b4e28:	b002      	add	sp, #8
   b4e2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4e2e:	4718      	bx	r3

000b4e30 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4e30:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4e32:	6802      	ldr	r2, [r0, #0]
   b4e34:	9101      	str	r1, [sp, #4]
   b4e36:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4e3a:	9100      	str	r1, [sp, #0]
   b4e3c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4e3e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4e42:	2200      	movs	r2, #0
   b4e44:	4611      	mov	r1, r2
   b4e46:	47a0      	blx	r4
}
   b4e48:	b002      	add	sp, #8
   b4e4a:	bd10      	pop	{r4, pc}

000b4e4c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4e50:	4299      	cmp	r1, r3
        uint16_t color) {
   b4e52:	4616      	mov	r6, r2
   b4e54:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4e58:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4e5c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4e5e:	4680      	mov	r8, r0
   b4e60:	460d      	mov	r5, r1
   b4e62:	461c      	mov	r4, r3
    if(x0 == x1){
   b4e64:	d113      	bne.n	b4e8e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4e66:	42be      	cmp	r6, r7
   b4e68:	bfc8      	it	gt
   b4e6a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4e6c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4e70:	bfc4      	itt	gt
   b4e72:	463e      	movgt	r6, r7
   b4e74:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4e76:	1c7b      	adds	r3, r7, #1
   b4e78:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4e7a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4e7c:	b21b      	sxth	r3, r3
   b4e7e:	4632      	mov	r2, r6
   b4e80:	4629      	mov	r1, r5
   b4e82:	4640      	mov	r0, r8
   b4e84:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4e86:	b003      	add	sp, #12
   b4e88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4e8c:	4760      	bx	ip
    } else if(y0 == y1){
   b4e8e:	42be      	cmp	r6, r7
   b4e90:	d10a      	bne.n	b4ea8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4e92:	4299      	cmp	r1, r3
   b4e94:	bfc2      	ittt	gt
   b4e96:	460b      	movgt	r3, r1
   b4e98:	4625      	movgt	r5, r4
   b4e9a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4e9c:	1c63      	adds	r3, r4, #1
   b4e9e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4ea2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4ea4:	1b5b      	subs	r3, r3, r5
   b4ea6:	e7e9      	b.n	b4e7c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4ea8:	6953      	ldr	r3, [r2, #20]
   b4eaa:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4eac:	e9cd 7900 	strd	r7, r9, [sp]
   b4eb0:	f8d8 3000 	ldr.w	r3, [r8]
   b4eb4:	4640      	mov	r0, r8
   b4eb6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4eb8:	4632      	mov	r2, r6
   b4eba:	4623      	mov	r3, r4
   b4ebc:	4629      	mov	r1, r5
   b4ebe:	47b8      	blx	r7
        endWrite();
   b4ec0:	f8d8 3000 	ldr.w	r3, [r8]
   b4ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ec6:	4640      	mov	r0, r8
}
   b4ec8:	b003      	add	sp, #12
   b4eca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4ece:	4718      	bx	r3

000b4ed0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4ed0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4ed4:	461d      	mov	r5, r3
    startWrite();
   b4ed6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4ed8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4edc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4ede:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4ee2:	4604      	mov	r4, r0
   b4ee4:	460f      	mov	r7, r1
   b4ee6:	4616      	mov	r6, r2
    startWrite();
   b4ee8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4eea:	6823      	ldr	r3, [r4, #0]
   b4eec:	f8cd 8000 	str.w	r8, [sp]
   b4ef0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4ef4:	4632      	mov	r2, r6
   b4ef6:	462b      	mov	r3, r5
   b4ef8:	4639      	mov	r1, r7
   b4efa:	4620      	mov	r0, r4
   b4efc:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4efe:	6823      	ldr	r3, [r4, #0]
   b4f00:	f8cd 8000 	str.w	r8, [sp]
   b4f04:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f08:	4432      	add	r2, r6
   b4f0a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f0e:	4639      	mov	r1, r7
   b4f10:	462b      	mov	r3, r5
   b4f12:	4620      	mov	r0, r4
   b4f14:	b212      	sxth	r2, r2
   b4f16:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4f18:	6823      	ldr	r3, [r4, #0]
   b4f1a:	f8cd 8000 	str.w	r8, [sp]
   b4f1e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f22:	4632      	mov	r2, r6
   b4f24:	464b      	mov	r3, r9
   b4f26:	4639      	mov	r1, r7
   b4f28:	4620      	mov	r0, r4
   b4f2a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4f2c:	1e6b      	subs	r3, r5, #1
   b4f2e:	19d9      	adds	r1, r3, r7
   b4f30:	6823      	ldr	r3, [r4, #0]
   b4f32:	f8cd 8000 	str.w	r8, [sp]
   b4f36:	6a1d      	ldr	r5, [r3, #32]
   b4f38:	4620      	mov	r0, r4
   b4f3a:	464b      	mov	r3, r9
   b4f3c:	4632      	mov	r2, r6
   b4f3e:	b209      	sxth	r1, r1
   b4f40:	47a8      	blx	r5
    endWrite();
   b4f42:	6823      	ldr	r3, [r4, #0]
   b4f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f46:	4620      	mov	r0, r4
}
   b4f48:	b002      	add	sp, #8
   b4f4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4f4e:	4718      	bx	r3

000b4f50 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4f50:	4770      	bx	lr

000b4f52 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4f52:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4f56:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4f5a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4f5c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4f5e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4f62:	bf59      	ittee	pl
   b4f64:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4f66:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4f68:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4f6a:	81c3      	strhmi	r3, [r0, #14]
}
   b4f6c:	4770      	bx	lr
	...

000b4f70 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4f70:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4f72:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4f74:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4f76:	4a07      	ldr	r2, [pc, #28]	; (b4f94 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4f78:	4d07      	ldr	r5, [pc, #28]	; (b4f98 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4f7a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4f7c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4f7e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4f84:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4f88:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4f8a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4f8c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4f8e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4f90:	6204      	str	r4, [r0, #32]
}
   b4f92:	bd30      	pop	{r4, r5, pc}
   b4f94:	01000101 	.word	0x01000101
   b4f98:	000b81a4 	.word	0x000b81a4

000b4f9c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fa0:	b089      	sub	sp, #36	; 0x24
   b4fa2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4fa6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fa8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4fac:	9304      	str	r3, [sp, #16]
   b4fae:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b4fb2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fb4:	9305      	str	r3, [sp, #20]
   b4fb6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4fba:	4604      	mov	r4, r0
    startWrite();
   b4fbc:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4fbe:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b4fc2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4fc6:	bf48      	it	mi
   b4fc8:	f108 020e 	addmi.w	r2, r8, #14
   b4fcc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4fd0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b4fd2:	4635      	mov	r5, r6
   b4fd4:	9b03      	ldr	r3, [sp, #12]
   b4fd6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4fd8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4fdc:	189a      	adds	r2, r3, r2
   b4fde:	9b05      	ldr	r3, [sp, #20]
   b4fe0:	428b      	cmp	r3, r1
   b4fe2:	b212      	sxth	r2, r2
   b4fe4:	dd27      	ble.n	b5036 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4fe6:	9b04      	ldr	r3, [sp, #16]
   b4fe8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4fea:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4fee:	9306      	str	r3, [sp, #24]
   b4ff0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4ff4:	4580      	cmp	r8, r0
   b4ff6:	fa1f f189 	uxth.w	r1, r9
   b4ffa:	dd17      	ble.n	b502c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4ffc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4ffe:	bf05      	ittet	eq
   b5000:	9b06      	ldreq	r3, [sp, #24]
   b5002:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5004:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5006:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5008:	bf18      	it	ne
   b500a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b500c:	062b      	lsls	r3, r5, #24
   b500e:	d50a      	bpl.n	b5026 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5010:	9b02      	ldr	r3, [sp, #8]
   b5012:	6820      	ldr	r0, [r4, #0]
   b5014:	9207      	str	r2, [sp, #28]
   b5016:	4419      	add	r1, r3
   b5018:	6983      	ldr	r3, [r0, #24]
   b501a:	b209      	sxth	r1, r1
   b501c:	461f      	mov	r7, r3
   b501e:	4620      	mov	r0, r4
   b5020:	4653      	mov	r3, sl
   b5022:	47b8      	blx	r7
   b5024:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5026:	f109 0901 	add.w	r9, r9, #1
   b502a:	e7e1      	b.n	b4ff0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b502c:	9b01      	ldr	r3, [sp, #4]
   b502e:	3301      	adds	r3, #1
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	445e      	add	r6, fp
   b5034:	e7ce      	b.n	b4fd4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5036:	6823      	ldr	r3, [r4, #0]
   b5038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b503a:	4620      	mov	r0, r4
}
   b503c:	b009      	add	sp, #36	; 0x24
   b503e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5042:	4718      	bx	r3

000b5044 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5048:	ed2d 8b02 	vpush	{d8}
   b504c:	b091      	sub	sp, #68	; 0x44
   b504e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5050:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5052:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5056:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b505a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b505e:	9103      	str	r1, [sp, #12]
   b5060:	461f      	mov	r7, r3
   b5062:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5066:	9304      	str	r3, [sp, #16]
   b5068:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b506a:	2a00      	cmp	r2, #0
   b506c:	f040 80c5 	bne.w	b51fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5070:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5074:	428b      	cmp	r3, r1
   b5076:	f340 814c 	ble.w	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b507a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b507e:	42b3      	cmp	r3, r6
   b5080:	f340 8147 	ble.w	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5084:	2306      	movs	r3, #6
   b5086:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b508a:	2b00      	cmp	r3, #0
   b508c:	f340 8141 	ble.w	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5090:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5094:	2b00      	cmp	r3, #0
   b5096:	f340 813c 	ble.w	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b509a:	7f03      	ldrb	r3, [r0, #28]
   b509c:	b91b      	cbnz	r3, b50a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b509e:	2faf      	cmp	r7, #175	; 0xaf
   b50a0:	bf84      	itt	hi
   b50a2:	3701      	addhi	r7, #1
   b50a4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b50a6:	f8db 3000 	ldr.w	r3, [fp]
   b50aa:	4658      	mov	r0, fp
   b50ac:	695b      	ldr	r3, [r3, #20]
   b50ae:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50b0:	2205      	movs	r2, #5
   b50b2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b50b4:	2200      	movs	r2, #0
   b50b6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50b8:	4a98      	ldr	r2, [pc, #608]	; (b531c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b50ba:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b50be:	18d3      	adds	r3, r2, r3
   b50c0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b50c2:	b2b3      	uxth	r3, r6
   b50c4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50c6:	9a05      	ldr	r2, [sp, #20]
   b50c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b50ca:	5c9b      	ldrb	r3, [r3, r2]
   b50cc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b50ce:	b2ab      	uxth	r3, r5
   b50d0:	930b      	str	r3, [sp, #44]	; 0x2c
   b50d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b50d6:	9308      	str	r3, [sp, #32]
   b50d8:	9b03      	ldr	r3, [sp, #12]
   b50da:	fb02 f905 	mul.w	r9, r2, r5
   b50de:	fa19 f983 	uxtah	r9, r9, r3
   b50e2:	fa0f f389 	sxth.w	r3, r9
   b50e6:	ee08 3a10 	vmov	s16, r3
   b50ea:	2308      	movs	r3, #8
   b50ec:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b50ee:	9b03      	ldr	r3, [sp, #12]
   b50f0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b50f4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b50f8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b50fc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b50fe:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5102:	07d2      	lsls	r2, r2, #31
   b5104:	d552      	bpl.n	b51ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5106:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5108:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b510c:	d13e      	bne.n	b518c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b510e:	2c01      	cmp	r4, #1
   b5110:	d13c      	bne.n	b518c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5112:	699b      	ldr	r3, [r3, #24]
   b5114:	9906      	ldr	r1, [sp, #24]
   b5116:	461f      	mov	r7, r3
   b5118:	9b04      	ldr	r3, [sp, #16]
   b511a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b511c:	b212      	sxth	r2, r2
   b511e:	4651      	mov	r1, sl
   b5120:	4658      	mov	r0, fp
   b5122:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5124:	f109 0301 	add.w	r3, r9, #1
   b5128:	fa4f f983 	sxtb.w	r9, r3
   b512c:	9b07      	ldr	r3, [sp, #28]
   b512e:	085b      	lsrs	r3, r3, #1
   b5130:	9307      	str	r3, [sp, #28]
   b5132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5134:	3b01      	subs	r3, #1
   b5136:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b513a:	930a      	str	r3, [sp, #40]	; 0x28
   b513c:	d1de      	bne.n	b50fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b513e:	9f05      	ldr	r7, [sp, #20]
   b5140:	3701      	adds	r7, #1
   b5142:	b27b      	sxtb	r3, r7
   b5144:	9305      	str	r3, [sp, #20]
   b5146:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5148:	3b01      	subs	r3, #1
   b514a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b514e:	9309      	str	r3, [sp, #36]	; 0x24
   b5150:	d1b9      	bne.n	b50c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5152:	9b04      	ldr	r3, [sp, #16]
   b5154:	4543      	cmp	r3, r8
   b5156:	d00f      	beq.n	b5178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5158:	2d01      	cmp	r5, #1
   b515a:	f8db 3000 	ldr.w	r3, [fp]
   b515e:	d13b      	bne.n	b51d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5160:	2c01      	cmp	r4, #1
   b5162:	d139      	bne.n	b51d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5164:	9908      	ldr	r1, [sp, #32]
   b5166:	f8cd 8000 	str.w	r8, [sp]
   b516a:	3105      	adds	r1, #5
   b516c:	6a1c      	ldr	r4, [r3, #32]
   b516e:	4632      	mov	r2, r6
   b5170:	2308      	movs	r3, #8
   b5172:	b209      	sxth	r1, r1
   b5174:	4658      	mov	r0, fp
   b5176:	47a0      	blx	r4
        endWrite();
   b5178:	f8db 3000 	ldr.w	r3, [fp]
   b517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b517e:	4658      	mov	r0, fp
}
   b5180:	b011      	add	sp, #68	; 0x44
   b5182:	ecbd 8b02 	vpop	{d8}
   b5186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b518a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b518c:	9906      	ldr	r1, [sp, #24]
   b518e:	fb14 f202 	smulbb	r2, r4, r2
   b5192:	440a      	add	r2, r1
   b5194:	9904      	ldr	r1, [sp, #16]
   b5196:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5198:	9400      	str	r4, [sp, #0]
   b519a:	69db      	ldr	r3, [r3, #28]
   b519c:	ee18 1a10 	vmov	r1, s16
   b51a0:	461f      	mov	r7, r3
   b51a2:	b212      	sxth	r2, r2
   b51a4:	462b      	mov	r3, r5
   b51a6:	4658      	mov	r0, fp
   b51a8:	47b8      	blx	r7
   b51aa:	e7bb      	b.n	b5124 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b51ac:	9a04      	ldr	r2, [sp, #16]
   b51ae:	4542      	cmp	r2, r8
   b51b0:	d0b8      	beq.n	b5124 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b51b2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b51b4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b51b8:	d107      	bne.n	b51ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b51ba:	2c01      	cmp	r4, #1
   b51bc:	d105      	bne.n	b51ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b51be:	699b      	ldr	r3, [r3, #24]
   b51c0:	9906      	ldr	r1, [sp, #24]
   b51c2:	461f      	mov	r7, r3
   b51c4:	440a      	add	r2, r1
   b51c6:	4643      	mov	r3, r8
   b51c8:	e7a8      	b.n	b511c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51ca:	9906      	ldr	r1, [sp, #24]
   b51cc:	f8cd 8004 	str.w	r8, [sp, #4]
   b51d0:	fb14 f202 	smulbb	r2, r4, r2
   b51d4:	440a      	add	r2, r1
   b51d6:	e7df      	b.n	b5198 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b51d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b51da:	f8cd 8004 	str.w	r8, [sp, #4]
   b51de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b51e2:	9a08      	ldr	r2, [sp, #32]
   b51e4:	00e4      	lsls	r4, r4, #3
   b51e6:	440a      	add	r2, r1
   b51e8:	4611      	mov	r1, r2
   b51ea:	9400      	str	r4, [sp, #0]
   b51ec:	69dc      	ldr	r4, [r3, #28]
   b51ee:	4632      	mov	r2, r6
   b51f0:	462b      	mov	r3, r5
   b51f2:	b209      	sxth	r1, r1
   b51f4:	4658      	mov	r0, fp
   b51f6:	47a0      	blx	r4
        endWrite();
   b51f8:	e7be      	b.n	b5178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b51fa:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b51fc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b51fe:	6812      	ldr	r2, [r2, #0]
   b5200:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5202:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5204:	b2ff      	uxtb	r7, r7
   b5206:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b520a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b520e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5210:	789a      	ldrb	r2, [r3, #2]
   b5212:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5214:	78da      	ldrb	r2, [r3, #3]
   b5216:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5218:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b521a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b521e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5222:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5224:	d801      	bhi.n	b522a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5226:	2c01      	cmp	r4, #1
   b5228:	d957      	bls.n	b52da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b522a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b522e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5230:	fa0f f38a 	sxth.w	r3, sl
   b5234:	9307      	str	r3, [sp, #28]
        startWrite();
   b5236:	f8db 3000 	ldr.w	r3, [fp]
   b523a:	4658      	mov	r0, fp
   b523c:	695b      	ldr	r3, [r3, #20]
   b523e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5240:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5242:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5246:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5248:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b524c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b524e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5250:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5254:	429f      	cmp	r7, r3
   b5256:	d28f      	bcs.n	b5178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5258:	9b07      	ldr	r3, [sp, #28]
   b525a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b525c:	443b      	add	r3, r7
   b525e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5262:	2200      	movs	r2, #0
   b5264:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5268:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b526a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b526e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5272:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5276:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5278:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b527a:	9905      	ldr	r1, [sp, #20]
   b527c:	4291      	cmp	r1, r2
   b527e:	d241      	bcs.n	b5304 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5280:	1c5a      	adds	r2, r3, #1
   b5282:	b2d2      	uxtb	r2, r2
   b5284:	075b      	lsls	r3, r3, #29
   b5286:	920d      	str	r2, [sp, #52]	; 0x34
   b5288:	d107      	bne.n	b529a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b528a:	9b06      	ldr	r3, [sp, #24]
   b528c:	9906      	ldr	r1, [sp, #24]
   b528e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5290:	3301      	adds	r3, #1
   b5292:	b29b      	uxth	r3, r3
   b5294:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5298:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b529a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b529e:	d012      	beq.n	b52c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b52a0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52a2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b52aa:	d11a      	bne.n	b52e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b52ac:	2c01      	cmp	r4, #1
   b52ae:	d118      	bne.n	b52e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b52b2:	699b      	ldr	r3, [r3, #24]
   b52b4:	4411      	add	r1, r2
   b52b6:	9a05      	ldr	r2, [sp, #20]
   b52b8:	4411      	add	r1, r2
   b52ba:	461e      	mov	r6, r3
   b52bc:	4652      	mov	r2, sl
   b52be:	9b04      	ldr	r3, [sp, #16]
   b52c0:	b209      	sxth	r1, r1
   b52c2:	4658      	mov	r0, fp
   b52c4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b52c6:	9e05      	ldr	r6, [sp, #20]
   b52c8:	3601      	adds	r6, #1
   b52ca:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b52cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b52d0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b52d2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b52d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b52d8:	e7ce      	b.n	b5278 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b52da:	2300      	movs	r3, #0
   b52dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b52e0:	e7a9      	b.n	b5236 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52e2:	9805      	ldr	r0, [sp, #20]
   b52e4:	9a08      	ldr	r2, [sp, #32]
   b52e6:	4402      	add	r2, r0
   b52e8:	fb02 1105 	mla	r1, r2, r5, r1
   b52ec:	9a04      	ldr	r2, [sp, #16]
   b52ee:	e9cd 4200 	strd	r4, r2, [sp]
   b52f2:	69db      	ldr	r3, [r3, #28]
   b52f4:	ee18 2a10 	vmov	r2, s16
   b52f8:	461e      	mov	r6, r3
   b52fa:	b209      	sxth	r1, r1
   b52fc:	462b      	mov	r3, r5
   b52fe:	4658      	mov	r0, fp
   b5300:	47b0      	blx	r6
   b5302:	e7e0      	b.n	b52c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5304:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5306:	3701      	adds	r7, #1
   b5308:	4498      	add	r8, r3
   b530a:	fa5f f888 	uxtb.w	r8, r8
   b530e:	b2ff      	uxtb	r7, r7
   b5310:	e79f      	b.n	b5252 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5312:	b011      	add	sp, #68	; 0x44
   b5314:	ecbd 8b02 	vpop	{d8}
   b5318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b531c:	000b7c9c 	.word	0x000b7c9c

000b5320 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5320:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5322:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5324:	b085      	sub	sp, #20
   b5326:	4604      	mov	r4, r0
   b5328:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b532a:	2a00      	cmp	r2, #0
   b532c:	d134      	bne.n	b5398 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b532e:	290a      	cmp	r1, #10
   b5330:	d108      	bne.n	b5344 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5332:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5334:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5336:	7e42      	ldrb	r2, [r0, #25]
   b5338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b533c:	8263      	strh	r3, [r4, #18]
}
   b533e:	2001      	movs	r0, #1
   b5340:	b005      	add	sp, #20
   b5342:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5344:	290d      	cmp	r1, #13
   b5346:	d0fa      	beq.n	b533e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5348:	7ee1      	ldrb	r1, [r4, #27]
   b534a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b534c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b534e:	b171      	cbz	r1, b536e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5350:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5354:	2106      	movs	r1, #6
   b5356:	fb11 6100 	smlabb	r1, r1, r0, r6
   b535a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b535e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5360:	bfc1      	itttt	gt
   b5362:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5366:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5368:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b536c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b536e:	8ae2      	ldrh	r2, [r4, #22]
   b5370:	9201      	str	r2, [sp, #4]
   b5372:	8aa2      	ldrh	r2, [r4, #20]
   b5374:	9200      	str	r2, [sp, #0]
   b5376:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b537a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b537e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5382:	4620      	mov	r0, r4
   b5384:	f7ff fe5e 	bl	b5044 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5388:	7e23      	ldrb	r3, [r4, #24]
   b538a:	8a22      	ldrh	r2, [r4, #16]
   b538c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5390:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5394:	8223      	strh	r3, [r4, #16]
   b5396:	e7d2      	b.n	b533e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5398:	290a      	cmp	r1, #10
   b539a:	d107      	bne.n	b53ac <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b539c:	2300      	movs	r3, #0
   b539e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b53a0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b53a2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b53a4:	8a43      	ldrh	r3, [r0, #18]
   b53a6:	fb01 3302 	mla	r3, r1, r2, r3
   b53aa:	e7c7      	b.n	b533c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b53ac:	290d      	cmp	r1, #13
   b53ae:	d0c6      	beq.n	b533e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b53b0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b53b2:	42a9      	cmp	r1, r5
   b53b4:	d3c3      	bcc.n	b533e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b53b6:	7a51      	ldrb	r1, [r2, #9]
   b53b8:	4299      	cmp	r1, r3
   b53ba:	d3c0      	bcc.n	b533e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b53bc:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b53be:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b53c0:	b2ed      	uxtb	r5, r5
   b53c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b53c6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b53c8:	b328      	cbz	r0, b5416 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b53ca:	78e9      	ldrb	r1, [r5, #3]
   b53cc:	b319      	cbz	r1, b5416 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b53ce:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b53d0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b53d2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b53d4:	b191      	cbz	r1, b53fc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b53d6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b53da:	4408      	add	r0, r1
   b53dc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b53e0:	fb06 1100 	mla	r1, r6, r0, r1
   b53e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b53e8:	4281      	cmp	r1, r0
   b53ea:	dd07      	ble.n	b53fc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b53ec:	2000      	movs	r0, #0
   b53ee:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b53f0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b53f4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b53f6:	fb02 1207 	mla	r2, r2, r7, r1
   b53fa:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b53fc:	8ae2      	ldrh	r2, [r4, #22]
   b53fe:	9201      	str	r2, [sp, #4]
   b5400:	8aa2      	ldrh	r2, [r4, #20]
   b5402:	9200      	str	r2, [sp, #0]
   b5404:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5408:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b540c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5410:	4620      	mov	r0, r4
   b5412:	f7ff fe17 	bl	b5044 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5416:	7929      	ldrb	r1, [r5, #4]
   b5418:	7e22      	ldrb	r2, [r4, #24]
   b541a:	8a23      	ldrh	r3, [r4, #16]
   b541c:	fb01 3302 	mla	r3, r1, r2, r3
   b5420:	e7b8      	b.n	b5394 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5422 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5422:	2901      	cmp	r1, #1
   b5424:	bf38      	it	cc
   b5426:	2101      	movcc	r1, #1
   b5428:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b542a:	7641      	strb	r1, [r0, #25]
}
   b542c:	4770      	bx	lr

000b542e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b542e:	4770      	bx	lr

000b5430 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5430:	b510      	push	{r4, lr}
  }
   b5432:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5434:	4604      	mov	r4, r0
  }
   b5436:	f7fe fe44 	bl	b40c2 <_ZdlPvj>
   b543a:	4620      	mov	r0, r4
   b543c:	bd10      	pop	{r4, pc}

000b543e <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b543e:	b40e      	push	{r1, r2, r3}
   b5440:	b503      	push	{r0, r1, lr}
   b5442:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5444:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5446:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b544a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b544c:	f001 fabf 	bl	b69ce <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5450:	b002      	add	sp, #8
   b5452:	f85d eb04 	ldr.w	lr, [sp], #4
   b5456:	b003      	add	sp, #12
   b5458:	4770      	bx	lr
	...

000b545c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b545c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b545e:	4604      	mov	r4, r0
   b5460:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5462:	7922      	ldrb	r2, [r4, #4]
   b5464:	68a3      	ldr	r3, [r4, #8]
   b5466:	b132      	cbz	r2, b5476 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5468:	b9a3      	cbnz	r3, b5494 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b546a:	490b      	ldr	r1, [pc, #44]	; (b5498 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b546c:	b002      	add	sp, #8
   b546e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5472:	f001 ba71 	b.w	b6958 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5476:	4a09      	ldr	r2, [pc, #36]	; (b549c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5478:	7b26      	ldrb	r6, [r4, #12]
   b547a:	4d09      	ldr	r5, [pc, #36]	; (b54a0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b547c:	4909      	ldr	r1, [pc, #36]	; (b54a4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b547e:	7b64      	ldrb	r4, [r4, #13]
   b5480:	2e01      	cmp	r6, #1
   b5482:	bf18      	it	ne
   b5484:	4629      	movne	r1, r5
   b5486:	e9cd 1400 	strd	r1, r4, [sp]
   b548a:	4907      	ldr	r1, [pc, #28]	; (b54a8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b548c:	f7ff ffd7 	bl	b543e <_ZN5Print6printfEPKcz>
  }
   b5490:	b002      	add	sp, #8
   b5492:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5494:	4a05      	ldr	r2, [pc, #20]	; (b54ac <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5496:	e7ef      	b.n	b5478 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5498:	000b8205 	.word	0x000b8205
   b549c:	000b7c76 	.word	0x000b7c76
   b54a0:	000b8201 	.word	0x000b8201
   b54a4:	000b81fd 	.word	0x000b81fd
   b54a8:	000b821b 	.word	0x000b821b
   b54ac:	000b81f4 	.word	0x000b81f4

000b54b0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b54b0:	b510      	push	{r4, lr}
   b54b2:	4b04      	ldr	r3, [pc, #16]	; (b54c4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b54b4:	6003      	str	r3, [r0, #0]
   b54b6:	4604      	mov	r4, r0
  if(buffer) {
   b54b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b54ba:	b108      	cbz	r0, b54c0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b54bc:	f001 f800 	bl	b64c0 <free>
    buffer = NULL;
  }
}
   b54c0:	4620      	mov	r0, r4
   b54c2:	bd10      	pop	{r4, pc}
   b54c4:	000b86f4 	.word	0x000b86f4

000b54c8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b54c8:	b510      	push	{r4, lr}
   b54ca:	4604      	mov	r4, r0
}
   b54cc:	f7ff fff0 	bl	b54b0 <_ZN16Adafruit_SSD1306D1Ev>
   b54d0:	4620      	mov	r0, r4
   b54d2:	2150      	movs	r1, #80	; 0x50
   b54d4:	f7fe fdf5 	bl	b40c2 <_ZdlPvj>
   b54d8:	4620      	mov	r0, r4
   b54da:	bd10      	pop	{r4, pc}

000b54dc <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b54dc:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b54de:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b54e0:	db4b      	blt.n	b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54e2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b54e6:	428c      	cmp	r4, r1
   b54e8:	dd47      	ble.n	b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54ea:	2a00      	cmp	r2, #0
   b54ec:	db45      	blt.n	b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54ee:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b54f2:	4294      	cmp	r4, r2
   b54f4:	dd41      	ble.n	b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b54f6:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b54f8:	2c02      	cmp	r4, #2
   b54fa:	d01f      	beq.n	b553c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b54fc:	2c03      	cmp	r4, #3
   b54fe:	d026      	beq.n	b554e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5500:	2c01      	cmp	r4, #1
   b5502:	d104      	bne.n	b550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5504:	8904      	ldrh	r4, [r0, #8]
   b5506:	43d2      	mvns	r2, r2
   b5508:	4414      	add	r4, r2
      break;
   b550a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b550c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b550e:	2b01      	cmp	r3, #1
   b5510:	d023      	beq.n	b555a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5512:	2b02      	cmp	r3, #2
   b5514:	d032      	beq.n	b557c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5516:	bb83      	cbnz	r3, b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5518:	2a00      	cmp	r2, #0
   b551a:	4613      	mov	r3, r2
   b551c:	8904      	ldrh	r4, [r0, #8]
   b551e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5520:	bfb8      	it	lt
   b5522:	1dd3      	addlt	r3, r2, #7
   b5524:	10db      	asrs	r3, r3, #3
   b5526:	fb13 1104 	smlabb	r1, r3, r4, r1
   b552a:	f002 0207 	and.w	r2, r2, #7
   b552e:	2301      	movs	r3, #1
   b5530:	4093      	lsls	r3, r2
   b5532:	5c42      	ldrb	r2, [r0, r1]
   b5534:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5538:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b553a:	e01e      	b.n	b557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b553c:	8904      	ldrh	r4, [r0, #8]
   b553e:	3c01      	subs	r4, #1
   b5540:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5542:	8944      	ldrh	r4, [r0, #10]
   b5544:	43d2      	mvns	r2, r2
   b5546:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5548:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b554a:	b212      	sxth	r2, r2
      break;
   b554c:	e7df      	b.n	b550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b554e:	8944      	ldrh	r4, [r0, #10]
   b5550:	3c01      	subs	r4, #1
   b5552:	1a64      	subs	r4, r4, r1
      break;
   b5554:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5556:	b222      	sxth	r2, r4
      break;
   b5558:	e7d9      	b.n	b550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b555a:	2a00      	cmp	r2, #0
   b555c:	8904      	ldrh	r4, [r0, #8]
   b555e:	4613      	mov	r3, r2
   b5560:	bfb8      	it	lt
   b5562:	1dd3      	addlt	r3, r2, #7
   b5564:	10db      	asrs	r3, r3, #3
   b5566:	fb13 1104 	smlabb	r1, r3, r4, r1
   b556a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b556c:	f002 0007 	and.w	r0, r2, #7
   b5570:	2201      	movs	r2, #1
   b5572:	4082      	lsls	r2, r0
   b5574:	5c58      	ldrb	r0, [r3, r1]
   b5576:	4302      	orrs	r2, r0
   b5578:	545a      	strb	r2, [r3, r1]
}
   b557a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b557c:	2a00      	cmp	r2, #0
   b557e:	4613      	mov	r3, r2
   b5580:	8904      	ldrh	r4, [r0, #8]
   b5582:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5584:	bfb8      	it	lt
   b5586:	1dd3      	addlt	r3, r2, #7
   b5588:	10db      	asrs	r3, r3, #3
   b558a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b558e:	f002 0207 	and.w	r2, r2, #7
   b5592:	2301      	movs	r3, #1
   b5594:	fa03 f202 	lsl.w	r2, r3, r2
   b5598:	5c43      	ldrb	r3, [r0, r1]
   b559a:	405a      	eors	r2, r3
   b559c:	e7cc      	b.n	b5538 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b55a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b55a0:	b570      	push	{r4, r5, r6, lr}
   b55a2:	4604      	mov	r4, r0
   b55a4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b55a6:	2600      	movs	r6, #0
   b55a8:	f7ff fce2 	bl	b4f70 <_ZN12Adafruit_GFXC1Ess>
   b55ac:	4b11      	ldr	r3, [pc, #68]	; (b55f4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b55ae:	6023      	str	r3, [r4, #0]
   b55b0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b55b2:	b915      	cbnz	r5, b55ba <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b55b4:	f002 f8ce 	bl	b7754 <_Z19__fetch_global_Wirev>
   b55b8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b55ba:	23ff      	movs	r3, #255	; 0xff
   b55bc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b55c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b55c4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b55c8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b55cc:	4b0a      	ldr	r3, [pc, #40]	; (b55f8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b55ce:	63a3      	str	r3, [r4, #56]	; 0x38
   b55d0:	2301      	movs	r3, #1
   b55d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b55d6:	9b05      	ldr	r3, [sp, #20]
   b55d8:	64a3      	str	r3, [r4, #72]	; 0x48
   b55da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b55de:	9b06      	ldr	r3, [sp, #24]
   b55e0:	86a2      	strh	r2, [r4, #52]	; 0x34
   b55e2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b55e6:	6426      	str	r6, [r4, #64]	; 0x40
   b55e8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b55ec:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b55ee:	4620      	mov	r0, r4
   b55f0:	bd70      	pop	{r4, r5, r6, pc}
   b55f2:	bf00      	nop
   b55f4:	000b86f4 	.word	0x000b86f4
   b55f8:	000b8240 	.word	0x000b8240

000b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b55fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55fe:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5600:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5602:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5604:	b190      	cbz	r0, b562c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5606:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b560a:	f001 f82b 	bl	b6664 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b560e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5610:	6803      	ldr	r3, [r0, #0]
   b5612:	2100      	movs	r1, #0
   b5614:	689b      	ldr	r3, [r3, #8]
   b5616:	4798      	blx	r3
    WIRE_WRITE(c);
   b5618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b561a:	6803      	ldr	r3, [r0, #0]
   b561c:	4629      	mov	r1, r5
   b561e:	689b      	ldr	r3, [r3, #8]
   b5620:	4798      	blx	r3
    wire->endTransmission();
   b5622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5628:	f001 b823 	b.w	b6672 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b562c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5630:	4601      	mov	r1, r0
   b5632:	b298      	uxth	r0, r3
   b5634:	f002 f847 	bl	b76c6 <digitalWrite>
  if(spi) {
   b5638:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b563a:	b120      	cbz	r0, b5646 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b563c:	4629      	mov	r1, r5
}
   b563e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5642:	f001 baa7 	b.w	b6b94 <_ZN8SPIClass8transferEh>
   b5646:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5648:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b564a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b564e:	ea05 0107 	and.w	r1, r5, r7
   b5652:	b280      	uxth	r0, r0
   b5654:	f002 f837 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5658:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b565c:	2101      	movs	r1, #1
   b565e:	b280      	uxth	r0, r0
   b5660:	f002 f831 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5664:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5668:	2100      	movs	r1, #0
   b566a:	b280      	uxth	r0, r0
   b566c:	f002 f82b 	bl	b76c6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5670:	3e01      	subs	r6, #1
   b5672:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5676:	d1e8      	bne.n	b564a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b567a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b567a:	b538      	push	{r3, r4, r5, lr}
   b567c:	4604      	mov	r4, r0
  TRANSACTION_START
   b567e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5680:	460d      	mov	r5, r1
  TRANSACTION_START
   b5682:	b180      	cbz	r0, b56a6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5684:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5686:	f000 ffdf 	bl	b6648 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b568a:	2d00      	cmp	r5, #0
   b568c:	4620      	mov	r0, r4
   b568e:	bf14      	ite	ne
   b5690:	21a7      	movne	r1, #167	; 0xa7
   b5692:	21a6      	moveq	r1, #166	; 0xa6
   b5694:	f7ff ffb2 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b569a:	b188      	cbz	r0, b56c0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b569c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b569e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b56a2:	f000 bfd1 	b.w	b6648 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b56a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56a8:	b118      	cbz	r0, b56b2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b56aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b56ae:	f001 fa03 	bl	b6ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b56b2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b56b6:	2100      	movs	r1, #0
   b56b8:	b280      	uxth	r0, r0
   b56ba:	f002 f804 	bl	b76c6 <digitalWrite>
   b56be:	e7e4      	b.n	b568a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b56c0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b56c4:	2101      	movs	r1, #1
   b56c6:	b280      	uxth	r0, r0
   b56c8:	f001 fffd 	bl	b76c6 <digitalWrite>
   b56cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56ce:	b118      	cbz	r0, b56d8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b56d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b56d4:	f001 b9d6 	b.w	b6a84 <_ZN8SPIClass14endTransactionEv>
}
   b56d8:	bd38      	pop	{r3, r4, r5, pc}

000b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b56da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b56de:	4604      	mov	r4, r0
  if(wire) { // I2C
   b56e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b56e2:	460d      	mov	r5, r1
  if(wire) { // I2C
   b56e4:	188f      	adds	r7, r1, r2
   b56e6:	b340      	cbz	r0, b573a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b56e8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b56ec:	f000 ffba 	bl	b6664 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b56f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b56f2:	6803      	ldr	r3, [r0, #0]
   b56f4:	2100      	movs	r1, #0
   b56f6:	689b      	ldr	r3, [r3, #8]
   b56f8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b56fa:	2601      	movs	r6, #1
    while(n--) {
   b56fc:	42af      	cmp	r7, r5
        wire->endTransmission();
   b56fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5700:	d017      	beq.n	b5732 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5702:	2e1f      	cmp	r6, #31
   b5704:	d90c      	bls.n	b5720 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5706:	f000 ffb4 	bl	b6672 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b570a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b570e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5710:	f000 ffa8 	bl	b6664 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5716:	6803      	ldr	r3, [r0, #0]
   b5718:	2100      	movs	r1, #0
   b571a:	689b      	ldr	r3, [r3, #8]
   b571c:	4798      	blx	r3
        bytesOut = 1;
   b571e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5720:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5722:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5726:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5728:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b572a:	689b      	ldr	r3, [r3, #8]
   b572c:	4798      	blx	r3
      bytesOut++;
   b572e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5730:	e7e4      	b.n	b56fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5732:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5736:	f000 bf9c 	b.w	b6672 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b573a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b573e:	4601      	mov	r1, r0
   b5740:	b298      	uxth	r0, r3
   b5742:	f001 ffc0 	bl	b76c6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5746:	42bd      	cmp	r5, r7
   b5748:	d022      	beq.n	b5790 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b574a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b574c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5750:	b118      	cbz	r0, b575a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5752:	4649      	mov	r1, r9
   b5754:	f001 fa1e 	bl	b6b94 <_ZN8SPIClass8transferEh>
   b5758:	e7f5      	b.n	b5746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b575a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b575c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5760:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5764:	ea09 0108 	and.w	r1, r9, r8
   b5768:	b280      	uxth	r0, r0
   b576a:	f001 ffac 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b576e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5772:	2101      	movs	r1, #1
   b5774:	b280      	uxth	r0, r0
   b5776:	f001 ffa6 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b577a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b577e:	2100      	movs	r1, #0
   b5780:	b280      	uxth	r0, r0
   b5782:	f001 ffa0 	bl	b76c6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5786:	3e01      	subs	r6, #1
   b5788:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b578c:	d1e8      	bne.n	b5760 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b578e:	e7da      	b.n	b5746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5794 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5794:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5798:	1dda      	adds	r2, r3, #7
   b579a:	bf48      	it	mi
   b579c:	f103 020e 	addmi.w	r2, r3, #14
   b57a0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b57a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b57a6:	10d2      	asrs	r2, r2, #3
   b57a8:	435a      	muls	r2, r3
   b57aa:	2100      	movs	r1, #0
   b57ac:	f002 b95e 	b.w	b7a6c <memset>

000b57b0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b57b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b57b4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b57b8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b57bc:	4604      	mov	r4, r0
   b57be:	460f      	mov	r7, r1
   b57c0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57c2:	b1c3      	cbz	r3, b57f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b57c4:	4620      	mov	r0, r4
   b57c6:	f7ff ffe5 	bl	b5794 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b57ca:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b57ce:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b57d2:	2820      	cmp	r0, #32
   b57d4:	dc21      	bgt.n	b581a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b57d6:	2320      	movs	r3, #32
   b57d8:	2201      	movs	r2, #1
   b57da:	3820      	subs	r0, #32
   b57dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b57e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b57e4:	2373      	movs	r3, #115	; 0x73
   b57e6:	3973      	subs	r1, #115	; 0x73
   b57e8:	9300      	str	r3, [sp, #0]
   b57ea:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b57ee:	4b89      	ldr	r3, [pc, #548]	; (b5a14 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b57f0:	f340 024f 	sbfx	r2, r0, #1, #16
   b57f4:	e021      	b.n	b583a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57f6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b57fa:	1dd8      	adds	r0, r3, #7
   b57fc:	bf48      	it	mi
   b57fe:	f103 000e 	addmi.w	r0, r3, #14
   b5802:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5806:	10c0      	asrs	r0, r0, #3
   b5808:	4358      	muls	r0, r3
   b580a:	f000 fe51 	bl	b64b0 <malloc>
   b580e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5810:	2800      	cmp	r0, #0
   b5812:	d1d7      	bne.n	b57c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5814:	b004      	add	sp, #16
   b5816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b581a:	3840      	subs	r0, #64	; 0x40
   b581c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5820:	fa02 f280 	sxtah	r2, r2, r0
   b5824:	2340      	movs	r3, #64	; 0x40
   b5826:	2001      	movs	r0, #1
   b5828:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b582c:	2352      	movs	r3, #82	; 0x52
   b582e:	3952      	subs	r1, #82	; 0x52
   b5830:	9300      	str	r3, [sp, #0]
   b5832:	4b79      	ldr	r3, [pc, #484]	; (b5a18 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5834:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5838:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b583a:	4620      	mov	r0, r4
   b583c:	f341 014f 	sbfx	r1, r1, #1, #16
   b5840:	f7ff fbac 	bl	b4f9c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5844:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5846:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b584a:	2800      	cmp	r0, #0
   b584c:	d078      	beq.n	b5940 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b584e:	2d00      	cmp	r5, #0
   b5850:	d174      	bne.n	b593c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5852:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5856:	2b20      	cmp	r3, #32
   b5858:	bf0c      	ite	eq
   b585a:	253c      	moveq	r5, #60	; 0x3c
   b585c:	253d      	movne	r5, #61	; 0x3d
   b585e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5862:	f1b8 0f00 	cmp.w	r8, #0
   b5866:	d001      	beq.n	b586c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5868:	f000 fef2 	bl	b6650 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b586c:	b1fe      	cbz	r6, b58ae <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b586e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5872:	2800      	cmp	r0, #0
   b5874:	db1b      	blt.n	b58ae <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5876:	2101      	movs	r1, #1
   b5878:	b280      	uxth	r0, r0
   b587a:	f001 ff13 	bl	b76a4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b587e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5882:	2101      	movs	r1, #1
   b5884:	b280      	uxth	r0, r0
   b5886:	f001 ff1e 	bl	b76c6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b588a:	2001      	movs	r0, #1
   b588c:	f000 fe48 	bl	b6520 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5890:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5894:	2100      	movs	r1, #0
   b5896:	b280      	uxth	r0, r0
   b5898:	f001 ff15 	bl	b76c6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b589c:	200a      	movs	r0, #10
   b589e:	f000 fe3f 	bl	b6520 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b58a2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58a6:	2101      	movs	r1, #1
   b58a8:	b280      	uxth	r0, r0
   b58aa:	f001 ff0c 	bl	b76c6 <digitalWrite>
  TRANSACTION_START
   b58ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b58b0:	2800      	cmp	r0, #0
   b58b2:	d074      	beq.n	b599e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b58b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b58b6:	f000 fec7 	bl	b6648 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b58ba:	2204      	movs	r2, #4
   b58bc:	4957      	ldr	r1, [pc, #348]	; (b5a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b58be:	4620      	mov	r0, r4
   b58c0:	f7ff ff0b 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b58c4:	8961      	ldrh	r1, [r4, #10]
   b58c6:	3901      	subs	r1, #1
   b58c8:	b2c9      	uxtb	r1, r1
   b58ca:	4620      	mov	r0, r4
   b58cc:	f7ff fe96 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b58d0:	4953      	ldr	r1, [pc, #332]	; (b5a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b58d2:	2204      	movs	r2, #4
   b58d4:	4620      	mov	r0, r4
   b58d6:	f7ff ff00 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b58da:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b58de:	2b01      	cmp	r3, #1
   b58e0:	bf0c      	ite	eq
   b58e2:	2110      	moveq	r1, #16
   b58e4:	2114      	movne	r1, #20
   b58e6:	4620      	mov	r0, r4
   b58e8:	f7ff fe88 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b58ec:	2204      	movs	r2, #4
   b58ee:	494d      	ldr	r1, [pc, #308]	; (b5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b58f0:	4620      	mov	r0, r4
   b58f2:	f7ff fef2 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b58f6:	68a3      	ldr	r3, [r4, #8]
   b58f8:	4a4b      	ldr	r2, [pc, #300]	; (b5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b58fa:	4293      	cmp	r3, r2
   b58fc:	d15c      	bne.n	b59b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b58fe:	494b      	ldr	r1, [pc, #300]	; (b5a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5900:	2204      	movs	r2, #4
   b5902:	4620      	mov	r0, r4
   b5904:	f7ff fee9 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5908:	21d9      	movs	r1, #217	; 0xd9
   b590a:	4620      	mov	r0, r4
   b590c:	f7ff fe76 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5910:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5914:	2b01      	cmp	r3, #1
   b5916:	bf0c      	ite	eq
   b5918:	2122      	moveq	r1, #34	; 0x22
   b591a:	21f1      	movne	r1, #241	; 0xf1
   b591c:	4620      	mov	r0, r4
   b591e:	f7ff fe6d 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5922:	4620      	mov	r0, r4
   b5924:	4942      	ldr	r1, [pc, #264]	; (b5a30 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5926:	2206      	movs	r2, #6
   b5928:	f7ff fed7 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b592c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b592e:	2800      	cmp	r0, #0
   b5930:	d063      	beq.n	b59fa <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5932:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5934:	f000 fe88 	bl	b6648 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5938:	2001      	movs	r0, #1
   b593a:	e76b      	b.n	b5814 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b593c:	b26d      	sxtb	r5, r5
   b593e:	e78e      	b.n	b585e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5940:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5944:	2101      	movs	r1, #1
   b5946:	b280      	uxth	r0, r0
   b5948:	f001 feac 	bl	b76a4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b594c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5950:	2101      	movs	r1, #1
   b5952:	b280      	uxth	r0, r0
   b5954:	f001 fea6 	bl	b76a4 <pinMode>
    SSD1306_DESELECT
   b5958:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b595c:	2101      	movs	r1, #1
   b595e:	b280      	uxth	r0, r0
   b5960:	f001 feb1 	bl	b76c6 <digitalWrite>
    if(spi) { // Hardware SPI
   b5964:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5966:	b13d      	cbz	r5, b5978 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5968:	f1b8 0f00 	cmp.w	r8, #0
   b596c:	f43f af7e 	beq.w	b586c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5970:	4628      	mov	r0, r5
   b5972:	f001 f873 	bl	b6a5c <_ZN8SPIClass5beginEv>
   b5976:	e779      	b.n	b586c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5978:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b597c:	2101      	movs	r1, #1
   b597e:	b280      	uxth	r0, r0
   b5980:	f001 fe90 	bl	b76a4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5984:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5988:	2101      	movs	r1, #1
   b598a:	b280      	uxth	r0, r0
   b598c:	f001 fe8a 	bl	b76a4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5990:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5994:	4629      	mov	r1, r5
   b5996:	b280      	uxth	r0, r0
   b5998:	f001 fe95 	bl	b76c6 <digitalWrite>
   b599c:	e766      	b.n	b586c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b599e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59a0:	b118      	cbz	r0, b59aa <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b59a2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b59a6:	f001 f887 	bl	b6ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b59aa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59ae:	2100      	movs	r1, #0
   b59b0:	b280      	uxth	r0, r0
   b59b2:	f001 fe88 	bl	b76c6 <digitalWrite>
   b59b6:	e780      	b.n	b58ba <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b59b8:	4a1e      	ldr	r2, [pc, #120]	; (b5a34 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b59ba:	4293      	cmp	r3, r2
   b59bc:	d10e      	bne.n	b59dc <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b59be:	491e      	ldr	r1, [pc, #120]	; (b5a38 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b59c0:	2203      	movs	r2, #3
   b59c2:	4620      	mov	r0, r4
   b59c4:	f7ff fe89 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b59c8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b59cc:	2b01      	cmp	r3, #1
   b59ce:	bf0c      	ite	eq
   b59d0:	219f      	moveq	r1, #159	; 0x9f
   b59d2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b59d4:	4620      	mov	r0, r4
   b59d6:	f7ff fe11 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b59da:	e795      	b.n	b5908 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b59dc:	4a17      	ldr	r2, [pc, #92]	; (b5a3c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b59de:	4293      	cmp	r3, r2
   b59e0:	d192      	bne.n	b5908 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b59e2:	4917      	ldr	r1, [pc, #92]	; (b5a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b59e4:	2203      	movs	r2, #3
   b59e6:	4620      	mov	r0, r4
   b59e8:	f7ff fe77 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b59ec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b59f0:	2b01      	cmp	r3, #1
   b59f2:	bf0c      	ite	eq
   b59f4:	2110      	moveq	r1, #16
   b59f6:	21af      	movne	r1, #175	; 0xaf
   b59f8:	e7ec      	b.n	b59d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b59fa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59fe:	2101      	movs	r1, #1
   b5a00:	b280      	uxth	r0, r0
   b5a02:	f001 fe60 	bl	b76c6 <digitalWrite>
   b5a06:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a08:	2800      	cmp	r0, #0
   b5a0a:	d095      	beq.n	b5938 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a0c:	f001 f83a 	bl	b6a84 <_ZN8SPIClass14endTransactionEv>
   b5a10:	e792      	b.n	b5938 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a12:	bf00      	nop
   b5a14:	000b850c 	.word	0x000b850c
   b5a18:	000b824c 	.word	0x000b824c
   b5a1c:	000b8754 	.word	0x000b8754
   b5a20:	000b8758 	.word	0x000b8758
   b5a24:	000b875c 	.word	0x000b875c
   b5a28:	00200080 	.word	0x00200080
   b5a2c:	000b8766 	.word	0x000b8766
   b5a30:	000b8760 	.word	0x000b8760
   b5a34:	00400080 	.word	0x00400080
   b5a38:	000b876a 	.word	0x000b876a
   b5a3c:	00100060 	.word	0x00100060
   b5a40:	000b876d 	.word	0x000b876d

000b5a44 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5a44:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5a46:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5a48:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5a4c:	db3d      	blt.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5a4e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5a52:	4294      	cmp	r4, r2
   b5a54:	dd39      	ble.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5a56:	2900      	cmp	r1, #0
      w += x;
   b5a58:	bfbe      	ittt	lt
   b5a5a:	185b      	addlt	r3, r3, r1
   b5a5c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5a5e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5a60:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5a64:	18ce      	adds	r6, r1, r3
   b5a66:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5a68:	bfc4      	itt	gt
   b5a6a:	1a63      	subgt	r3, r4, r1
   b5a6c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5a6e:	2b00      	cmp	r3, #0
   b5a70:	dd2b      	ble.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5a72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5a74:	10d6      	asrs	r6, r2, #3
   b5a76:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5a7a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5a7c:	f002 0007 	and.w	r0, r2, #7
   b5a80:	2201      	movs	r2, #1
   b5a82:	4082      	lsls	r2, r0
      switch(color) {
   b5a84:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5a86:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5a88:	d016      	beq.n	b5ab8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5a8a:	2d02      	cmp	r5, #2
   b5a8c:	d00b      	beq.n	b5aa6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5a8e:	b9e5      	cbnz	r5, b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5a90:	43d2      	mvns	r2, r2
   b5a92:	b2d2      	uxtb	r2, r2
   b5a94:	440b      	add	r3, r1
   b5a96:	4299      	cmp	r1, r3
   b5a98:	d017      	beq.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5a9a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a9e:	4010      	ands	r0, r2
   b5aa0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5aa4:	e7f7      	b.n	b5a96 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5aa6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5aa8:	4299      	cmp	r1, r3
   b5aaa:	d00e      	beq.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5aac:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5ab0:	4050      	eors	r0, r2
   b5ab2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5ab6:	e7f7      	b.n	b5aa8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5ab8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5aba:	4299      	cmp	r1, r3
   b5abc:	d005      	beq.n	b5aca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5abe:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5ac2:	4310      	orrs	r0, r2
   b5ac4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5ac8:	e7f7      	b.n	b5aba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5aca:	bd70      	pop	{r4, r5, r6, pc}

000b5acc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5acc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5ace:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5ad0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5ad4:	db76      	blt.n	b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5ad6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5ada:	42b1      	cmp	r1, r6
   b5adc:	da72      	bge.n	b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5ade:	2a00      	cmp	r2, #0
      __h += __y;
   b5ae0:	bfbe      	ittt	lt
   b5ae2:	189b      	addlt	r3, r3, r2
   b5ae4:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5ae6:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5ae8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5aec:	18d7      	adds	r7, r2, r3
   b5aee:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5af0:	bfc4      	itt	gt
   b5af2:	1aa3      	subgt	r3, r4, r2
   b5af4:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5af6:	2b00      	cmp	r3, #0
   b5af8:	dd64      	ble.n	b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5afa:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5afe:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5b00:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5b04:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5b08:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b0a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5b0e:	d023      	beq.n	b5b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5b10:	f1c2 0208 	rsb	r2, r2, #8
   b5b14:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b16:	492d      	ldr	r1, [pc, #180]	; (b5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5b18:	4293      	cmp	r3, r2
   b5b1a:	bf3c      	itt	cc
   b5b1c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5b20:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b24:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5b26:	bf3c      	itt	cc
   b5b28:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5b2c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5b30:	2d01      	cmp	r5, #1
   b5b32:	d007      	beq.n	b5b44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5b34:	2d02      	cmp	r5, #2
   b5b36:	d02e      	beq.n	b5b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5b38:	b94d      	cbnz	r5, b5b4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5b3a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b3e:	ea2c 0101 	bic.w	r1, ip, r1
   b5b42:	e003      	b.n	b5b4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5b44:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b48:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5b4c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5b4e:	4293      	cmp	r3, r2
   b5b50:	d338      	bcc.n	b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5b52:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5b56:	440c      	add	r4, r1
        h -= mod;
   b5b58:	1a9a      	subs	r2, r3, r2
   b5b5a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5b5c:	2a07      	cmp	r2, #7
   b5b5e:	d90e      	bls.n	b5b7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5b60:	2d02      	cmp	r5, #2
   b5b62:	d11d      	bne.n	b5ba0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5b64:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5b66:	7821      	ldrb	r1, [r4, #0]
   b5b68:	43c9      	mvns	r1, r1
   b5b6a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5b6c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5b6e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5b72:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5b74:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5b76:	440c      	add	r4, r1
            } while(h >= 8);
   b5b78:	d8f5      	bhi.n	b5b66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5b7a:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5b7e:	b30a      	cbz	r2, b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5b80:	4b13      	ldr	r3, [pc, #76]	; (b5bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5b82:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5b84:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5b86:	d01a      	beq.n	b5bbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5b88:	2d02      	cmp	r5, #2
   b5b8a:	d01c      	beq.n	b5bc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5b8c:	b9d5      	cbnz	r5, b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5b8e:	7822      	ldrb	r2, [r4, #0]
   b5b90:	ea22 0303 	bic.w	r3, r2, r3
   b5b94:	e015      	b.n	b5bc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5b96:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b9a:	ea81 010c 	eor.w	r1, r1, ip
   b5b9e:	e7d5      	b.n	b5b4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5ba0:	1e29      	subs	r1, r5, #0
   b5ba2:	bf18      	it	ne
   b5ba4:	2101      	movne	r1, #1
   b5ba6:	4249      	negs	r1, r1
   b5ba8:	b2c9      	uxtb	r1, r1
   b5baa:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5bac:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5bae:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5bb0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5bb4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5bb6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5bb8:	4434      	add	r4, r6
            } while(h >= 8);
   b5bba:	d8f7      	bhi.n	b5bac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5bbc:	e7dd      	b.n	b5b7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5bbe:	7822      	ldrb	r2, [r4, #0]
   b5bc0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5bc2:	7023      	strb	r3, [r4, #0]
}
   b5bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5bc6:	7822      	ldrb	r2, [r4, #0]
   b5bc8:	4053      	eors	r3, r2
   b5bca:	e7fa      	b.n	b5bc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5bcc:	000b8744 	.word	0x000b8744
   b5bd0:	000b874c 	.word	0x000b874c

000b5bd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5bd4:	b470      	push	{r4, r5, r6}
   b5bd6:	4614      	mov	r4, r2
  switch(rotation) {
   b5bd8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5bda:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5bde:	2a02      	cmp	r2, #2
   b5be0:	d00d      	beq.n	b5bfe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5be2:	2a03      	cmp	r2, #3
   b5be4:	d018      	beq.n	b5c18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5be6:	2a01      	cmp	r2, #1
   b5be8:	d111      	bne.n	b5c0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5bea:	8902      	ldrh	r2, [r0, #8]
   b5bec:	43e4      	mvns	r4, r4
   b5bee:	4414      	add	r4, r2
   b5bf0:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5bf2:	9603      	str	r6, [sp, #12]
   b5bf4:	460a      	mov	r2, r1
   b5bf6:	4621      	mov	r1, r4
}
   b5bf8:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5bfa:	f7ff bf67 	b.w	b5acc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5bfe:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5c00:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5c02:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5c04:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5c06:	4414      	add	r4, r2
    x -= (w-1);
   b5c08:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5c0a:	b224      	sxth	r4, r4
    x -= (w-1);
   b5c0c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5c0e:	9603      	str	r6, [sp, #12]
   b5c10:	4622      	mov	r2, r4
}
   b5c12:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5c14:	f7ff bf16 	b.w	b5a44 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5c18:	8945      	ldrh	r5, [r0, #10]
   b5c1a:	4419      	add	r1, r3
   b5c1c:	1a69      	subs	r1, r5, r1
   b5c1e:	b209      	sxth	r1, r1
    break;
   b5c20:	e7e7      	b.n	b5bf2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5c22 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5c22:	b430      	push	{r4, r5}
   b5c24:	4614      	mov	r4, r2
  switch(rotation) {
   b5c26:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5c28:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5c2c:	2a02      	cmp	r2, #2
   b5c2e:	d00d      	beq.n	b5c4c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5c30:	2a03      	cmp	r2, #3
   b5c32:	d018      	beq.n	b5c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5c34:	2a01      	cmp	r2, #1
   b5c36:	d111      	bne.n	b5c5c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5c38:	18e2      	adds	r2, r4, r3
   b5c3a:	8904      	ldrh	r4, [r0, #8]
   b5c3c:	1aa4      	subs	r4, r4, r2
   b5c3e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5c40:	9502      	str	r5, [sp, #8]
   b5c42:	460a      	mov	r2, r1
   b5c44:	4621      	mov	r1, r4
}
   b5c46:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5c48:	f7ff befc 	b.w	b5a44 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5c4c:	8902      	ldrh	r2, [r0, #8]
   b5c4e:	43c9      	mvns	r1, r1
   b5c50:	4411      	add	r1, r2
    y -= (h-1);
   b5c52:	18e2      	adds	r2, r4, r3
   b5c54:	8944      	ldrh	r4, [r0, #10]
   b5c56:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5c58:	b209      	sxth	r1, r1
    y -= (h-1);
   b5c5a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5c5c:	9502      	str	r5, [sp, #8]
   b5c5e:	4622      	mov	r2, r4
}
   b5c60:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5c62:	f7ff bf33 	b.w	b5acc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5c66:	8942      	ldrh	r2, [r0, #10]
   b5c68:	43c9      	mvns	r1, r1
   b5c6a:	4411      	add	r1, r2
   b5c6c:	b209      	sxth	r1, r1
    break;
   b5c6e:	e7e7      	b.n	b5c40 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5c70 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5c74:	4604      	mov	r4, r0
  TRANSACTION_START
   b5c76:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5c78:	2800      	cmp	r0, #0
   b5c7a:	d042      	beq.n	b5d02 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5c7e:	f000 fce3 	bl	b6648 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5c82:	4947      	ldr	r1, [pc, #284]	; (b5da0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5c84:	2205      	movs	r2, #5
   b5c86:	4620      	mov	r0, r4
   b5c88:	f7ff fd27 	bl	b56da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5c8c:	8921      	ldrh	r1, [r4, #8]
   b5c8e:	3901      	subs	r1, #1
   b5c90:	4620      	mov	r0, r4
   b5c92:	b2c9      	uxtb	r1, r1
   b5c94:	f7ff fcb2 	bl	b55fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5c98:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5c9c:	1dde      	adds	r6, r3, #7
   b5c9e:	bf48      	it	mi
   b5ca0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5ca4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5ca8:	8923      	ldrh	r3, [r4, #8]
   b5caa:	10f6      	asrs	r6, r6, #3
   b5cac:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5cb0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5cb4:	2800      	cmp	r0, #0
   b5cb6:	d03a      	beq.n	b5d2e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5cb8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5cbc:	f000 fcd2 	bl	b6664 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5cc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cc2:	6803      	ldr	r3, [r0, #0]
   b5cc4:	2140      	movs	r1, #64	; 0x40
   b5cc6:	689b      	ldr	r3, [r3, #8]
   b5cc8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5cca:	2701      	movs	r7, #1
    while(count--) {
   b5ccc:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5cd0:	d024      	beq.n	b5d1c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5cd2:	2f1f      	cmp	r7, #31
   b5cd4:	d90c      	bls.n	b5cf0 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5cd6:	f000 fccc 	bl	b6672 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5cda:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5cde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ce0:	f000 fcc0 	bl	b6664 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5ce4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ce6:	6803      	ldr	r3, [r0, #0]
   b5ce8:	2140      	movs	r1, #64	; 0x40
   b5cea:	689b      	ldr	r3, [r3, #8]
   b5cec:	4798      	blx	r3
        bytesOut = 1;
   b5cee:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5cf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cf2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5cf6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5cf8:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5cfa:	689b      	ldr	r3, [r3, #8]
   b5cfc:	4798      	blx	r3
      bytesOut++;
   b5cfe:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5d00:	e7e4      	b.n	b5ccc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5d02:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d04:	b118      	cbz	r0, b5d0e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5d06:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d0a:	f000 fed5 	bl	b6ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d0e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d12:	2100      	movs	r1, #0
   b5d14:	b280      	uxth	r0, r0
   b5d16:	f001 fcd6 	bl	b76c6 <digitalWrite>
   b5d1a:	e7b2      	b.n	b5c82 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5d1c:	f000 fca9 	bl	b6672 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5d20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d22:	b378      	cbz	r0, b5d84 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5d24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5d26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d2a:	f000 bc8d 	b.w	b6648 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5d2e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5d32:	2101      	movs	r1, #1
   b5d34:	b280      	uxth	r0, r0
   b5d36:	f001 fcc6 	bl	b76c6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5d3a:	42ae      	cmp	r6, r5
   b5d3c:	d0f0      	beq.n	b5d20 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5d40:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5d44:	b118      	cbz	r0, b5d4e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5d46:	4649      	mov	r1, r9
   b5d48:	f000 ff24 	bl	b6b94 <_ZN8SPIClass8transferEh>
   b5d4c:	e7f5      	b.n	b5d3a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5d4e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5d50:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5d54:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5d58:	ea09 0108 	and.w	r1, r9, r8
   b5d5c:	b280      	uxth	r0, r0
   b5d5e:	f001 fcb2 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5d62:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d66:	2101      	movs	r1, #1
   b5d68:	b280      	uxth	r0, r0
   b5d6a:	f001 fcac 	bl	b76c6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5d6e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d72:	2100      	movs	r1, #0
   b5d74:	b280      	uxth	r0, r0
   b5d76:	f001 fca6 	bl	b76c6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5d7a:	3f01      	subs	r7, #1
   b5d7c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5d80:	d1e8      	bne.n	b5d54 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5d82:	e7da      	b.n	b5d3a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5d84:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d88:	2101      	movs	r1, #1
   b5d8a:	b280      	uxth	r0, r0
   b5d8c:	f001 fc9b 	bl	b76c6 <digitalWrite>
   b5d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d92:	b118      	cbz	r0, b5d9c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5d94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5d98:	f000 be74 	b.w	b6a84 <_ZN8SPIClass14endTransactionEv>
}
   b5d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5da0:	000b8770 	.word	0x000b8770

000b5da4 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5da4:	2100      	movs	r1, #0
   b5da6:	220a      	movs	r2, #10
   b5da8:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5dac:	4770      	bx	lr

000b5dae <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5dae:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5db0:	b510      	push	{r4, lr}
   b5db2:	4604      	mov	r4, r0
    this->pin = pin;
   b5db4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5db6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5db8:	b288      	uxth	r0, r1
   b5dba:	f001 fc9d 	bl	b76f8 <digitalRead>
   b5dbe:	b108      	cbz	r0, b5dc4 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5dc0:	2303      	movs	r3, #3
   b5dc2:	71a3      	strb	r3, [r4, #6]
   b5dc4:	f000 f928 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5dc8:	6020      	str	r0, [r4, #0]
#endif
}
   b5dca:	bd10      	pop	{r4, pc}

000b5dcc <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5dcc:	b538      	push	{r3, r4, r5, lr}
   b5dce:	460c      	mov	r4, r1
   b5dd0:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5dd2:	4611      	mov	r1, r2
   b5dd4:	b2a0      	uxth	r0, r4
   b5dd6:	f001 fc65 	bl	b76a4 <pinMode>
  
  this->attach(pin);
   b5dda:	4621      	mov	r1, r4
   b5ddc:	4628      	mov	r0, r5
}
   b5dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5de2:	f7ff bfe4 	b.w	b5dae <_ZN8Debounce6attachEi>

000b5de6 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5de6:	b538      	push	{r3, r4, r5, lr}
   b5de8:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5dea:	79c0      	ldrb	r0, [r0, #7]
   b5dec:	f001 fc84 	bl	b76f8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5df0:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5df2:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5df4:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5df8:	bf18      	it	ne
   b5dfa:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5dfc:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5e00:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5e02:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5e04:	d00a      	beq.n	b5e1c <_ZN8Debounce6updateEv+0x36>
   b5e06:	f000 f907 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5e0a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5e0c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5e0e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5e12:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5e14:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5e16:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5e1a:	bd38      	pop	{r3, r4, r5, pc}
   b5e1c:	f000 f8fc 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5e20:	6823      	ldr	r3, [r4, #0]
   b5e22:	1ac0      	subs	r0, r0, r3
   b5e24:	88a3      	ldrh	r3, [r4, #4]
   b5e26:	4298      	cmp	r0, r3
   b5e28:	d3f4      	bcc.n	b5e14 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5e2a:	79a3      	ldrb	r3, [r4, #6]
   b5e2c:	f003 0301 	and.w	r3, r3, #1
   b5e30:	42ab      	cmp	r3, r5
   b5e32:	d0ef      	beq.n	b5e14 <_ZN8Debounce6updateEv+0x2e>
   b5e34:	f000 f8f0 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5e38:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5e3a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5e3c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5e40:	f043 0308 	orr.w	r3, r3, #8
   b5e44:	e7e5      	b.n	b5e12 <_ZN8Debounce6updateEv+0x2c>

000b5e46 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b5e46:	7980      	ldrb	r0, [r0, #6]
   b5e48:	f000 0009 	and.w	r0, r0, #9
   b5e4c:	f1a0 0308 	sub.w	r3, r0, #8
   b5e50:	4258      	negs	r0, r3
   b5e52:	4158      	adcs	r0, r3
   b5e54:	4770      	bx	lr
	...

000b5e58 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5e58:	b510      	push	{r4, lr}
   b5e5a:	4b06      	ldr	r3, [pc, #24]	; (b5e74 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5e5c:	6003      	str	r3, [r0, #0]
   b5e5e:	4604      	mov	r4, r0
	if (mutex) {
   b5e60:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5e62:	b108      	cbz	r0, b5e68 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5e64:	f000 f8a8 	bl	b5fb8 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5e68:	4620      	mov	r0, r4
   b5e6a:	f7ff fb21 	bl	b54b0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5e6e:	4620      	mov	r0, r4
   b5e70:	bd10      	pop	{r4, pc}
   b5e72:	bf00      	nop
   b5e74:	000b8780 	.word	0x000b8780

000b5e78 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5e78:	b510      	push	{r4, lr}
   b5e7a:	4604      	mov	r4, r0
}
   b5e7c:	f7ff ffec 	bl	b5e58 <_ZN16OledWingAdafruitD1Ev>
   b5e80:	4620      	mov	r0, r4
   b5e82:	2170      	movs	r1, #112	; 0x70
   b5e84:	f7fe f91d 	bl	b40c2 <_ZdlPvj>
   b5e88:	4620      	mov	r0, r4
   b5e8a:	bd10      	pop	{r4, pc}

000b5e8c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5e8c:	b530      	push	{r4, r5, lr}
   b5e8e:	b085      	sub	sp, #20
   b5e90:	4604      	mov	r4, r0
   b5e92:	460d      	mov	r5, r1
   b5e94:	f001 fc5e 	bl	b7754 <_Z19__fetch_global_Wirev>
   b5e98:	4a10      	ldr	r2, [pc, #64]	; (b5edc <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5e9a:	4911      	ldr	r1, [pc, #68]	; (b5ee0 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5e9c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5ea4:	2180      	movs	r1, #128	; 0x80
   b5ea6:	4603      	mov	r3, r0
   b5ea8:	9200      	str	r2, [sp, #0]
   b5eaa:	4620      	mov	r0, r4
   b5eac:	2220      	movs	r2, #32
   b5eae:	f7ff fb77 	bl	b55a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5eb2:	4b0c      	ldr	r3, [pc, #48]	; (b5ee4 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5eb4:	6023      	str	r3, [r4, #0]
   b5eb6:	2300      	movs	r3, #0
   b5eb8:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5ebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5ec0:	f7ff ff70 	bl	b5da4 <_ZN8DebounceC1Ev>
   b5ec4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5ec8:	f7ff ff6c 	bl	b5da4 <_ZN8DebounceC1Ev>
   b5ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5ed0:	f7ff ff68 	bl	b5da4 <_ZN8DebounceC1Ev>
}
   b5ed4:	4620      	mov	r0, r4
   b5ed6:	b005      	add	sp, #20
   b5ed8:	bd30      	pop	{r4, r5, pc}
   b5eda:	bf00      	nop
   b5edc:	00061a80 	.word	0x00061a80
   b5ee0:	000186a0 	.word	0x000186a0
   b5ee4:	000b8780 	.word	0x000b8780

000b5ee8 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5ee8:	b513      	push	{r0, r1, r4, lr}
   b5eea:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5eec:	3050      	adds	r0, #80	; 0x50
   b5eee:	f000 f85b 	bl	b5fa8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5ef2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5ef4:	07d9      	lsls	r1, r3, #31
   b5ef6:	d505      	bpl.n	b5f04 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5ef8:	2202      	movs	r2, #2
   b5efa:	2104      	movs	r1, #4
   b5efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5f00:	f7ff ff64 	bl	b5dcc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5f04:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5f06:	079a      	lsls	r2, r3, #30
   b5f08:	d505      	bpl.n	b5f16 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5f0a:	2200      	movs	r2, #0
   b5f0c:	2103      	movs	r1, #3
   b5f0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5f12:	f7ff ff5b 	bl	b5dcc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5f16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5f18:	075b      	lsls	r3, r3, #29
   b5f1a:	d505      	bpl.n	b5f28 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5f1c:	2202      	movs	r2, #2
   b5f1e:	4611      	mov	r1, r2
   b5f20:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5f24:	f7ff ff52 	bl	b5dcc <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5f28:	2301      	movs	r3, #1
   b5f2a:	9300      	str	r3, [sp, #0]
   b5f2c:	223c      	movs	r2, #60	; 0x3c
   b5f2e:	2102      	movs	r1, #2
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff fc3d 	bl	b57b0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5f36:	b002      	add	sp, #8
   b5f38:	bd10      	pop	{r4, pc}

000b5f3a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5f3a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5f3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5f3e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5f40:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5f42:	d502      	bpl.n	b5f4a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5f44:	3058      	adds	r0, #88	; 0x58
   b5f46:	f7ff ff4e 	bl	b5de6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5f4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5f4c:	079a      	lsls	r2, r3, #30
   b5f4e:	d503      	bpl.n	b5f58 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5f50:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5f54:	f7ff ff47 	bl	b5de6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5f58:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5f5a:	075b      	lsls	r3, r3, #29
   b5f5c:	d505      	bpl.n	b5f6a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5f5e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5f66:	f7ff bf3e 	b.w	b5de6 <_ZN8Debounce6updateEv>
}
   b5f6a:	bd10      	pop	{r4, pc}

000b5f6c <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b5f6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b5f6e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b5f70:	f013 0001 	ands.w	r0, r3, #1
   b5f74:	d003      	beq.n	b5f7e <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b5f76:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b5f7a:	f7ff bf64 	b.w	b5e46 <_ZN8Debounce4fellEv>
}
   b5f7e:	4770      	bx	lr

000b5f80 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5f80:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b5f82:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b5f84:	f013 0002 	ands.w	r0, r3, #2
   b5f88:	d003      	beq.n	b5f92 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b5f8a:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b5f8e:	f7ff bf5a 	b.w	b5e46 <_ZN8Debounce4fellEv>
}
   b5f92:	4770      	bx	lr

000b5f94 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5f94:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b5f96:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b5f98:	f013 0004 	ands.w	r0, r3, #4
   b5f9c:	d003      	beq.n	b5fa6 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b5f9e:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b5fa2:	f7ff bf50 	b.w	b5e46 <_ZN8Debounce4fellEv>
}
   b5fa6:	4770      	bx	lr

000b5fa8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <os_mutex_create+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030248 	.word	0x00030248

000b5fb8 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <os_mutex_destroy+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030248 	.word	0x00030248

000b5fc8 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <os_mutex_lock+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030248 	.word	0x00030248

000b5fd8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <os_mutex_unlock+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030248 	.word	0x00030248

000b5fe8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <os_mutex_recursive_create+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030248 	.word	0x00030248

000b5ff8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <HAL_RNG_GetRandomNumber+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	685b      	ldr	r3, [r3, #4]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030218 	.word	0x00030218

000b6008 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <HAL_Delay_Microseconds+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	68db      	ldr	r3, [r3, #12]
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030218 	.word	0x00030218

000b6018 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	695b      	ldr	r3, [r3, #20]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030218 	.word	0x00030218

000b6028 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <hal_gpio_mode+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	689b      	ldr	r3, [r3, #8]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	0003022c 	.word	0x0003022c

000b6038 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <hal_gpio_get_mode+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	68db      	ldr	r3, [r3, #12]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	0003022c 	.word	0x0003022c

000b6048 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <hal_gpio_write+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	691b      	ldr	r3, [r3, #16]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	0003022c 	.word	0x0003022c

000b6058 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <hal_gpio_read+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	695b      	ldr	r3, [r3, #20]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	0003022c 	.word	0x0003022c

000b6068 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <hal_i2c_set_speed+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	681b      	ldr	r3, [r3, #0]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030228 	.word	0x00030228

000b6078 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <hal_i2c_begin+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	68db      	ldr	r3, [r3, #12]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	00030228 	.word	0x00030228

000b6088 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <hal_i2c_begin_transmission+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	699b      	ldr	r3, [r3, #24]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030228 	.word	0x00030228

000b6098 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <hal_i2c_end_transmission+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	69db      	ldr	r3, [r3, #28]
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030228 	.word	0x00030228

000b60a8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <hal_i2c_write+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	6a1b      	ldr	r3, [r3, #32]
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	00030228 	.word	0x00030228

000b60b8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <hal_i2c_available+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	00030228 	.word	0x00030228

000b60c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <hal_i2c_read+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	00030228 	.word	0x00030228

000b60d8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <hal_i2c_peek+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030228 	.word	0x00030228

000b60e8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <hal_i2c_flush+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030228 	.word	0x00030228

000b60f8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <hal_i2c_is_enabled+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030228 	.word	0x00030228

000b6108 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <hal_i2c_init+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030228 	.word	0x00030228

000b6118 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <if_index_to_name+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	695b      	ldr	r3, [r3, #20]
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	0003026c 	.word	0x0003026c

000b6128 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <inet_inet_ntop+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	695b      	ldr	r3, [r3, #20]
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030264 	.word	0x00030264

000b6138 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <inet_htonl+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6a1b      	ldr	r3, [r3, #32]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030264 	.word	0x00030264

000b6148 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <inet_htons+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030264 	.word	0x00030264

000b6158 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <netdb_freeaddrinfo+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	689b      	ldr	r3, [r3, #8]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030268 	.word	0x00030268

000b6168 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <netdb_getaddrinfo+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	68db      	ldr	r3, [r3, #12]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030268 	.word	0x00030268

000b6178 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <sock_setsockopt+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	699b      	ldr	r3, [r3, #24]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030238 	.word	0x00030238

000b6188 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <sock_close+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	69db      	ldr	r3, [r3, #28]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030238 	.word	0x00030238

000b6198 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <sock_connect+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	6a1b      	ldr	r3, [r3, #32]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030238 	.word	0x00030238

000b61a8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <sock_recv+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030238 	.word	0x00030238

000b61b8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <sock_send+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030238 	.word	0x00030238

000b61c8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <sock_socket+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030238 	.word	0x00030238

000b61d8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <hal_spi_begin+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	681b      	ldr	r3, [r3, #0]
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030230 	.word	0x00030230

000b61e8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <hal_spi_transfer+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	695b      	ldr	r3, [r3, #20]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030230 	.word	0x00030230

000b61f8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <hal_spi_init+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	69db      	ldr	r3, [r3, #28]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030230 	.word	0x00030230

000b6208 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <hal_spi_is_enabled+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	6a1b      	ldr	r3, [r3, #32]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030230 	.word	0x00030230

000b6218 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <hal_spi_info+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030230 	.word	0x00030230

000b6228 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <hal_spi_set_settings+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030230 	.word	0x00030230

000b6238 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <hal_spi_acquire+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030230 	.word	0x00030230

000b6248 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <hal_spi_release+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030230 	.word	0x00030230

000b6258 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <hal_usart_write+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	68db      	ldr	r3, [r3, #12]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	0003023c 	.word	0x0003023c

000b6268 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <hal_usart_available+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	691b      	ldr	r3, [r3, #16]
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	0003023c 	.word	0x0003023c

000b6278 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <hal_usart_read+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	695b      	ldr	r3, [r3, #20]
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	0003023c 	.word	0x0003023c

000b6288 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <hal_usart_peek+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	699b      	ldr	r3, [r3, #24]
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	0003023c 	.word	0x0003023c

000b6298 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <hal_usart_flush+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	69db      	ldr	r3, [r3, #28]
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	0003023c 	.word	0x0003023c

000b62a8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <hal_usart_is_enabled+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	6a1b      	ldr	r3, [r3, #32]
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	0003023c 	.word	0x0003023c

000b62b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <hal_usart_available_data_for_write+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	0003023c 	.word	0x0003023c

000b62c8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_usart_init_ex+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	0003023c 	.word	0x0003023c

000b62d8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <HAL_USB_USART_Init+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	681b      	ldr	r3, [r3, #0]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003024c 	.word	0x0003024c

000b62e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <HAL_USB_USART_Begin+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	685b      	ldr	r3, [r3, #4]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003024c 	.word	0x0003024c

000b62f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <HAL_USB_USART_Available_Data+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	691b      	ldr	r3, [r3, #16]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003024c 	.word	0x0003024c

000b6308 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	695b      	ldr	r3, [r3, #20]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003024c 	.word	0x0003024c

000b6318 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <HAL_USB_USART_Receive_Data+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	699b      	ldr	r3, [r3, #24]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003024c 	.word	0x0003024c

000b6328 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <HAL_USB_USART_Send_Data+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	69db      	ldr	r3, [r3, #28]
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	0003024c 	.word	0x0003024c

000b6338 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <HAL_USB_USART_Flush_Data+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	6a1b      	ldr	r3, [r3, #32]
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	0003024c 	.word	0x0003024c

000b6348 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <HAL_USB_USART_Is_Connected+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	0003024c 	.word	0x0003024c

000b6358 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <panic_+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	00030260 	.word	0x00030260

000b6368 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <log_message+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	00030260 	.word	0x00030260

000b6378 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <set_system_mode+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	685b      	ldr	r3, [r3, #4]
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	00030220 	.word	0x00030220

000b6388 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <system_delay_ms+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	695b      	ldr	r3, [r3, #20]
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030220 	.word	0x00030220

000b6398 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <system_thread_set_state+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030220 	.word	0x00030220

000b63a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b03      	ldr	r3, [pc, #12]	; (b63b8 <system_ctrl_set_app_request_handler+0x10>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b63b2:	9301      	str	r3, [sp, #4]
   b63b4:	bd08      	pop	{r3, pc}
   b63b6:	0000      	.short	0x0000
   b63b8:	00030220 	.word	0x00030220

000b63bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b03      	ldr	r3, [pc, #12]	; (b63cc <system_ctrl_set_result+0x10>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b63c6:	9301      	str	r3, [sp, #4]
   b63c8:	bd08      	pop	{r3, pc}
   b63ca:	0000      	.short	0x0000
   b63cc:	00030220 	.word	0x00030220

000b63d0 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <spark_deviceID+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	69db      	ldr	r3, [r3, #28]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	00030244 	.word	0x00030244

000b63e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <spark_set_random_seed_from_cloud_handler+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	00030244 	.word	0x00030244

000b63f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <network_connect+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	685b      	ldr	r3, [r3, #4]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030240 	.word	0x00030240

000b6400 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <network_connecting+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	689b      	ldr	r3, [r3, #8]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030240 	.word	0x00030240

000b6410 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <network_disconnect+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	68db      	ldr	r3, [r3, #12]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030240 	.word	0x00030240

000b6420 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <network_ready+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	691b      	ldr	r3, [r3, #16]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030240 	.word	0x00030240

000b6430 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <network_on+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	695b      	ldr	r3, [r3, #20]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030240 	.word	0x00030240

000b6440 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <network_off+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	699b      	ldr	r3, [r3, #24]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030240 	.word	0x00030240

000b6450 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <network_listen+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	69db      	ldr	r3, [r3, #28]
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030240 	.word	0x00030240

000b6460 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <network_listening+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	6a1b      	ldr	r3, [r3, #32]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030240 	.word	0x00030240

000b6470 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <network_set_listen_timeout+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030240 	.word	0x00030240

000b6480 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <network_get_listen_timeout+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030240 	.word	0x00030240

000b6490 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <network_is_on+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030240 	.word	0x00030240

000b64a0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <network_is_off+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030240 	.word	0x00030240

000b64b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <malloc+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	681b      	ldr	r3, [r3, #0]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	0003021c 	.word	0x0003021c

000b64c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <free+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	685b      	ldr	r3, [r3, #4]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	0003021c 	.word	0x0003021c

000b64d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <realloc+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	689b      	ldr	r3, [r3, #8]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	0003021c 	.word	0x0003021c

000b64e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <vsnprintf+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	0003021c 	.word	0x0003021c

000b64f0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <__errno+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	0003021c 	.word	0x0003021c

000b6500 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <__assert_func+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003021c 	.word	0x0003021c

000b6510 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <newlib_impure_ptr_callback+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003021c 	.word	0x0003021c

000b6520 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6520:	2100      	movs	r1, #0
   b6522:	f7ff bf31 	b.w	b6388 <system_delay_ms>
	...

000b6528 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6528:	4802      	ldr	r0, [pc, #8]	; (b6534 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b652a:	2300      	movs	r3, #0
   b652c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b652e:	f7ff bd5b 	b.w	b5fe8 <os_mutex_recursive_create>
   b6532:	bf00      	nop
   b6534:	2003e6c4 	.word	0x2003e6c4

000b6538 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6538:	2200      	movs	r2, #0
   b653a:	6840      	ldr	r0, [r0, #4]
   b653c:	4611      	mov	r1, r2
   b653e:	f7ff bf8f 	b.w	b6460 <network_listening>

000b6542 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6542:	2200      	movs	r2, #0
   b6544:	6840      	ldr	r0, [r0, #4]
   b6546:	4611      	mov	r1, r2
   b6548:	f7ff bf9a 	b.w	b6480 <network_get_listen_timeout>

000b654c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b654c:	6840      	ldr	r0, [r0, #4]
   b654e:	2200      	movs	r2, #0
   b6550:	f7ff bf8e 	b.w	b6470 <network_set_listen_timeout>

000b6554 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6554:	6840      	ldr	r0, [r0, #4]
   b6556:	2200      	movs	r2, #0
   b6558:	f081 0101 	eor.w	r1, r1, #1
   b655c:	f7ff bf78 	b.w	b6450 <network_listen>

000b6560 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6560:	2300      	movs	r3, #0
   b6562:	6840      	ldr	r0, [r0, #4]
   b6564:	461a      	mov	r2, r3
   b6566:	4619      	mov	r1, r3
   b6568:	f7ff bf6a 	b.w	b6440 <network_off>

000b656c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b656c:	2300      	movs	r3, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	461a      	mov	r2, r3
   b6572:	4619      	mov	r1, r3
   b6574:	f7ff bf5c 	b.w	b6430 <network_on>

000b6578 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6578:	2200      	movs	r2, #0
   b657a:	6840      	ldr	r0, [r0, #4]
   b657c:	4611      	mov	r1, r2
   b657e:	f7ff bf4f 	b.w	b6420 <network_ready>

000b6582 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6582:	2200      	movs	r2, #0
   b6584:	6840      	ldr	r0, [r0, #4]
   b6586:	4611      	mov	r1, r2
   b6588:	f7ff bf3a 	b.w	b6400 <network_connecting>

000b658c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b658c:	6840      	ldr	r0, [r0, #4]
   b658e:	2200      	movs	r2, #0
   b6590:	2102      	movs	r1, #2
   b6592:	f7ff bf3d 	b.w	b6410 <network_disconnect>

000b6596 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6596:	2300      	movs	r3, #0
   b6598:	6840      	ldr	r0, [r0, #4]
   b659a:	461a      	mov	r2, r3
   b659c:	f7ff bf28 	b.w	b63f0 <network_connect>

000b65a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b65a0:	4b02      	ldr	r3, [pc, #8]	; (b65ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b65a2:	2203      	movs	r2, #3
   b65a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b65a6:	4a02      	ldr	r2, [pc, #8]	; (b65b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b65a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b65aa:	4770      	bx	lr
   b65ac:	2003e6c8 	.word	0x2003e6c8
   b65b0:	000b87e0 	.word	0x000b87e0

000b65b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b65b4:	4770      	bx	lr

000b65b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b65b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65b8:	4606      	mov	r6, r0
   b65ba:	4615      	mov	r5, r2
   b65bc:	460c      	mov	r4, r1
   b65be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b65c0:	42bc      	cmp	r4, r7
   b65c2:	d006      	beq.n	b65d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b65c4:	6833      	ldr	r3, [r6, #0]
   b65c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b65ca:	689b      	ldr	r3, [r3, #8]
   b65cc:	4630      	mov	r0, r6
   b65ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b65d0:	e7f6      	b.n	b65c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b65d2:	4628      	mov	r0, r5
   b65d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b65d6:	7c00      	ldrb	r0, [r0, #16]
   b65d8:	2200      	movs	r2, #0
   b65da:	f7ff bd65 	b.w	b60a8 <hal_i2c_write>

000b65de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65de:	7c00      	ldrb	r0, [r0, #16]
   b65e0:	2100      	movs	r1, #0
   b65e2:	f7ff bd69 	b.w	b60b8 <hal_i2c_available>

000b65e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b65e6:	7c00      	ldrb	r0, [r0, #16]
   b65e8:	2100      	movs	r1, #0
   b65ea:	f7ff bd6d 	b.w	b60c8 <hal_i2c_read>

000b65ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b65ee:	7c00      	ldrb	r0, [r0, #16]
   b65f0:	2100      	movs	r1, #0
   b65f2:	f7ff bd71 	b.w	b60d8 <hal_i2c_peek>

000b65f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65f6:	7c00      	ldrb	r0, [r0, #16]
   b65f8:	2100      	movs	r1, #0
   b65fa:	f7ff bd75 	b.w	b60e8 <hal_i2c_flush>

000b65fe <_ZN7TwoWireD0Ev>:
   b65fe:	b510      	push	{r4, lr}
   b6600:	2114      	movs	r1, #20
   b6602:	4604      	mov	r4, r0
   b6604:	f7fd fd5d 	bl	b40c2 <_ZdlPvj>
   b6608:	4620      	mov	r0, r4
   b660a:	bd10      	pop	{r4, pc}

000b660c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b660c:	b538      	push	{r3, r4, r5, lr}
   b660e:	4604      	mov	r4, r0
   b6610:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6616:	2200      	movs	r2, #0
   b6618:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b661c:	4b09      	ldr	r3, [pc, #36]	; (b6644 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b661e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6620:	4608      	mov	r0, r1
   b6622:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6624:	4629      	mov	r1, r5
   b6626:	f7ff fd6f 	bl	b6108 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b662a:	30bf      	adds	r0, #191	; 0xbf
   b662c:	d108      	bne.n	b6640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b662e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6630:	07db      	lsls	r3, r3, #31
   b6632:	d505      	bpl.n	b6640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6634:	6868      	ldr	r0, [r5, #4]
   b6636:	f7ff ff43 	bl	b64c0 <free>
    free(conf.tx_buffer);
   b663a:	68e8      	ldr	r0, [r5, #12]
   b663c:	f7ff ff40 	bl	b64c0 <free>
}
   b6640:	4620      	mov	r0, r4
   b6642:	bd38      	pop	{r3, r4, r5, pc}
   b6644:	000b881c 	.word	0x000b881c

000b6648 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6648:	7c00      	ldrb	r0, [r0, #16]
   b664a:	2200      	movs	r2, #0
   b664c:	f7ff bd0c 	b.w	b6068 <hal_i2c_set_speed>

000b6650 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6650:	2300      	movs	r3, #0
   b6652:	7c00      	ldrb	r0, [r0, #16]
   b6654:	461a      	mov	r2, r3
   b6656:	4619      	mov	r1, r3
   b6658:	f7ff bd0e 	b.w	b6078 <hal_i2c_begin>

000b665c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b665c:	7c00      	ldrb	r0, [r0, #16]
   b665e:	2200      	movs	r2, #0
   b6660:	f7ff bd12 	b.w	b6088 <hal_i2c_begin_transmission>

000b6664 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6664:	b2c9      	uxtb	r1, r1
   b6666:	f7ff bff9 	b.w	b665c <_ZN7TwoWire17beginTransmissionEh>

000b666a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b666a:	7c00      	ldrb	r0, [r0, #16]
   b666c:	2200      	movs	r2, #0
   b666e:	f7ff bd13 	b.w	b6098 <hal_i2c_end_transmission>

000b6672 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6672:	2101      	movs	r1, #1
   b6674:	f7ff bff9 	b.w	b666a <_ZN7TwoWire15endTransmissionEh>

000b6678 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6678:	4770      	bx	lr

000b667a <_ZN9IPAddressD0Ev>:
   b667a:	b510      	push	{r4, lr}
   b667c:	2118      	movs	r1, #24
   b667e:	4604      	mov	r4, r0
   b6680:	f7fd fd1f 	bl	b40c2 <_ZdlPvj>
   b6684:	4620      	mov	r0, r4
   b6686:	bd10      	pop	{r4, pc}

000b6688 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6688:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b668a:	7d03      	ldrb	r3, [r0, #20]
   b668c:	2b06      	cmp	r3, #6
{
   b668e:	b08d      	sub	sp, #52	; 0x34
   b6690:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6692:	f100 0704 	add.w	r7, r0, #4
   b6696:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b669a:	d012      	beq.n	b66c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b669c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66a4:	220a      	movs	r2, #10
   b66a6:	4630      	mov	r0, r6
   b66a8:	f000 f973 	bl	b6992 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66b0:	d019      	beq.n	b66e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66b2:	2c00      	cmp	r4, #0
   b66b4:	d0f4      	beq.n	b66a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66b6:	212e      	movs	r1, #46	; 0x2e
   b66b8:	4630      	mov	r0, r6
   b66ba:	f000 f951 	bl	b6960 <_ZN5Print5printEc>
   b66be:	4404      	add	r4, r0
   b66c0:	e7ee      	b.n	b66a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66c2:	232f      	movs	r3, #47	; 0x2f
   b66c4:	466a      	mov	r2, sp
   b66c6:	4639      	mov	r1, r7
   b66c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b66ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66ce:	f7ff fd2b 	bl	b6128 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b66d2:	4668      	mov	r0, sp
   b66d4:	f7fd fcac 	bl	b4030 <strlen>
   b66d8:	6833      	ldr	r3, [r6, #0]
   b66da:	4602      	mov	r2, r0
   b66dc:	68db      	ldr	r3, [r3, #12]
   b66de:	4669      	mov	r1, sp
   b66e0:	4630      	mov	r0, r6
   b66e2:	4798      	blx	r3
   b66e4:	4604      	mov	r4, r0
    }
    return n;
}
   b66e6:	4620      	mov	r0, r4
   b66e8:	b00d      	add	sp, #52	; 0x34
   b66ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b66ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b66ec:	b510      	push	{r4, lr}
   b66ee:	4b05      	ldr	r3, [pc, #20]	; (b6704 <_ZN9IPAddressC1Ev+0x18>)
   b66f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b66f2:	2211      	movs	r2, #17
   b66f4:	f840 3b04 	str.w	r3, [r0], #4
   b66f8:	2100      	movs	r1, #0
   b66fa:	f001 f9b7 	bl	b7a6c <memset>
}
   b66fe:	4620      	mov	r0, r4
   b6700:	bd10      	pop	{r4, pc}
   b6702:	bf00      	nop
   b6704:	000b8844 	.word	0x000b8844

000b6708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6708:	4603      	mov	r3, r0
   b670a:	4a07      	ldr	r2, [pc, #28]	; (b6728 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b670c:	b510      	push	{r4, lr}
   b670e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6712:	f101 0210 	add.w	r2, r1, #16
   b6716:	f851 4b04 	ldr.w	r4, [r1], #4
   b671a:	f843 4b04 	str.w	r4, [r3], #4
   b671e:	4291      	cmp	r1, r2
   b6720:	d1f9      	bne.n	b6716 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6722:	780a      	ldrb	r2, [r1, #0]
   b6724:	701a      	strb	r2, [r3, #0]
}
   b6726:	bd10      	pop	{r4, pc}
   b6728:	000b8844 	.word	0x000b8844

000b672c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b672c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b672e:	2b04      	cmp	r3, #4
   b6730:	d104      	bne.n	b673c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6732:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6734:	3800      	subs	r0, #0
   b6736:	bf18      	it	ne
   b6738:	2001      	movne	r0, #1
   b673a:	4770      	bx	lr
    } else if (version() == 6) {
   b673c:	2b06      	cmp	r3, #6
   b673e:	d107      	bne.n	b6750 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6740:	6843      	ldr	r3, [r0, #4]
   b6742:	b93b      	cbnz	r3, b6754 <_ZNK9IPAddresscvbEv+0x28>
   b6744:	6883      	ldr	r3, [r0, #8]
   b6746:	b92b      	cbnz	r3, b6754 <_ZNK9IPAddresscvbEv+0x28>
   b6748:	68c3      	ldr	r3, [r0, #12]
   b674a:	b91b      	cbnz	r3, b6754 <_ZNK9IPAddresscvbEv+0x28>
   b674c:	6900      	ldr	r0, [r0, #16]
   b674e:	e7f1      	b.n	b6734 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6750:	2000      	movs	r0, #0
   b6752:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6754:	2001      	movs	r0, #1
}
   b6756:	4770      	bx	lr

000b6758 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6758:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b675a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b675e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6762:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6766:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b676a:	2304      	movs	r3, #4
   b676c:	6041      	str	r1, [r0, #4]
   b676e:	7503      	strb	r3, [r0, #20]
}
   b6770:	bd10      	pop	{r4, pc}
	...

000b6774 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6774:	b507      	push	{r0, r1, r2, lr}
   b6776:	4b06      	ldr	r3, [pc, #24]	; (b6790 <_ZN9IPAddressC1EPKh+0x1c>)
   b6778:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b677a:	78cb      	ldrb	r3, [r1, #3]
   b677c:	9300      	str	r3, [sp, #0]
   b677e:	788b      	ldrb	r3, [r1, #2]
   b6780:	784a      	ldrb	r2, [r1, #1]
   b6782:	7809      	ldrb	r1, [r1, #0]
   b6784:	f7ff ffe8 	bl	b6758 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6788:	b003      	add	sp, #12
   b678a:	f85d fb04 	ldr.w	pc, [sp], #4
   b678e:	bf00      	nop
   b6790:	000b8844 	.word	0x000b8844

000b6794 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6794:	4b01      	ldr	r3, [pc, #4]	; (b679c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6796:	4a02      	ldr	r2, [pc, #8]	; (b67a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6798:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b679a:	4770      	bx	lr
   b679c:	2003e6d0 	.word	0x2003e6d0
   b67a0:	000b8850 	.word	0x000b8850

000b67a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b67a4:	2300      	movs	r3, #0
   b67a6:	6840      	ldr	r0, [r0, #4]
   b67a8:	461a      	mov	r2, r3
   b67aa:	f7ff be21 	b.w	b63f0 <network_connect>

000b67ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b67ae:	6840      	ldr	r0, [r0, #4]
   b67b0:	2200      	movs	r2, #0
   b67b2:	2102      	movs	r1, #2
   b67b4:	f7ff be2c 	b.w	b6410 <network_disconnect>

000b67b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b67b8:	2200      	movs	r2, #0
   b67ba:	6840      	ldr	r0, [r0, #4]
   b67bc:	4611      	mov	r1, r2
   b67be:	f7ff be1f 	b.w	b6400 <network_connecting>

000b67c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67c2:	2200      	movs	r2, #0
   b67c4:	6840      	ldr	r0, [r0, #4]
   b67c6:	4611      	mov	r1, r2
   b67c8:	f7ff be2a 	b.w	b6420 <network_ready>

000b67cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67cc:	2300      	movs	r3, #0
   b67ce:	6840      	ldr	r0, [r0, #4]
   b67d0:	461a      	mov	r2, r3
   b67d2:	4619      	mov	r1, r3
   b67d4:	f7ff be2c 	b.w	b6430 <network_on>

000b67d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67d8:	2300      	movs	r3, #0
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	461a      	mov	r2, r3
   b67de:	4619      	mov	r1, r3
   b67e0:	f7ff be2e 	b.w	b6440 <network_off>

000b67e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67e4:	6840      	ldr	r0, [r0, #4]
   b67e6:	2100      	movs	r1, #0
   b67e8:	f7ff be52 	b.w	b6490 <network_is_on>

000b67ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67ec:	6840      	ldr	r0, [r0, #4]
   b67ee:	2100      	movs	r1, #0
   b67f0:	f7ff be56 	b.w	b64a0 <network_is_off>

000b67f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b67f4:	6840      	ldr	r0, [r0, #4]
   b67f6:	2200      	movs	r2, #0
   b67f8:	f081 0101 	eor.w	r1, r1, #1
   b67fc:	f7ff be28 	b.w	b6450 <network_listen>

000b6800 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6800:	6840      	ldr	r0, [r0, #4]
   b6802:	2200      	movs	r2, #0
   b6804:	f7ff be34 	b.w	b6470 <network_set_listen_timeout>

000b6808 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6808:	2200      	movs	r2, #0
   b680a:	6840      	ldr	r0, [r0, #4]
   b680c:	4611      	mov	r1, r2
   b680e:	f7ff be37 	b.w	b6480 <network_get_listen_timeout>

000b6812 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6812:	2200      	movs	r2, #0
   b6814:	6840      	ldr	r0, [r0, #4]
   b6816:	4611      	mov	r1, r2
   b6818:	f7ff be22 	b.w	b6460 <network_listening>

000b681c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b681c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6820:	b095      	sub	sp, #84	; 0x54
   b6822:	4614      	mov	r4, r2
   b6824:	460d      	mov	r5, r1
   b6826:	4607      	mov	r7, r0
    IPAddress addr;
   b6828:	f7ff ff60 	bl	b66ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b682c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b682e:	221c      	movs	r2, #28
   b6830:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6832:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6834:	f001 f91a 	bl	b7a6c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6838:	2340      	movs	r3, #64	; 0x40
   b683a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b683c:	4620      	mov	r0, r4
   b683e:	466b      	mov	r3, sp
   b6840:	aa0c      	add	r2, sp, #48	; 0x30
   b6842:	2100      	movs	r1, #0
   b6844:	f7ff fc90 	bl	b6168 <netdb_getaddrinfo>
    if (!r) {
   b6848:	4604      	mov	r4, r0
   b684a:	2800      	cmp	r0, #0
   b684c:	d14b      	bne.n	b68e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b684e:	4602      	mov	r2, r0
   b6850:	2101      	movs	r1, #1
   b6852:	6868      	ldr	r0, [r5, #4]
   b6854:	f7ff fde4 	bl	b6420 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6858:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b685a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b685c:	4622      	mov	r2, r4
   b685e:	6868      	ldr	r0, [r5, #4]
   b6860:	f7ff fdde 	bl	b6420 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6864:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6866:	4681      	mov	r9, r0
        bool ok = false;
   b6868:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b686a:	2e00      	cmp	r6, #0
   b686c:	d03b      	beq.n	b68e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b686e:	2900      	cmp	r1, #0
   b6870:	d139      	bne.n	b68e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6872:	6873      	ldr	r3, [r6, #4]
   b6874:	2b02      	cmp	r3, #2
   b6876:	d003      	beq.n	b6880 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6878:	2b0a      	cmp	r3, #10
   b687a:	d011      	beq.n	b68a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b687c:	69f6      	ldr	r6, [r6, #28]
   b687e:	e7f4      	b.n	b686a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6880:	f1b8 0f00 	cmp.w	r8, #0
   b6884:	d0fa      	beq.n	b687c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6886:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6888:	a806      	add	r0, sp, #24
   b688a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b688c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b688e:	f7ff ff71 	bl	b6774 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6894:	1d3c      	adds	r4, r7, #4
   b6896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6898:	682b      	ldr	r3, [r5, #0]
   b689a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b689c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b689e:	e7ed      	b.n	b687c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b68a0:	f1b9 0f00 	cmp.w	r9, #0
   b68a4:	d0ea      	beq.n	b687c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b68a6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b68a8:	2210      	movs	r2, #16
   b68aa:	a801      	add	r0, sp, #4
   b68ac:	f001 f8de 	bl	b7a6c <memset>
                    a.v = 6;
   b68b0:	2306      	movs	r3, #6
   b68b2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68b6:	ad01      	add	r5, sp, #4
   b68b8:	f104 0308 	add.w	r3, r4, #8
   b68bc:	3418      	adds	r4, #24
   b68be:	6818      	ldr	r0, [r3, #0]
   b68c0:	6859      	ldr	r1, [r3, #4]
   b68c2:	462a      	mov	r2, r5
   b68c4:	c203      	stmia	r2!, {r0, r1}
   b68c6:	3308      	adds	r3, #8
   b68c8:	42a3      	cmp	r3, r4
   b68ca:	4615      	mov	r5, r2
   b68cc:	d1f7      	bne.n	b68be <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68ce:	a901      	add	r1, sp, #4
   b68d0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68d2:	ad07      	add	r5, sp, #28
   b68d4:	f7ff ff18 	bl	b6708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68da:	1d3c      	adds	r4, r7, #4
   b68dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68de:	682b      	ldr	r3, [r5, #0]
   b68e0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68e2:	4649      	mov	r1, r9
   b68e4:	e7ca      	b.n	b687c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68e6:	9800      	ldr	r0, [sp, #0]
   b68e8:	f7ff fc36 	bl	b6158 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68ec:	4638      	mov	r0, r7
   b68ee:	b015      	add	sp, #84	; 0x54
   b68f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b68f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b68f4:	4b02      	ldr	r3, [pc, #8]	; (b6900 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b68f6:	4a03      	ldr	r2, [pc, #12]	; (b6904 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b68f8:	601a      	str	r2, [r3, #0]
   b68fa:	2200      	movs	r2, #0
   b68fc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b68fe:	4770      	bx	lr
   b6900:	2003e6d4 	.word	0x2003e6d4
   b6904:	000b885c 	.word	0x000b885c

000b6908 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b690a:	4606      	mov	r6, r0
   b690c:	460d      	mov	r5, r1
  size_t n = 0;
   b690e:	188f      	adds	r7, r1, r2
   b6910:	2400      	movs	r4, #0
  while (size--) {
   b6912:	42bd      	cmp	r5, r7
   b6914:	d00c      	beq.n	b6930 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6916:	6833      	ldr	r3, [r6, #0]
   b6918:	f815 1b01 	ldrb.w	r1, [r5], #1
   b691c:	689b      	ldr	r3, [r3, #8]
   b691e:	4630      	mov	r0, r6
   b6920:	4798      	blx	r3
     if (chunk>=0)
   b6922:	1e03      	subs	r3, r0, #0
   b6924:	db01      	blt.n	b692a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6926:	441c      	add	r4, r3
  while (size--) {
   b6928:	e7f3      	b.n	b6912 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b692a:	2c00      	cmp	r4, #0
   b692c:	bf08      	it	eq
   b692e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6930:	4620      	mov	r0, r4
   b6932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6934 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6934:	b513      	push	{r0, r1, r4, lr}
   b6936:	4604      	mov	r4, r0
    }
   b6938:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b693a:	b159      	cbz	r1, b6954 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b693c:	9101      	str	r1, [sp, #4]
   b693e:	f7fd fb77 	bl	b4030 <strlen>
   b6942:	6823      	ldr	r3, [r4, #0]
   b6944:	9901      	ldr	r1, [sp, #4]
   b6946:	68db      	ldr	r3, [r3, #12]
   b6948:	4602      	mov	r2, r0
   b694a:	4620      	mov	r0, r4
    }
   b694c:	b002      	add	sp, #8
   b694e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6952:	4718      	bx	r3
    }
   b6954:	b002      	add	sp, #8
   b6956:	bd10      	pop	{r4, pc}

000b6958 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6958:	b508      	push	{r3, lr}
  return write(str);
   b695a:	f7ff ffeb 	bl	b6934 <_ZN5Print5writeEPKc>
}
   b695e:	bd08      	pop	{r3, pc}

000b6960 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6960:	6803      	ldr	r3, [r0, #0]
   b6962:	689b      	ldr	r3, [r3, #8]
   b6964:	4718      	bx	r3

000b6966 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6966:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6968:	210d      	movs	r1, #13
{
   b696a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b696c:	f7ff fff8 	bl	b6960 <_ZN5Print5printEc>
  n += print('\n');
   b6970:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6972:	4604      	mov	r4, r0
  n += print('\n');
   b6974:	4628      	mov	r0, r5
   b6976:	f7ff fff3 	bl	b6960 <_ZN5Print5printEc>
  return n;
}
   b697a:	4420      	add	r0, r4
   b697c:	bd38      	pop	{r3, r4, r5, pc}

000b697e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b697e:	b538      	push	{r3, r4, r5, lr}
   b6980:	4605      	mov	r5, r0
  return write(str);
   b6982:	f7ff ffd7 	bl	b6934 <_ZN5Print5writeEPKc>
   b6986:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6988:	4628      	mov	r0, r5
   b698a:	f7ff ffec 	bl	b6966 <_ZN5Print7printlnEv>
  return n;
}
   b698e:	4420      	add	r0, r4
   b6990:	bd38      	pop	{r3, r4, r5, pc}

000b6992 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6992:	b530      	push	{r4, r5, lr}
   b6994:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6996:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6998:	2a01      	cmp	r2, #1
  *str = '\0';
   b699a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b699e:	bf98      	it	ls
   b69a0:	220a      	movls	r2, #10
   b69a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b69a4:	460d      	mov	r5, r1
   b69a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b69aa:	fb01 5312 	mls	r3, r1, r2, r5
   b69ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69b2:	2b09      	cmp	r3, #9
   b69b4:	bf94      	ite	ls
   b69b6:	3330      	addls	r3, #48	; 0x30
   b69b8:	3337      	addhi	r3, #55	; 0x37
   b69ba:	b2db      	uxtb	r3, r3
  } while(n);
   b69bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b69c2:	d9ef      	bls.n	b69a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b69c4:	4621      	mov	r1, r4
   b69c6:	f7ff ffb5 	bl	b6934 <_ZN5Print5writeEPKc>
}
   b69ca:	b00b      	add	sp, #44	; 0x2c
   b69cc:	bd30      	pop	{r4, r5, pc}

000b69ce <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b69ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69d2:	b086      	sub	sp, #24
   b69d4:	af00      	add	r7, sp, #0
   b69d6:	4605      	mov	r5, r0
   b69d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69da:	1d38      	adds	r0, r7, #4
   b69dc:	2114      	movs	r1, #20
{
   b69de:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69e0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69e2:	f7ff fd7d 	bl	b64e0 <vsnprintf>

    if (n<bufsize)
   b69e6:	2813      	cmp	r0, #19
   b69e8:	d80e      	bhi.n	b6a08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b69ea:	1d39      	adds	r1, r7, #4
   b69ec:	4628      	mov	r0, r5
   b69ee:	f7ff ffa1 	bl	b6934 <_ZN5Print5writeEPKc>
   b69f2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b69f4:	b11e      	cbz	r6, b69fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b69f6:	4628      	mov	r0, r5
   b69f8:	f7ff ffb5 	bl	b6966 <_ZN5Print7printlnEv>
   b69fc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b69fe:	4620      	mov	r0, r4
   b6a00:	3718      	adds	r7, #24
   b6a02:	46bd      	mov	sp, r7
   b6a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6a08:	f100 0308 	add.w	r3, r0, #8
   b6a0c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6a10:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6a12:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6a16:	4622      	mov	r2, r4
   b6a18:	1c41      	adds	r1, r0, #1
   b6a1a:	683b      	ldr	r3, [r7, #0]
   b6a1c:	4668      	mov	r0, sp
   b6a1e:	f7ff fd5f 	bl	b64e0 <vsnprintf>
  return write(str);
   b6a22:	4669      	mov	r1, sp
   b6a24:	4628      	mov	r0, r5
   b6a26:	f7ff ff85 	bl	b6934 <_ZN5Print5writeEPKc>
   b6a2a:	4604      	mov	r4, r0
   b6a2c:	46c5      	mov	sp, r8
   b6a2e:	e7e1      	b.n	b69f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a30 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6a30:	4b01      	ldr	r3, [pc, #4]	; (b6a38 <_GLOBAL__sub_I_RGB+0x8>)
   b6a32:	2200      	movs	r2, #0
   b6a34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a36:	4770      	bx	lr
   b6a38:	2003e6dc 	.word	0x2003e6dc

000b6a3c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6a3c:	2100      	movs	r1, #0
   b6a3e:	f7ff bc03 	b.w	b6248 <hal_spi_release>

000b6a42 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6a42:	2100      	movs	r1, #0
   b6a44:	f7ff bbf8 	b.w	b6238 <hal_spi_acquire>

000b6a48 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a48:	b510      	push	{r4, lr}
   b6a4a:	4604      	mov	r4, r0
   b6a4c:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a4e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a50:	f7ff fbd2 	bl	b61f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a54:	2300      	movs	r3, #0
   b6a56:	6063      	str	r3, [r4, #4]
}
   b6a58:	4620      	mov	r0, r4
   b6a5a:	bd10      	pop	{r4, pc}

000b6a5c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6a5c:	b513      	push	{r0, r1, r4, lr}
   b6a5e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6a60:	7800      	ldrb	r0, [r0, #0]
   b6a62:	f7ff ffee 	bl	b6a42 <_ZN8SPIClass4lockEv.isra.0>
   b6a66:	b958      	cbnz	r0, b6a80 <_ZN8SPIClass5beginEv+0x24>
   b6a68:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6a6a:	9001      	str	r0, [sp, #4]
   b6a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a70:	f7ff fbb2 	bl	b61d8 <hal_spi_begin>
        unlock();
   b6a74:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a76:	b002      	add	sp, #8
   b6a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a7c:	f7ff bfde 	b.w	b6a3c <_ZN8SPIClass6unlockEv.isra.0>
   b6a80:	b002      	add	sp, #8
   b6a82:	bd10      	pop	{r4, pc}

000b6a84 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6a84:	7800      	ldrb	r0, [r0, #0]
   b6a86:	f7ff bfd9 	b.w	b6a3c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6a8c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6a8c:	0840      	lsrs	r0, r0, #1
{
   b6a8e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a90:	6018      	str	r0, [r3, #0]
   b6a92:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a94:	6818      	ldr	r0, [r3, #0]
   b6a96:	4288      	cmp	r0, r1
   b6a98:	b2e5      	uxtb	r5, r4
   b6a9a:	d906      	bls.n	b6aaa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a9c:	3401      	adds	r4, #1
   b6a9e:	2c08      	cmp	r4, #8
   b6aa0:	d002      	beq.n	b6aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6aa2:	0840      	lsrs	r0, r0, #1
   b6aa4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6aa6:	e7f5      	b.n	b6a94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6aa8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6aaa:	4b02      	ldr	r3, [pc, #8]	; (b6ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6aac:	5d5b      	ldrb	r3, [r3, r5]
   b6aae:	7013      	strb	r3, [r2, #0]
}
   b6ab0:	bd30      	pop	{r4, r5, pc}
   b6ab2:	bf00      	nop
   b6ab4:	000b8890 	.word	0x000b8890

000b6ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6abc:	4606      	mov	r6, r0
   b6abe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6ac0:	7800      	ldrb	r0, [r0, #0]
{
   b6ac2:	460c      	mov	r4, r1
    CHECK(lock());
   b6ac4:	f7ff ffbd 	bl	b6a42 <_ZN8SPIClass4lockEv.isra.0>
   b6ac8:	2800      	cmp	r0, #0
   b6aca:	db1b      	blt.n	b6b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6acc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6ace:	2214      	movs	r2, #20
   b6ad0:	2100      	movs	r1, #0
   b6ad2:	a809      	add	r0, sp, #36	; 0x24
   b6ad4:	f000 ffca 	bl	b7a6c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ad8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6ada:	2200      	movs	r2, #0
   b6adc:	a909      	add	r1, sp, #36	; 0x24
   b6ade:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ae0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6ae4:	f7ff fb98 	bl	b6218 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6ae8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6aec:	b113      	cbz	r3, b6af4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6aee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6af2:	b155      	cbz	r5, b6b0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6af4:	2700      	movs	r7, #0
   b6af6:	46b9      	mov	r9, r7
   b6af8:	46b8      	mov	r8, r7
   b6afa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6afc:	7923      	ldrb	r3, [r4, #4]
   b6afe:	b15d      	cbz	r5, b6b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6b00:	b1c3      	cbz	r3, b6b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6b02:	2000      	movs	r0, #0
}
   b6b04:	b00f      	add	sp, #60	; 0x3c
   b6b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6b0a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6b0e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6b12:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6b16:	e7f1      	b.n	b6afc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6b18:	2b00      	cmp	r3, #0
   b6b1a:	d135      	bne.n	b6b88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6b1c:	68a3      	ldr	r3, [r4, #8]
   b6b1e:	4543      	cmp	r3, r8
   b6b20:	d108      	bne.n	b6b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6b22:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b26:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b2a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b2e:	89a3      	ldrh	r3, [r4, #12]
   b6b30:	429a      	cmp	r2, r3
   b6b32:	d0e6      	beq.n	b6b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6b34:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b36:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6b38:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6b3e:	ab04      	add	r3, sp, #16
   b6b40:	f10d 020f 	add.w	r2, sp, #15
   b6b44:	f7ff ffa2 	bl	b6a8c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6b48:	7921      	ldrb	r1, [r4, #4]
   b6b4a:	b985      	cbnz	r5, b6b6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6b4c:	b989      	cbnz	r1, b6b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b4e:	68a3      	ldr	r3, [r4, #8]
   b6b50:	4543      	cmp	r3, r8
   b6b52:	d30e      	bcc.n	b6b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6b54:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b58:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b60:	89a3      	ldrh	r3, [r4, #12]
   b6b62:	429a      	cmp	r2, r3
   b6b64:	d105      	bne.n	b6b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6b66:	9b04      	ldr	r3, [sp, #16]
   b6b68:	4543      	cmp	r3, r8
   b6b6a:	d102      	bne.n	b6b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b6c:	e7c9      	b.n	b6b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6b6e:	2900      	cmp	r1, #0
   b6b70:	d1f9      	bne.n	b6b66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6b72:	2300      	movs	r3, #0
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	7b63      	ldrb	r3, [r4, #13]
   b6b78:	9300      	str	r3, [sp, #0]
   b6b7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6b7e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6b80:	7830      	ldrb	r0, [r6, #0]
   b6b82:	f7ff fb51 	bl	b6228 <hal_spi_set_settings>
   b6b86:	e7bc      	b.n	b6b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6b88:	e9cd 5500 	strd	r5, r5, [sp]
   b6b8c:	462b      	mov	r3, r5
   b6b8e:	462a      	mov	r2, r5
   b6b90:	2101      	movs	r1, #1
   b6b92:	e7f5      	b.n	b6b80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6b94 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6b94:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6b96:	7800      	ldrb	r0, [r0, #0]
   b6b98:	f7ff fb26 	bl	b61e8 <hal_spi_transfer>
}
   b6b9c:	b2c0      	uxtb	r0, r0
   b6b9e:	bd08      	pop	{r3, pc}

000b6ba0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6ba0:	b510      	push	{r4, lr}
   b6ba2:	4604      	mov	r4, r0
{
	free(buffer);
   b6ba4:	6800      	ldr	r0, [r0, #0]
   b6ba6:	f7ff fc8b 	bl	b64c0 <free>
}
   b6baa:	4620      	mov	r0, r4
   b6bac:	bd10      	pop	{r4, pc}

000b6bae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6bae:	b510      	push	{r4, lr}
   b6bb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6bb2:	6800      	ldr	r0, [r0, #0]
   b6bb4:	b108      	cbz	r0, b6bba <_ZN6String10invalidateEv+0xc>
   b6bb6:	f7ff fc83 	bl	b64c0 <free>
	buffer = NULL;
   b6bba:	2300      	movs	r3, #0
	capacity = len = 0;
   b6bbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6bc0:	6023      	str	r3, [r4, #0]
}
   b6bc2:	bd10      	pop	{r4, pc}

000b6bc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6bc4:	b538      	push	{r3, r4, r5, lr}
   b6bc6:	4604      	mov	r4, r0
   b6bc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6bca:	6800      	ldr	r0, [r0, #0]
   b6bcc:	3101      	adds	r1, #1
   b6bce:	f7ff fc7f 	bl	b64d0 <realloc>
	if (newbuffer) {
   b6bd2:	b110      	cbz	r0, b6bda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6bd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6bd8:	2001      	movs	r0, #1
	}
	return 0;
}
   b6bda:	bd38      	pop	{r3, r4, r5, pc}

000b6bdc <_ZN6String7reserveEj>:
{
   b6bdc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6bde:	6803      	ldr	r3, [r0, #0]
{
   b6be0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6be2:	b123      	cbz	r3, b6bee <_ZN6String7reserveEj+0x12>
   b6be4:	6843      	ldr	r3, [r0, #4]
   b6be6:	428b      	cmp	r3, r1
   b6be8:	d301      	bcc.n	b6bee <_ZN6String7reserveEj+0x12>
   b6bea:	2001      	movs	r0, #1
}
   b6bec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7ff ffe8 	bl	b6bc4 <_ZN6String12changeBufferEj>
   b6bf4:	2800      	cmp	r0, #0
   b6bf6:	d0f9      	beq.n	b6bec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6bf8:	68a3      	ldr	r3, [r4, #8]
   b6bfa:	2b00      	cmp	r3, #0
   b6bfc:	d1f5      	bne.n	b6bea <_ZN6String7reserveEj+0xe>
   b6bfe:	6822      	ldr	r2, [r4, #0]
   b6c00:	7013      	strb	r3, [r2, #0]
   b6c02:	e7f2      	b.n	b6bea <_ZN6String7reserveEj+0xe>

000b6c04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6c08:	4611      	mov	r1, r2
   b6c0a:	9201      	str	r2, [sp, #4]
{
   b6c0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6c0e:	f7ff ffe5 	bl	b6bdc <_ZN6String7reserveEj>
   b6c12:	9a01      	ldr	r2, [sp, #4]
   b6c14:	b928      	cbnz	r0, b6c22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6c16:	4620      	mov	r0, r4
   b6c18:	f7ff ffc9 	bl	b6bae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	b003      	add	sp, #12
   b6c20:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6c22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c24:	4629      	mov	r1, r5
   b6c26:	6820      	ldr	r0, [r4, #0]
   b6c28:	f000 ff12 	bl	b7a50 <memcpy>
	buffer[len] = 0;
   b6c2c:	6822      	ldr	r2, [r4, #0]
   b6c2e:	68a3      	ldr	r3, [r4, #8]
   b6c30:	2100      	movs	r1, #0
   b6c32:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c34:	e7f2      	b.n	b6c1c <_ZN6String4copyEPKcj+0x18>

000b6c36 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6c36:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6c38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6c3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6c3e:	4604      	mov	r4, r0
	len = 0;
   b6c40:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6c44:	b141      	cbz	r1, b6c58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6c46:	4608      	mov	r0, r1
   b6c48:	9101      	str	r1, [sp, #4]
   b6c4a:	f7fd f9f1 	bl	b4030 <strlen>
   b6c4e:	9901      	ldr	r1, [sp, #4]
   b6c50:	4602      	mov	r2, r0
   b6c52:	4620      	mov	r0, r4
   b6c54:	f7ff ffd6 	bl	b6c04 <_ZN6String4copyEPKcj>
}
   b6c58:	4620      	mov	r0, r4
   b6c5a:	b002      	add	sp, #8
   b6c5c:	bd10      	pop	{r4, pc}

000b6c5e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6c5e:	b513      	push	{r0, r1, r4, lr}
   b6c60:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6c62:	b159      	cbz	r1, b6c7c <_ZN6StringaSEPKc+0x1e>
   b6c64:	4608      	mov	r0, r1
   b6c66:	9101      	str	r1, [sp, #4]
   b6c68:	f7fd f9e2 	bl	b4030 <strlen>
   b6c6c:	9901      	ldr	r1, [sp, #4]
   b6c6e:	4602      	mov	r2, r0
   b6c70:	4620      	mov	r0, r4
   b6c72:	f7ff ffc7 	bl	b6c04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6c76:	4620      	mov	r0, r4
   b6c78:	b002      	add	sp, #8
   b6c7a:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c7c:	f7ff ff97 	bl	b6bae <_ZN6String10invalidateEv>
   b6c80:	e7f9      	b.n	b6c76 <_ZN6StringaSEPKc+0x18>

000b6c82 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b6c82:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6c84:	6882      	ldr	r2, [r0, #8]
   b6c86:	b93a      	cbnz	r2, b6c98 <_ZNK6String6equalsEPKc+0x16>
   b6c88:	b121      	cbz	r1, b6c94 <_ZNK6String6equalsEPKc+0x12>
   b6c8a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6c8c:	fab0 f080 	clz	r0, r0
   b6c90:	0940      	lsrs	r0, r0, #5
   b6c92:	e000      	b.n	b6c96 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6c94:	2001      	movs	r0, #1
}
   b6c96:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6c98:	6800      	ldr	r0, [r0, #0]
   b6c9a:	b909      	cbnz	r1, b6ca0 <_ZNK6String6equalsEPKc+0x1e>
   b6c9c:	7800      	ldrb	r0, [r0, #0]
   b6c9e:	e7f5      	b.n	b6c8c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b6ca0:	f7fd f9bc 	bl	b401c <strcmp>
   b6ca4:	e7f2      	b.n	b6c8c <_ZNK6String6equalsEPKc+0xa>
	...

000b6ca8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6ca8:	4b05      	ldr	r3, [pc, #20]	; (b6cc0 <_GLOBAL__sub_I_System+0x18>)
   b6caa:	2202      	movs	r2, #2
   b6cac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6cae:	4b05      	ldr	r3, [pc, #20]	; (b6cc4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6cb0:	4a05      	ldr	r2, [pc, #20]	; (b6cc8 <_GLOBAL__sub_I_System+0x20>)
   b6cb2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6cb4:	2000      	movs	r0, #0
   b6cb6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6cba:	f7ff bb5d 	b.w	b6378 <set_system_mode>
   b6cbe:	bf00      	nop
   b6cc0:	2003e6f8 	.word	0x2003e6f8
   b6cc4:	2003e6ec 	.word	0x2003e6ec
   b6cc8:	ffff0000 	.word	0xffff0000

000b6ccc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6ccc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6cce:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6cd0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6cd4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6cd6:	2201      	movs	r2, #1
   b6cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6cdc:	f10d 0107 	add.w	r1, sp, #7
   b6ce0:	47a0      	blx	r4
}
   b6ce2:	b002      	add	sp, #8
   b6ce4:	bd10      	pop	{r4, pc}

000b6ce6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6ce6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6ce8:	6803      	ldr	r3, [r0, #0]
   b6cea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6cf0:	46a4      	mov	ip, r4
}
   b6cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6cf6:	4760      	bx	ip

000b6cf8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cf8:	b513      	push	{r0, r1, r4, lr}
   b6cfa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6cfc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6cfe:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6d02:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6d04:	f10d 0107 	add.w	r1, sp, #7
   b6d08:	2201      	movs	r2, #1
   b6d0a:	47a0      	blx	r4
}
   b6d0c:	b002      	add	sp, #8
   b6d0e:	bd10      	pop	{r4, pc}

000b6d10 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6d10:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6d12:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d1c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6d1e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d20:	d008      	beq.n	b6d34 <_ZN9TCPClient4readEv+0x24>
   b6d22:	6963      	ldr	r3, [r4, #20]
   b6d24:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6d28:	1c51      	adds	r1, r2, #1
   b6d2a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6d2e:	4413      	add	r3, r2
   b6d30:	7918      	ldrb	r0, [r3, #4]
}
   b6d32:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d34:	6803      	ldr	r3, [r0, #0]
   b6d36:	691b      	ldr	r3, [r3, #16]
   b6d38:	4798      	blx	r3
   b6d3a:	2800      	cmp	r0, #0
   b6d3c:	d1f1      	bne.n	b6d22 <_ZN9TCPClient4readEv+0x12>
   b6d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d42:	e7f6      	b.n	b6d32 <_ZN9TCPClient4readEv+0x22>

000b6d44 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6d44:	4770      	bx	lr

000b6d46 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6d46:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6d48:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6d4a:	43c0      	mvns	r0, r0
   b6d4c:	0fc0      	lsrs	r0, r0, #31
   b6d4e:	4770      	bx	lr

000b6d50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d50:	4770      	bx	lr
	...

000b6d54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6d54:	4b06      	ldr	r3, [pc, #24]	; (b6d70 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6d56:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6d58:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6d5a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6d5e:	d005      	beq.n	b6d6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6d60:	4608      	mov	r0, r1
   b6d62:	f000 fd5d 	bl	b7820 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6d66:	2800      	cmp	r0, #0
   b6d68:	bf08      	it	eq
   b6d6a:	2400      	moveq	r4, #0
      }
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	bd10      	pop	{r4, pc}
   b6d70:	000b87d0 	.word	0x000b87d0

000b6d74 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6d74:	b510      	push	{r4, lr}
   b6d76:	21ac      	movs	r1, #172	; 0xac
   b6d78:	4604      	mov	r4, r0
   b6d7a:	f7fd f9a2 	bl	b40c2 <_ZdlPvj>
   b6d7e:	4620      	mov	r0, r4
   b6d80:	bd10      	pop	{r4, pc}

000b6d82 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6d82:	21ac      	movs	r1, #172	; 0xac
   b6d84:	f7fd b99d 	b.w	b40c2 <_ZdlPvj>

000b6d88 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6d8c:	f04f 0800 	mov.w	r8, #0
   b6d90:	b086      	sub	sp, #24
   b6d92:	461c      	mov	r4, r3
   b6d94:	f8c0 8004 	str.w	r8, [r0, #4]
   b6d98:	4605      	mov	r5, r0
   b6d9a:	460e      	mov	r6, r1
   b6d9c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6d9e:	4641      	mov	r1, r8
   b6da0:	2210      	movs	r2, #16
   b6da2:	a802      	add	r0, sp, #8
   b6da4:	f000 fe62 	bl	b7a6c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6da8:	1c63      	adds	r3, r4, #1
   b6daa:	d009      	beq.n	b6dc0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6db0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6db4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6db8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6dbc:	435c      	muls	r4, r3
   b6dbe:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6dc0:	6968      	ldr	r0, [r5, #20]
   b6dc2:	2310      	movs	r3, #16
   b6dc4:	9300      	str	r3, [sp, #0]
   b6dc6:	6800      	ldr	r0, [r0, #0]
   b6dc8:	ab02      	add	r3, sp, #8
   b6dca:	f241 0205 	movw	r2, #4101	; 0x1005
   b6dce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6dd2:	f7ff f9d1 	bl	b6178 <sock_setsockopt>
    if (ret < 0) {
   b6dd6:	2800      	cmp	r0, #0
   b6dd8:	da07      	bge.n	b6dea <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6dda:	f7ff fb89 	bl	b64f0 <__errno>
   b6dde:	6803      	ldr	r3, [r0, #0]
   b6de0:	606b      	str	r3, [r5, #4]
        return 0;
   b6de2:	2000      	movs	r0, #0
}
   b6de4:	b006      	add	sp, #24
   b6de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6dea:	6968      	ldr	r0, [r5, #20]
   b6dec:	2300      	movs	r3, #0
   b6dee:	6800      	ldr	r0, [r0, #0]
   b6df0:	463a      	mov	r2, r7
   b6df2:	4631      	mov	r1, r6
   b6df4:	f7ff f9e0 	bl	b61b8 <sock_send>
    if (ret < 0) {
   b6df8:	1e03      	subs	r3, r0, #0
   b6dfa:	dbee      	blt.n	b6dda <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6dfc:	4618      	mov	r0, r3
   b6dfe:	e7f1      	b.n	b6de4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6e00 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6e00:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6e02:	6984      	ldr	r4, [r0, #24]
   b6e04:	4b0a      	ldr	r3, [pc, #40]	; (b6e30 <_ZN9TCPClientD1Ev+0x30>)
   b6e06:	6003      	str	r3, [r0, #0]
   b6e08:	4605      	mov	r5, r0
   b6e0a:	b17c      	cbz	r4, b6e2c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6e0c:	6863      	ldr	r3, [r4, #4]
   b6e0e:	3b01      	subs	r3, #1
   b6e10:	6063      	str	r3, [r4, #4]
   b6e12:	b95b      	cbnz	r3, b6e2c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6e14:	6823      	ldr	r3, [r4, #0]
   b6e16:	4620      	mov	r0, r4
   b6e18:	689b      	ldr	r3, [r3, #8]
   b6e1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6e1c:	68a3      	ldr	r3, [r4, #8]
   b6e1e:	3b01      	subs	r3, #1
   b6e20:	60a3      	str	r3, [r4, #8]
   b6e22:	b91b      	cbnz	r3, b6e2c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6e24:	6823      	ldr	r3, [r4, #0]
   b6e26:	4620      	mov	r0, r4
   b6e28:	68db      	ldr	r3, [r3, #12]
   b6e2a:	4798      	blx	r3
   b6e2c:	4628      	mov	r0, r5
   b6e2e:	bd38      	pop	{r3, r4, r5, pc}
   b6e30:	000b88d4 	.word	0x000b88d4

000b6e34 <_ZN9TCPClientD0Ev>:
   b6e34:	b510      	push	{r4, lr}
   b6e36:	4604      	mov	r4, r0
   b6e38:	f7ff ffe2 	bl	b6e00 <_ZN9TCPClientD1Ev>
   b6e3c:	4620      	mov	r0, r4
   b6e3e:	211c      	movs	r1, #28
   b6e40:	f7fd f93f 	bl	b40c2 <_ZdlPvj>
   b6e44:	4620      	mov	r0, r4
   b6e46:	bd10      	pop	{r4, pc}

000b6e48 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6e48:	b530      	push	{r4, r5, lr}
   b6e4a:	b087      	sub	sp, #28
   b6e4c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6e4e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6e50:	4668      	mov	r0, sp
   b6e52:	f7ff fc8f 	bl	b6774 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e58:	3404      	adds	r4, #4
   b6e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e5c:	682b      	ldr	r3, [r5, #0]
   b6e5e:	7023      	strb	r3, [r4, #0]
    }
   b6e60:	b007      	add	sp, #28
   b6e62:	bd30      	pop	{r4, r5, pc}

000b6e64 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6e64:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6e66:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6e68:	4b05      	ldr	r3, [pc, #20]	; (b6e80 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6e6a:	4604      	mov	r4, r0
   b6e6c:	358c      	adds	r5, #140	; 0x8c
   b6e6e:	f844 3b04 	str.w	r3, [r4], #4
   b6e72:	4606      	mov	r6, r0
   b6e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e78:	682b      	ldr	r3, [r5, #0]
   b6e7a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6e7c:	4630      	mov	r0, r6
   b6e7e:	bd70      	pop	{r4, r5, r6, pc}
   b6e80:	000b8844 	.word	0x000b8844

000b6e84 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e88:	4698      	mov	r8, r3
    stop();
   b6e8a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e8c:	b093      	sub	sp, #76	; 0x4c
   b6e8e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6e90:	2400      	movs	r4, #0
    stop();
   b6e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6e94:	4606      	mov	r6, r0
   b6e96:	4617      	mov	r7, r2
    stop();
   b6e98:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	466b      	mov	r3, sp
   b6e9e:	4622      	mov	r2, r4
   b6ea0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6ea2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6ea4:	f7ff f960 	bl	b6168 <netdb_getaddrinfo>
   b6ea8:	4605      	mov	r5, r0
   b6eaa:	2800      	cmp	r0, #0
   b6eac:	d163      	bne.n	b6f76 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6eae:	9b00      	ldr	r3, [sp, #0]
   b6eb0:	2b00      	cmp	r3, #0
   b6eb2:	d04b      	beq.n	b6f4c <_ZN9TCPClient7connectEPKctm+0xc8>
   b6eb4:	695b      	ldr	r3, [r3, #20]
   b6eb6:	2b00      	cmp	r3, #0
   b6eb8:	d048      	beq.n	b6f4c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6eba:	a806      	add	r0, sp, #24
   b6ebc:	f7ff fc16 	bl	b66ec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6ec0:	9b00      	ldr	r3, [sp, #0]
   b6ec2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6ec4:	7863      	ldrb	r3, [r4, #1]
   b6ec6:	2b02      	cmp	r3, #2
   b6ec8:	d104      	bne.n	b6ed4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6eca:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6ecc:	a806      	add	r0, sp, #24
   b6ece:	f7ff ffbb 	bl	b6e48 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6ed2:	e026      	b.n	b6f22 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6ed4:	2b0a      	cmp	r3, #10
   b6ed6:	d124      	bne.n	b6f22 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6ed8:	2211      	movs	r2, #17
   b6eda:	4629      	mov	r1, r5
   b6edc:	a801      	add	r0, sp, #4
   b6ede:	f000 fdc5 	bl	b7a6c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6ee2:	68a3      	ldr	r3, [r4, #8]
   b6ee4:	2b00      	cmp	r3, #0
   b6ee6:	d038      	beq.n	b6f5a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6ee8:	f104 0308 	add.w	r3, r4, #8
   b6eec:	f10d 0c04 	add.w	ip, sp, #4
   b6ef0:	3418      	adds	r4, #24
   b6ef2:	6818      	ldr	r0, [r3, #0]
   b6ef4:	6859      	ldr	r1, [r3, #4]
   b6ef6:	4662      	mov	r2, ip
   b6ef8:	c203      	stmia	r2!, {r0, r1}
   b6efa:	3308      	adds	r3, #8
   b6efc:	42a3      	cmp	r3, r4
   b6efe:	4694      	mov	ip, r2
   b6f00:	d1f7      	bne.n	b6ef2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6f02:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6f04:	a901      	add	r1, sp, #4
   b6f06:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6f08:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6f0c:	f7ff fbfc 	bl	b6708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f10:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6f14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6f18:	ac07      	add	r4, sp, #28
   b6f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f1c:	f8dc 3000 	ldr.w	r3, [ip]
   b6f20:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6f22:	a806      	add	r0, sp, #24
   b6f24:	f7ff fc02 	bl	b672c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6f28:	b180      	cbz	r0, b6f4c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6f2a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6f2c:	ad07      	add	r5, sp, #28
   b6f2e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6f32:	4b12      	ldr	r3, [pc, #72]	; (b6f7c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6f34:	930c      	str	r3, [sp, #48]	; 0x30
   b6f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f38:	ac0d      	add	r4, sp, #52	; 0x34
   b6f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f3c:	682b      	ldr	r3, [r5, #0]
   b6f3e:	7023      	strb	r3, [r4, #0]
   b6f40:	463a      	mov	r2, r7
   b6f42:	4643      	mov	r3, r8
   b6f44:	a90c      	add	r1, sp, #48	; 0x30
   b6f46:	4630      	mov	r0, r6
   b6f48:	47c8      	blx	r9
   b6f4a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6f4c:	9800      	ldr	r0, [sp, #0]
   b6f4e:	f7ff f903 	bl	b6158 <netdb_freeaddrinfo>
}
   b6f52:	4628      	mov	r0, r5
   b6f54:	b013      	add	sp, #76	; 0x4c
   b6f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f5a:	68e3      	ldr	r3, [r4, #12]
   b6f5c:	2b00      	cmp	r3, #0
   b6f5e:	d1c3      	bne.n	b6ee8 <_ZN9TCPClient7connectEPKctm+0x64>
   b6f60:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6f64:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6f68:	f7ff f8e6 	bl	b6138 <inet_htonl>
   b6f6c:	4581      	cmp	r9, r0
   b6f6e:	d1bb      	bne.n	b6ee8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6f70:	f104 0114 	add.w	r1, r4, #20
   b6f74:	e7aa      	b.n	b6ecc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f76:	4625      	mov	r5, r4
   b6f78:	e7e8      	b.n	b6f4c <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f7a:	bf00      	nop
   b6f7c:	000b8844 	.word	0x000b8844

000b6f80 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6f80:	b538      	push	{r3, r4, r5, lr}
   b6f82:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6f84:	681a      	ldr	r2, [r3, #0]
   b6f86:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6f88:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6f8a:	da10      	bge.n	b6fae <_ZN9TCPClient9connectedEv+0x2e>
   b6f8c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f90:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f94:	429a      	cmp	r2, r3
   b6f96:	d10a      	bne.n	b6fae <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6f98:	6803      	ldr	r3, [r0, #0]
   b6f9a:	691b      	ldr	r3, [r3, #16]
   b6f9c:	4798      	blx	r3
        if (!rv) {
   b6f9e:	4604      	mov	r4, r0
   b6fa0:	b928      	cbnz	r0, b6fae <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6fa2:	682b      	ldr	r3, [r5, #0]
   b6fa4:	4628      	mov	r0, r5
   b6fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fa8:	4798      	blx	r3
        rv = available();
   b6faa:	4620      	mov	r0, r4
}
   b6fac:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6fae:	2001      	movs	r0, #1
   b6fb0:	e7fc      	b.n	b6fac <_ZN9TCPClient9connectedEv+0x2c>

000b6fb2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6fb2:	b510      	push	{r4, lr}
   b6fb4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fb6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fbe:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6fc0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fc2:	d005      	beq.n	b6fd0 <_ZN9TCPClient4peekEv+0x1e>
   b6fc4:	6963      	ldr	r3, [r4, #20]
   b6fc6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6fca:	4413      	add	r3, r2
   b6fcc:	7918      	ldrb	r0, [r3, #4]
}
   b6fce:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fd0:	6803      	ldr	r3, [r0, #0]
   b6fd2:	691b      	ldr	r3, [r3, #16]
   b6fd4:	4798      	blx	r3
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	d1f4      	bne.n	b6fc4 <_ZN9TCPClient4peekEv+0x12>
   b6fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fde:	e7f6      	b.n	b6fce <_ZN9TCPClient4peekEv+0x1c>

000b6fe0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fe2:	6943      	ldr	r3, [r0, #20]
   b6fe4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6fe6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fee:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6ff0:	4605      	mov	r5, r0
   b6ff2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6ff4:	d016      	beq.n	b7024 <_ZN9TCPClient4readEPhj+0x44>
   b6ff6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6ff8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6ffc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7000:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7002:	42bc      	cmp	r4, r7
   b7004:	bf28      	it	cs
   b7006:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7008:	3304      	adds	r3, #4
   b700a:	4622      	mov	r2, r4
   b700c:	4419      	add	r1, r3
   b700e:	4630      	mov	r0, r6
   b7010:	f000 fd1e 	bl	b7a50 <memcpy>
   b7014:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7016:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b701a:	4423      	add	r3, r4
   b701c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7020:	4620      	mov	r0, r4
   b7022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7024:	6803      	ldr	r3, [r0, #0]
   b7026:	691b      	ldr	r3, [r3, #16]
   b7028:	4798      	blx	r3
   b702a:	2800      	cmp	r0, #0
   b702c:	d1e3      	bne.n	b6ff6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b702e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7032:	e7f5      	b.n	b7020 <_ZN9TCPClient4readEPhj+0x40>

000b7034 <_ZN9TCPClient12flush_bufferEv>:
   b7034:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7036:	2300      	movs	r3, #0
   b7038:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b703c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b703e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7042:	4770      	bx	lr

000b7044 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7048:	461f      	mov	r7, r3
    stop();
   b704a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b704c:	460c      	mov	r4, r1
    stop();
   b704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7050:	b08a      	sub	sp, #40	; 0x28
   b7052:	4605      	mov	r5, r0
   b7054:	4616      	mov	r6, r2
    stop();
   b7056:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7058:	7d23      	ldrb	r3, [r4, #20]
   b705a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b705e:	2b04      	cmp	r3, #4
   b7060:	bf0c      	ite	eq
   b7062:	2002      	moveq	r0, #2
   b7064:	200a      	movne	r0, #10
   b7066:	2206      	movs	r2, #6
   b7068:	2101      	movs	r1, #1
   b706a:	f7ff f8ad 	bl	b61c8 <sock_socket>
   b706e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7072:	696b      	ldr	r3, [r5, #20]
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	2b00      	cmp	r3, #0
   b7078:	da08      	bge.n	b708c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b707a:	682b      	ldr	r3, [r5, #0]
   b707c:	4628      	mov	r0, r5
   b707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7080:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7082:	4798      	blx	r3
}
   b7084:	4620      	mov	r0, r4
   b7086:	b00a      	add	sp, #40	; 0x28
   b7088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b708c:	4628      	mov	r0, r5
   b708e:	f7ff ffd1 	bl	b7034 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7092:	b1b7      	cbz	r7, b70c2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7094:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7096:	a903      	add	r1, sp, #12
   b7098:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b709a:	9303      	str	r3, [sp, #12]
   b709c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b70a0:	f7ff f83a 	bl	b6118 <if_index_to_name>
   b70a4:	2800      	cmp	r0, #0
   b70a6:	d1e8      	bne.n	b707a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b70a8:	6968      	ldr	r0, [r5, #20]
   b70aa:	2306      	movs	r3, #6
   b70ac:	9300      	str	r3, [sp, #0]
   b70ae:	6800      	ldr	r0, [r0, #0]
   b70b0:	ab03      	add	r3, sp, #12
   b70b2:	f241 020b 	movw	r2, #4107	; 0x100b
   b70b6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b70ba:	f7ff f85d 	bl	b6178 <sock_setsockopt>
   b70be:	2800      	cmp	r0, #0
   b70c0:	d1db      	bne.n	b707a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b70c2:	221c      	movs	r2, #28
   b70c4:	2100      	movs	r1, #0
   b70c6:	a803      	add	r0, sp, #12
   b70c8:	f000 fcd0 	bl	b7a6c <memset>
    if (ip.version() == 4) {
   b70cc:	7d23      	ldrb	r3, [r4, #20]
   b70ce:	2b04      	cmp	r3, #4
   b70d0:	d11d      	bne.n	b710e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b70d2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b70d6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b70d8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b70dc:	f7ff f834 	bl	b6148 <inet_htons>
   b70e0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b70e4:	6860      	ldr	r0, [r4, #4]
   b70e6:	f7ff f827 	bl	b6138 <inet_htonl>
   b70ea:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b70ec:	696b      	ldr	r3, [r5, #20]
   b70ee:	221c      	movs	r2, #28
   b70f0:	6818      	ldr	r0, [r3, #0]
   b70f2:	a903      	add	r1, sp, #12
   b70f4:	f7ff f850 	bl	b6198 <sock_connect>
   b70f8:	2800      	cmp	r0, #0
   b70fa:	d1be      	bne.n	b707a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b70fc:	3404      	adds	r4, #4
   b70fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7100:	696d      	ldr	r5, [r5, #20]
   b7102:	358c      	adds	r5, #140	; 0x8c
   b7104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7106:	6823      	ldr	r3, [r4, #0]
   b7108:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b710a:	2401      	movs	r4, #1
   b710c:	e7ba      	b.n	b7084 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b710e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7112:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7114:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7118:	f7ff f816 	bl	b6148 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b711c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b711e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7122:	1d23      	adds	r3, r4, #4
   b7124:	f104 0714 	add.w	r7, r4, #20
   b7128:	6818      	ldr	r0, [r3, #0]
   b712a:	6859      	ldr	r1, [r3, #4]
   b712c:	4632      	mov	r2, r6
   b712e:	c203      	stmia	r2!, {r0, r1}
   b7130:	3308      	adds	r3, #8
   b7132:	42bb      	cmp	r3, r7
   b7134:	4616      	mov	r6, r2
   b7136:	d1f7      	bne.n	b7128 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7138:	e7d8      	b.n	b70ec <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b713c <_ZN9TCPClient9availableEv>:
{
   b713c:	b530      	push	{r4, r5, lr}
   b713e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7140:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7144:	b08b      	sub	sp, #44	; 0x2c
   b7146:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7148:	b12b      	cbz	r3, b7156 <_ZN9TCPClient9availableEv+0x1a>
   b714a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b714e:	429a      	cmp	r2, r3
   b7150:	d101      	bne.n	b7156 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7152:	f7ff ff6f 	bl	b7034 <_ZN9TCPClient12flush_bufferEv>
   b7156:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7158:	6808      	ldr	r0, [r1, #0]
   b715a:	2800      	cmp	r0, #0
   b715c:	db18      	blt.n	b7190 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b715e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7162:	2d7f      	cmp	r5, #127	; 0x7f
   b7164:	d814      	bhi.n	b7190 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7166:	3104      	adds	r1, #4
   b7168:	2308      	movs	r3, #8
   b716a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b716e:	4429      	add	r1, r5
   b7170:	f7ff f81a 	bl	b61a8 <sock_recv>
            if (ret > 0) {
   b7174:	2800      	cmp	r0, #0
   b7176:	dd13      	ble.n	b71a0 <_ZN9TCPClient9availableEv+0x64>
   b7178:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b717a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b717e:	b90a      	cbnz	r2, b7184 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7180:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7184:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7186:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b718a:	4410      	add	r0, r2
   b718c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7190:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7192:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7196:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b719a:	1ac0      	subs	r0, r0, r3
   b719c:	b00b      	add	sp, #44	; 0x2c
   b719e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b71a0:	f7ff f9a6 	bl	b64f0 <__errno>
   b71a4:	6803      	ldr	r3, [r0, #0]
   b71a6:	2b0b      	cmp	r3, #11
   b71a8:	d0f2      	beq.n	b7190 <_ZN9TCPClient9availableEv+0x54>
   b71aa:	f7ff f9a1 	bl	b64f0 <__errno>
   b71ae:	6803      	ldr	r3, [r0, #0]
   b71b0:	2b0b      	cmp	r3, #11
   b71b2:	d0ed      	beq.n	b7190 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b71b4:	2320      	movs	r3, #32
   b71b6:	2500      	movs	r5, #0
   b71b8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b71bc:	f7ff f998 	bl	b64f0 <__errno>
   b71c0:	6803      	ldr	r3, [r0, #0]
   b71c2:	9301      	str	r3, [sp, #4]
   b71c4:	4b08      	ldr	r3, [pc, #32]	; (b71e8 <_ZN9TCPClient9availableEv+0xac>)
   b71c6:	4909      	ldr	r1, [pc, #36]	; (b71ec <_ZN9TCPClient9availableEv+0xb0>)
   b71c8:	9300      	str	r3, [sp, #0]
   b71ca:	aa02      	add	r2, sp, #8
   b71cc:	462b      	mov	r3, r5
   b71ce:	2032      	movs	r0, #50	; 0x32
   b71d0:	f7ff f8ca 	bl	b6368 <log_message>
                    sock_close(d_->sock);
   b71d4:	6963      	ldr	r3, [r4, #20]
   b71d6:	6818      	ldr	r0, [r3, #0]
   b71d8:	f7fe ffd6 	bl	b6188 <sock_close>
   b71dc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b71de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b71e2:	601a      	str	r2, [r3, #0]
   b71e4:	e7d4      	b.n	b7190 <_ZN9TCPClient9availableEv+0x54>
   b71e6:	bf00      	nop
   b71e8:	000b889f 	.word	0x000b889f
   b71ec:	000b8898 	.word	0x000b8898

000b71f0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b71f0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b71f2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b71f4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b71f6:	6818      	ldr	r0, [r3, #0]
   b71f8:	2800      	cmp	r0, #0
   b71fa:	db01      	blt.n	b7200 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b71fc:	f7fe ffc4 	bl	b6188 <sock_close>
   b7200:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7206:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7208:	6960      	ldr	r0, [r4, #20]
   b720a:	2211      	movs	r2, #17
   b720c:	2100      	movs	r1, #0
   b720e:	308c      	adds	r0, #140	; 0x8c
   b7210:	f000 fc2c 	bl	b7a6c <memset>
    flush_buffer();
   b7214:	4620      	mov	r0, r4
}
   b7216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b721a:	f7ff bf0b 	b.w	b7034 <_ZN9TCPClient12flush_bufferEv>

000b721e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b721e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7220:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7222:	4604      	mov	r4, r0
          total(0) {
   b7224:	6001      	str	r1, [r0, #0]
   b7226:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b722a:	3088      	adds	r0, #136	; 0x88
   b722c:	f7ff fa5e 	bl	b66ec <_ZN9IPAddressC1Ev>
}
   b7230:	4620      	mov	r0, r4
   b7232:	bd10      	pop	{r4, pc}

000b7234 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7234:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7236:	2300      	movs	r3, #0
   b7238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b723c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7240:	4a0e      	ldr	r2, [pc, #56]	; (b727c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7242:	6103      	str	r3, [r0, #16]
   b7244:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7246:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7248:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b724a:	20ac      	movs	r0, #172	; 0xac
   b724c:	9101      	str	r1, [sp, #4]
   b724e:	f7fc ff32 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7252:	1e05      	subs	r5, r0, #0
   b7254:	f105 060c 	add.w	r6, r5, #12
   b7258:	d008      	beq.n	b726c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b725a:	2301      	movs	r3, #1
   b725c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7260:	4b07      	ldr	r3, [pc, #28]	; (b7280 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7262:	9901      	ldr	r1, [sp, #4]
   b7264:	602b      	str	r3, [r5, #0]
   b7266:	4630      	mov	r0, r6
   b7268:	f7ff ffd9 	bl	b721e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b726c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b726e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7272:	f7ff fedf 	bl	b7034 <_ZN9TCPClient12flush_bufferEv>
}
   b7276:	b002      	add	sp, #8
   b7278:	bd70      	pop	{r4, r5, r6, pc}
   b727a:	bf00      	nop
   b727c:	000b88d4 	.word	0x000b88d4
   b7280:	000b88b8 	.word	0x000b88b8

000b7284 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7284:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b728a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b728c:	f7ff ffd2 	bl	b7234 <_ZN9TCPClientC1Ei>
}
   b7290:	4620      	mov	r0, r4
   b7292:	bd10      	pop	{r4, pc}

000b7294 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7294:	b510      	push	{r4, lr}
   b7296:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7298:	6800      	ldr	r0, [r0, #0]
   b729a:	2800      	cmp	r0, #0
   b729c:	db01      	blt.n	b72a2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b729e:	f7fe ff73 	bl	b6188 <sock_close>
    }
}
   b72a2:	4620      	mov	r0, r4
   b72a4:	bd10      	pop	{r4, pc}

000b72a6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b72a6:	300c      	adds	r0, #12
   b72a8:	f7ff bff4 	b.w	b7294 <_ZN9TCPClient4DataD1Ev>

000b72ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b72ac:	4b02      	ldr	r3, [pc, #8]	; (b72b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b72ae:	681a      	ldr	r2, [r3, #0]
   b72b0:	4b02      	ldr	r3, [pc, #8]	; (b72bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b72b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b72b4:	4770      	bx	lr
   b72b6:	bf00      	nop
   b72b8:	2003e578 	.word	0x2003e578
   b72bc:	2003e6fc 	.word	0x2003e6fc

000b72c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b72c0:	4770      	bx	lr

000b72c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b72c2:	7441      	strb	r1, [r0, #17]
}
   b72c4:	4770      	bx	lr

000b72c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b72c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b72c8:	7c00      	ldrb	r0, [r0, #16]
   b72ca:	f7fe fff5 	bl	b62b8 <hal_usart_available_data_for_write>
}
   b72ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b72d2:	bd08      	pop	{r3, pc}

000b72d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b72d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b72d6:	7c00      	ldrb	r0, [r0, #16]
   b72d8:	f7fe ffc6 	bl	b6268 <hal_usart_available>
}
   b72dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b72e0:	bd08      	pop	{r3, pc}

000b72e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b72e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b72e4:	7c00      	ldrb	r0, [r0, #16]
   b72e6:	f7fe ffcf 	bl	b6288 <hal_usart_peek>
}
   b72ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b72ee:	bd08      	pop	{r3, pc}

000b72f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b72f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b72f2:	7c00      	ldrb	r0, [r0, #16]
   b72f4:	f7fe ffc0 	bl	b6278 <hal_usart_read>
}
   b72f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b72fc:	bd08      	pop	{r3, pc}

000b72fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b72fe:	7c00      	ldrb	r0, [r0, #16]
   b7300:	f7fe bfca 	b.w	b6298 <hal_usart_flush>

000b7304 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7304:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7306:	7c45      	ldrb	r5, [r0, #17]
{
   b7308:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b730a:	b12d      	cbz	r5, b7318 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b730c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b730e:	b003      	add	sp, #12
   b7310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7314:	f7fe bfa0 	b.w	b6258 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7318:	7c00      	ldrb	r0, [r0, #16]
   b731a:	9101      	str	r1, [sp, #4]
   b731c:	f7fe ffcc 	bl	b62b8 <hal_usart_available_data_for_write>
   b7320:	2800      	cmp	r0, #0
   b7322:	9901      	ldr	r1, [sp, #4]
   b7324:	dcf2      	bgt.n	b730c <_ZN11USARTSerial5writeEh+0x8>
}
   b7326:	4628      	mov	r0, r5
   b7328:	b003      	add	sp, #12
   b732a:	bd30      	pop	{r4, r5, pc}

000b732c <_ZN11USARTSerialD0Ev>:
   b732c:	b510      	push	{r4, lr}
   b732e:	2114      	movs	r1, #20
   b7330:	4604      	mov	r4, r0
   b7332:	f7fc fec6 	bl	b40c2 <_ZdlPvj>
   b7336:	4620      	mov	r0, r4
   b7338:	bd10      	pop	{r4, pc}
	...

000b733c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b733c:	b510      	push	{r4, lr}
   b733e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7342:	4604      	mov	r4, r0
   b7344:	4608      	mov	r0, r1
   b7346:	4611      	mov	r1, r2
   b7348:	2200      	movs	r2, #0
   b734a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b734e:	4b04      	ldr	r3, [pc, #16]	; (b7360 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7350:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7352:	2301      	movs	r3, #1
  _serial = serial;
   b7354:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7356:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7358:	f7fe ffb6 	bl	b62c8 <hal_usart_init_ex>
}
   b735c:	4620      	mov	r0, r4
   b735e:	bd10      	pop	{r4, pc}
   b7360:	000b893c 	.word	0x000b893c

000b7364 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7364:	7441      	strb	r1, [r0, #17]
}
   b7366:	4770      	bx	lr

000b7368 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7368:	4770      	bx	lr

000b736a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b736a:	4770      	bx	lr

000b736c <_ZN9USBSerial4readEv>:
{
   b736c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b736e:	2100      	movs	r1, #0
   b7370:	7c00      	ldrb	r0, [r0, #16]
   b7372:	f7fe ffd1 	bl	b6318 <HAL_USB_USART_Receive_Data>
}
   b7376:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b737a:	bd08      	pop	{r3, pc}

000b737c <_ZN9USBSerial4peekEv>:
{
   b737c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b737e:	2101      	movs	r1, #1
   b7380:	7c00      	ldrb	r0, [r0, #16]
   b7382:	f7fe ffc9 	bl	b6318 <HAL_USB_USART_Receive_Data>
}
   b7386:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b738a:	bd08      	pop	{r3, pc}

000b738c <_ZN9USBSerial17availableForWriteEv>:
{
   b738c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b738e:	7c00      	ldrb	r0, [r0, #16]
   b7390:	f7fe ffba 	bl	b6308 <HAL_USB_USART_Available_Data_For_Write>
}
   b7394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7398:	bd08      	pop	{r3, pc}

000b739a <_ZN9USBSerial9availableEv>:
{
   b739a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b739c:	7c00      	ldrb	r0, [r0, #16]
   b739e:	f7fe ffab 	bl	b62f8 <HAL_USB_USART_Available_Data>
}
   b73a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73a6:	bd08      	pop	{r3, pc}

000b73a8 <_ZN9USBSerial5writeEh>:
{
   b73a8:	b513      	push	{r0, r1, r4, lr}
   b73aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b73ac:	7c00      	ldrb	r0, [r0, #16]
{
   b73ae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b73b0:	f7fe ffaa 	bl	b6308 <HAL_USB_USART_Available_Data_For_Write>
   b73b4:	2800      	cmp	r0, #0
   b73b6:	9901      	ldr	r1, [sp, #4]
   b73b8:	dc01      	bgt.n	b73be <_ZN9USBSerial5writeEh+0x16>
   b73ba:	7c60      	ldrb	r0, [r4, #17]
   b73bc:	b120      	cbz	r0, b73c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b73be:	7c20      	ldrb	r0, [r4, #16]
   b73c0:	f7fe ffb2 	bl	b6328 <HAL_USB_USART_Send_Data>
   b73c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b73c8:	b002      	add	sp, #8
   b73ca:	bd10      	pop	{r4, pc}

000b73cc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b73cc:	7c00      	ldrb	r0, [r0, #16]
   b73ce:	f7fe bfb3 	b.w	b6338 <HAL_USB_USART_Flush_Data>

000b73d2 <_ZN9USBSerialD0Ev>:
   b73d2:	b510      	push	{r4, lr}
   b73d4:	2114      	movs	r1, #20
   b73d6:	4604      	mov	r4, r0
   b73d8:	f7fc fe73 	bl	b40c2 <_ZdlPvj>
   b73dc:	4620      	mov	r0, r4
   b73de:	bd10      	pop	{r4, pc}

000b73e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b73e0:	b510      	push	{r4, lr}
   b73e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73e6:	4604      	mov	r4, r0
   b73e8:	4608      	mov	r0, r1
   b73ea:	2100      	movs	r1, #0
   b73ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b73f0:	4b04      	ldr	r3, [pc, #16]	; (b7404 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b73f2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b73f4:	2301      	movs	r3, #1
  _serial = serial;
   b73f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b73f8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b73fa:	4611      	mov	r1, r2
   b73fc:	f7fe ff6c 	bl	b62d8 <HAL_USB_USART_Init>
}
   b7400:	4620      	mov	r0, r4
   b7402:	bd10      	pop	{r4, pc}
   b7404:	000b896c 	.word	0x000b896c

000b7408 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7408:	7c00      	ldrb	r0, [r0, #16]
   b740a:	2200      	movs	r2, #0
   b740c:	f7fe bf6c 	b.w	b62e8 <HAL_USB_USART_Begin>

000b7410 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b7410:	7c00      	ldrb	r0, [r0, #16]
   b7412:	f7fe bf99 	b.w	b6348 <HAL_USB_USART_Is_Connected>

000b7416 <_Z19acquireSerialBufferv>:
{
   b7416:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7418:	2214      	movs	r2, #20
{
   b741a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b741c:	2100      	movs	r1, #0
   b741e:	f000 fb25 	bl	b7a6c <memset>
}
   b7422:	4620      	mov	r0, r4
   b7424:	bd10      	pop	{r4, pc}
	...

000b7428 <_Z16_fetch_usbserialv>:
{
   b7428:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b742a:	4c0f      	ldr	r4, [pc, #60]	; (b7468 <_Z16_fetch_usbserialv+0x40>)
{
   b742c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b742e:	a803      	add	r0, sp, #12
   b7430:	f7ff fff1 	bl	b7416 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7434:	7821      	ldrb	r1, [r4, #0]
   b7436:	f3bf 8f5b 	dmb	ish
   b743a:	f011 0101 	ands.w	r1, r1, #1
   b743e:	d10f      	bne.n	b7460 <_Z16_fetch_usbserialv+0x38>
   b7440:	4620      	mov	r0, r4
   b7442:	9101      	str	r1, [sp, #4]
   b7444:	f7fc fe4c 	bl	b40e0 <__cxa_guard_acquire>
   b7448:	9901      	ldr	r1, [sp, #4]
   b744a:	b148      	cbz	r0, b7460 <_Z16_fetch_usbserialv+0x38>
   b744c:	aa03      	add	r2, sp, #12
   b744e:	4807      	ldr	r0, [pc, #28]	; (b746c <_Z16_fetch_usbserialv+0x44>)
   b7450:	f7ff ffc6 	bl	b73e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7454:	4620      	mov	r0, r4
   b7456:	f7fc fe48 	bl	b40ea <__cxa_guard_release>
   b745a:	4805      	ldr	r0, [pc, #20]	; (b7470 <_Z16_fetch_usbserialv+0x48>)
   b745c:	f000 faf2 	bl	b7a44 <atexit>
	return _usbserial;
}
   b7460:	4802      	ldr	r0, [pc, #8]	; (b746c <_Z16_fetch_usbserialv+0x44>)
   b7462:	b008      	add	sp, #32
   b7464:	bd10      	pop	{r4, pc}
   b7466:	bf00      	nop
   b7468:	2003e700 	.word	0x2003e700
   b746c:	2003e704 	.word	0x2003e704
   b7470:	000b7369 	.word	0x000b7369

000b7474 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7474:	2200      	movs	r2, #0
   b7476:	6840      	ldr	r0, [r0, #4]
   b7478:	4611      	mov	r1, r2
   b747a:	f7fe bfd1 	b.w	b6420 <network_ready>

000b747e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b747e:	2200      	movs	r2, #0
   b7480:	6840      	ldr	r0, [r0, #4]
   b7482:	4611      	mov	r1, r2
   b7484:	f7fe bfec 	b.w	b6460 <network_listening>

000b7488 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7488:	2200      	movs	r2, #0
   b748a:	6840      	ldr	r0, [r0, #4]
   b748c:	4611      	mov	r1, r2
   b748e:	f7fe bff7 	b.w	b6480 <network_get_listen_timeout>

000b7492 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7492:	6840      	ldr	r0, [r0, #4]
   b7494:	2200      	movs	r2, #0
   b7496:	f7fe bfeb 	b.w	b6470 <network_set_listen_timeout>

000b749a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b749a:	6840      	ldr	r0, [r0, #4]
   b749c:	2200      	movs	r2, #0
   b749e:	f081 0101 	eor.w	r1, r1, #1
   b74a2:	f7fe bfd5 	b.w	b6450 <network_listen>

000b74a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b74a6:	2300      	movs	r3, #0
   b74a8:	6840      	ldr	r0, [r0, #4]
   b74aa:	461a      	mov	r2, r3
   b74ac:	4619      	mov	r1, r3
   b74ae:	f7fe bfc7 	b.w	b6440 <network_off>

000b74b2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74b2:	2300      	movs	r3, #0
   b74b4:	6840      	ldr	r0, [r0, #4]
   b74b6:	461a      	mov	r2, r3
   b74b8:	4619      	mov	r1, r3
   b74ba:	f7fe bfb9 	b.w	b6430 <network_on>

000b74be <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74be:	2200      	movs	r2, #0
   b74c0:	6840      	ldr	r0, [r0, #4]
   b74c2:	4611      	mov	r1, r2
   b74c4:	f7fe bf9c 	b.w	b6400 <network_connecting>

000b74c8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74c8:	6840      	ldr	r0, [r0, #4]
   b74ca:	2200      	movs	r2, #0
   b74cc:	2102      	movs	r1, #2
   b74ce:	f7fe bf9f 	b.w	b6410 <network_disconnect>

000b74d2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74d2:	2300      	movs	r3, #0
   b74d4:	6840      	ldr	r0, [r0, #4]
   b74d6:	461a      	mov	r2, r3
   b74d8:	f7fe bf8a 	b.w	b63f0 <network_connect>

000b74dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74dc:	4b02      	ldr	r3, [pc, #8]	; (b74e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74de:	2204      	movs	r2, #4
   b74e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74e2:	4a02      	ldr	r2, [pc, #8]	; (b74ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b74e4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b74e6:	4770      	bx	lr
   b74e8:	2003e718 	.word	0x2003e718
   b74ec:	000b899c 	.word	0x000b899c

000b74f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b74f0:	4b01      	ldr	r3, [pc, #4]	; (b74f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b74f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b74f4:	4770      	bx	lr
   b74f6:	bf00      	nop
   b74f8:	2003e57c 	.word	0x2003e57c

000b74fc <serialEventRun>:
{
   b74fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b74fe:	4b0b      	ldr	r3, [pc, #44]	; (b752c <serialEventRun+0x30>)
   b7500:	b143      	cbz	r3, b7514 <serialEventRun+0x18>
   b7502:	f7ff ff91 	bl	b7428 <_Z16_fetch_usbserialv>
   b7506:	6803      	ldr	r3, [r0, #0]
   b7508:	691b      	ldr	r3, [r3, #16]
   b750a:	4798      	blx	r3
   b750c:	2800      	cmp	r0, #0
   b750e:	dd01      	ble.n	b7514 <serialEventRun+0x18>
        serialEvent();
   b7510:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7514:	4b06      	ldr	r3, [pc, #24]	; (b7530 <serialEventRun+0x34>)
   b7516:	b143      	cbz	r3, b752a <serialEventRun+0x2e>
   b7518:	f000 f95c 	bl	b77d4 <_Z22__fetch_global_Serial1v>
   b751c:	6803      	ldr	r3, [r0, #0]
   b751e:	691b      	ldr	r3, [r3, #16]
   b7520:	4798      	blx	r3
   b7522:	2800      	cmp	r0, #0
   b7524:	dd01      	ble.n	b752a <serialEventRun+0x2e>
        serialEvent1();
   b7526:	f3af 8000 	nop.w
}
   b752a:	bd08      	pop	{r3, pc}
	...

000b7534 <_post_loop>:
{
   b7534:	b508      	push	{r3, lr}
	serialEventRun();
   b7536:	f7ff ffe1 	bl	b74fc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b753a:	f7fe fd6d 	bl	b6018 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b753e:	4b01      	ldr	r3, [pc, #4]	; (b7544 <_post_loop+0x10>)
   b7540:	6018      	str	r0, [r3, #0]
}
   b7542:	bd08      	pop	{r3, pc}
   b7544:	2003e728 	.word	0x2003e728

000b7548 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7548:	4805      	ldr	r0, [pc, #20]	; (b7560 <_Z33system_initialize_user_backup_ramv+0x18>)
   b754a:	4a06      	ldr	r2, [pc, #24]	; (b7564 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b754c:	4906      	ldr	r1, [pc, #24]	; (b7568 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b754e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7550:	1a12      	subs	r2, r2, r0
   b7552:	f000 fa7d 	bl	b7a50 <memcpy>
    __backup_sram_signature = signature;
   b7556:	4b05      	ldr	r3, [pc, #20]	; (b756c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7558:	4a05      	ldr	r2, [pc, #20]	; (b7570 <_Z33system_initialize_user_backup_ramv+0x28>)
   b755a:	601a      	str	r2, [r3, #0]
}
   b755c:	bd08      	pop	{r3, pc}
   b755e:	bf00      	nop
   b7560:	2003f400 	.word	0x2003f400
   b7564:	2003f404 	.word	0x2003f404
   b7568:	000b8bec 	.word	0x000b8bec
   b756c:	2003f400 	.word	0x2003f400
   b7570:	9a271c1e 	.word	0x9a271c1e

000b7574 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7574:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7576:	2300      	movs	r3, #0
   b7578:	9300      	str	r3, [sp, #0]
   b757a:	461a      	mov	r2, r3
   b757c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7580:	f7fe ff1c 	bl	b63bc <system_ctrl_set_result>
}
   b7584:	b003      	add	sp, #12
   b7586:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b758c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b758c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b758e:	8843      	ldrh	r3, [r0, #2]
   b7590:	2b0a      	cmp	r3, #10
   b7592:	d008      	beq.n	b75a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7594:	2b50      	cmp	r3, #80	; 0x50
   b7596:	d10b      	bne.n	b75b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7598:	4b09      	ldr	r3, [pc, #36]	; (b75c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b759a:	681b      	ldr	r3, [r3, #0]
   b759c:	b14b      	cbz	r3, b75b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b759e:	b003      	add	sp, #12
   b75a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b75a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b75a6:	f7ff ffe5 	bl	b7574 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b75aa:	b003      	add	sp, #12
   b75ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b75b0:	2300      	movs	r3, #0
   b75b2:	9300      	str	r3, [sp, #0]
   b75b4:	461a      	mov	r2, r3
   b75b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b75ba:	f7fe feff 	bl	b63bc <system_ctrl_set_result>
}
   b75be:	e7f4      	b.n	b75aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b75c0:	2003e724 	.word	0x2003e724

000b75c4 <module_user_init_hook>:
{
   b75c4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b75c6:	4812      	ldr	r0, [pc, #72]	; (b7610 <module_user_init_hook+0x4c>)
   b75c8:	2100      	movs	r1, #0
   b75ca:	f7fe ffa1 	bl	b6510 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b75ce:	4b11      	ldr	r3, [pc, #68]	; (b7614 <module_user_init_hook+0x50>)
   b75d0:	681a      	ldr	r2, [r3, #0]
   b75d2:	4b11      	ldr	r3, [pc, #68]	; (b7618 <module_user_init_hook+0x54>)
   b75d4:	429a      	cmp	r2, r3
   b75d6:	4b11      	ldr	r3, [pc, #68]	; (b761c <module_user_init_hook+0x58>)
   b75d8:	bf0c      	ite	eq
   b75da:	2201      	moveq	r2, #1
   b75dc:	2200      	movne	r2, #0
   b75de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b75e0:	d001      	beq.n	b75e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b75e2:	f7ff ffb1 	bl	b7548 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b75e6:	f7fe fd07 	bl	b5ff8 <HAL_RNG_GetRandomNumber>
   b75ea:	4604      	mov	r4, r0
    srand(seed);
   b75ec:	f000 fa46 	bl	b7a7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b75f0:	4b0b      	ldr	r3, [pc, #44]	; (b7620 <module_user_init_hook+0x5c>)
   b75f2:	b113      	cbz	r3, b75fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b75f4:	4620      	mov	r0, r4
   b75f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b75fa:	2100      	movs	r1, #0
   b75fc:	4808      	ldr	r0, [pc, #32]	; (b7620 <module_user_init_hook+0x5c>)
   b75fe:	f7fe feef 	bl	b63e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7606:	4807      	ldr	r0, [pc, #28]	; (b7624 <module_user_init_hook+0x60>)
   b7608:	2100      	movs	r1, #0
   b760a:	f7fe becd 	b.w	b63a8 <system_ctrl_set_app_request_handler>
   b760e:	bf00      	nop
   b7610:	000b74f1 	.word	0x000b74f1
   b7614:	2003f400 	.word	0x2003f400
   b7618:	9a271c1e 	.word	0x9a271c1e
   b761c:	2003e720 	.word	0x2003e720
   b7620:	00000000 	.word	0x00000000
   b7624:	000b758d 	.word	0x000b758d

000b7628 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7628:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b762a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b762c:	d902      	bls.n	b7634 <pinAvailable+0xc>
    return false;
   b762e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7630:	b002      	add	sp, #8
   b7632:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7634:	f1a0 030b 	sub.w	r3, r0, #11
   b7638:	2b02      	cmp	r3, #2
   b763a:	d81a      	bhi.n	b7672 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b763c:	4c17      	ldr	r4, [pc, #92]	; (b769c <pinAvailable+0x74>)
   b763e:	7821      	ldrb	r1, [r4, #0]
   b7640:	f3bf 8f5b 	dmb	ish
   b7644:	f011 0101 	ands.w	r1, r1, #1
   b7648:	d10b      	bne.n	b7662 <pinAvailable+0x3a>
   b764a:	4620      	mov	r0, r4
   b764c:	9101      	str	r1, [sp, #4]
   b764e:	f7fc fd47 	bl	b40e0 <__cxa_guard_acquire>
   b7652:	9901      	ldr	r1, [sp, #4]
   b7654:	b128      	cbz	r0, b7662 <pinAvailable+0x3a>
   b7656:	4812      	ldr	r0, [pc, #72]	; (b76a0 <pinAvailable+0x78>)
   b7658:	f7ff f9f6 	bl	b6a48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b765c:	4620      	mov	r0, r4
   b765e:	f7fc fd44 	bl	b40ea <__cxa_guard_release>
   b7662:	4b0f      	ldr	r3, [pc, #60]	; (b76a0 <pinAvailable+0x78>)
   b7664:	7818      	ldrb	r0, [r3, #0]
   b7666:	f7fe fdcf 	bl	b6208 <hal_spi_is_enabled>
   b766a:	2800      	cmp	r0, #0
   b766c:	d1df      	bne.n	b762e <pinAvailable+0x6>
  return true; // 'pin' is available
   b766e:	2001      	movs	r0, #1
   b7670:	e7de      	b.n	b7630 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7672:	2801      	cmp	r0, #1
   b7674:	d809      	bhi.n	b768a <pinAvailable+0x62>
   b7676:	f000 f86d 	bl	b7754 <_Z19__fetch_global_Wirev>
   b767a:	2100      	movs	r1, #0
   b767c:	7c00      	ldrb	r0, [r0, #16]
   b767e:	f7fe fd3b 	bl	b60f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7682:	f080 0001 	eor.w	r0, r0, #1
   b7686:	b2c0      	uxtb	r0, r0
   b7688:	e7d2      	b.n	b7630 <pinAvailable+0x8>
   b768a:	3809      	subs	r0, #9
   b768c:	2801      	cmp	r0, #1
   b768e:	d8ee      	bhi.n	b766e <pinAvailable+0x46>
   b7690:	f000 f8a0 	bl	b77d4 <_Z22__fetch_global_Serial1v>
   b7694:	7c00      	ldrb	r0, [r0, #16]
   b7696:	f7fe fe07 	bl	b62a8 <hal_usart_is_enabled>
   b769a:	e7f2      	b.n	b7682 <pinAvailable+0x5a>
   b769c:	2003e6b8 	.word	0x2003e6b8
   b76a0:	2003e6bc 	.word	0x2003e6bc

000b76a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76a4:	2823      	cmp	r0, #35	; 0x23
{
   b76a6:	b538      	push	{r3, r4, r5, lr}
   b76a8:	4604      	mov	r4, r0
   b76aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76ac:	d80a      	bhi.n	b76c4 <pinMode+0x20>
   b76ae:	29ff      	cmp	r1, #255	; 0xff
   b76b0:	d008      	beq.n	b76c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b76b2:	f7ff ffb9 	bl	b7628 <pinAvailable>
   b76b6:	b128      	cbz	r0, b76c4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b76b8:	4629      	mov	r1, r5
   b76ba:	4620      	mov	r0, r4
}
   b76bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b76c0:	f7fe bcb2 	b.w	b6028 <hal_gpio_mode>
}
   b76c4:	bd38      	pop	{r3, r4, r5, pc}

000b76c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b76c6:	b538      	push	{r3, r4, r5, lr}
   b76c8:	4604      	mov	r4, r0
   b76ca:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b76cc:	f7fe fcb4 	bl	b6038 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b76d0:	28ff      	cmp	r0, #255	; 0xff
   b76d2:	d010      	beq.n	b76f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b76d4:	2806      	cmp	r0, #6
   b76d6:	d804      	bhi.n	b76e2 <digitalWrite+0x1c>
   b76d8:	234d      	movs	r3, #77	; 0x4d
   b76da:	fa23 f000 	lsr.w	r0, r3, r0
   b76de:	07c3      	lsls	r3, r0, #31
   b76e0:	d409      	bmi.n	b76f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b76e2:	4620      	mov	r0, r4
   b76e4:	f7ff ffa0 	bl	b7628 <pinAvailable>
   b76e8:	b128      	cbz	r0, b76f6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b76ea:	4629      	mov	r1, r5
   b76ec:	4620      	mov	r0, r4
}
   b76ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b76f2:	f7fe bca9 	b.w	b6048 <hal_gpio_write>
}
   b76f6:	bd38      	pop	{r3, r4, r5, pc}

000b76f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b76f8:	b510      	push	{r4, lr}
   b76fa:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b76fc:	f7fe fc9c 	bl	b6038 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7700:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7702:	b2db      	uxtb	r3, r3
   b7704:	2b01      	cmp	r3, #1
   b7706:	d908      	bls.n	b771a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7708:	4620      	mov	r0, r4
   b770a:	f7ff ff8d 	bl	b7628 <pinAvailable>
   b770e:	b120      	cbz	r0, b771a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7710:	4620      	mov	r0, r4
}
   b7712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7716:	f7fe bc9f 	b.w	b6058 <hal_gpio_read>
}
   b771a:	2000      	movs	r0, #0
   b771c:	bd10      	pop	{r4, pc}

000b771e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b771e:	4770      	bx	lr

000b7720 <_Z17acquireWireBufferv>:
{
   b7720:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7722:	4b0a      	ldr	r3, [pc, #40]	; (b774c <_Z17acquireWireBufferv+0x2c>)
   b7724:	6003      	str	r3, [r0, #0]
   b7726:	2301      	movs	r3, #1
{
   b7728:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b772a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b772c:	4908      	ldr	r1, [pc, #32]	; (b7750 <_Z17acquireWireBufferv+0x30>)
   b772e:	2020      	movs	r0, #32
   b7730:	f000 f874 	bl	b781c <_ZnajRKSt9nothrow_t>
	};
   b7734:	2520      	movs	r5, #32
   b7736:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7738:	4905      	ldr	r1, [pc, #20]	; (b7750 <_Z17acquireWireBufferv+0x30>)
	};
   b773a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b773c:	4628      	mov	r0, r5
   b773e:	f000 f86d 	bl	b781c <_ZnajRKSt9nothrow_t>
	};
   b7742:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7746:	4620      	mov	r0, r4
   b7748:	bd38      	pop	{r3, r4, r5, pc}
   b774a:	bf00      	nop
   b774c:	00010018 	.word	0x00010018
   b7750:	000b89d0 	.word	0x000b89d0

000b7754 <_Z19__fetch_global_Wirev>:
{
   b7754:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7756:	4d0e      	ldr	r5, [pc, #56]	; (b7790 <_Z19__fetch_global_Wirev+0x3c>)
   b7758:	7829      	ldrb	r1, [r5, #0]
   b775a:	f3bf 8f5b 	dmb	ish
   b775e:	f011 0401 	ands.w	r4, r1, #1
{
   b7762:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7764:	d111      	bne.n	b778a <_Z19__fetch_global_Wirev+0x36>
   b7766:	4628      	mov	r0, r5
   b7768:	f7fc fcba 	bl	b40e0 <__cxa_guard_acquire>
   b776c:	b168      	cbz	r0, b778a <_Z19__fetch_global_Wirev+0x36>
   b776e:	4668      	mov	r0, sp
   b7770:	f7ff ffd6 	bl	b7720 <_Z17acquireWireBufferv>
   b7774:	466a      	mov	r2, sp
   b7776:	4621      	mov	r1, r4
   b7778:	4806      	ldr	r0, [pc, #24]	; (b7794 <_Z19__fetch_global_Wirev+0x40>)
   b777a:	f7fe ff47 	bl	b660c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b777e:	4628      	mov	r0, r5
   b7780:	f7fc fcb3 	bl	b40ea <__cxa_guard_release>
   b7784:	4804      	ldr	r0, [pc, #16]	; (b7798 <_Z19__fetch_global_Wirev+0x44>)
   b7786:	f000 f95d 	bl	b7a44 <atexit>
	return wire;
}
   b778a:	4802      	ldr	r0, [pc, #8]	; (b7794 <_Z19__fetch_global_Wirev+0x40>)
   b778c:	b007      	add	sp, #28
   b778e:	bd30      	pop	{r4, r5, pc}
   b7790:	2003e72c 	.word	0x2003e72c
   b7794:	2003e730 	.word	0x2003e730
   b7798:	000b771f 	.word	0x000b771f

000b779c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b779c:	4770      	bx	lr
	...

000b77a0 <_Z20acquireSerial1Bufferv>:
{
   b77a0:	b538      	push	{r3, r4, r5, lr}
   b77a2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b77a4:	2514      	movs	r5, #20
   b77a6:	462a      	mov	r2, r5
   b77a8:	2100      	movs	r1, #0
   b77aa:	f000 f95f 	bl	b7a6c <memset>
   b77ae:	8025      	strh	r5, [r4, #0]
   b77b0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77b2:	4907      	ldr	r1, [pc, #28]	; (b77d0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b77b4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77b6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b77b8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77ba:	f000 f82f 	bl	b781c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77be:	4904      	ldr	r1, [pc, #16]	; (b77d0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b77c0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77c2:	4628      	mov	r0, r5
   b77c4:	f000 f82a 	bl	b781c <_ZnajRKSt9nothrow_t>
    };
   b77c8:	60e0      	str	r0, [r4, #12]
}
   b77ca:	4620      	mov	r0, r4
   b77cc:	bd38      	pop	{r3, r4, r5, pc}
   b77ce:	bf00      	nop
   b77d0:	000b89d0 	.word	0x000b89d0

000b77d4 <_Z22__fetch_global_Serial1v>:
{
   b77d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77d6:	4d0e      	ldr	r5, [pc, #56]	; (b7810 <_Z22__fetch_global_Serial1v+0x3c>)
   b77d8:	7829      	ldrb	r1, [r5, #0]
   b77da:	f3bf 8f5b 	dmb	ish
   b77de:	f011 0401 	ands.w	r4, r1, #1
{
   b77e2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77e4:	d111      	bne.n	b780a <_Z22__fetch_global_Serial1v+0x36>
   b77e6:	4628      	mov	r0, r5
   b77e8:	f7fc fc7a 	bl	b40e0 <__cxa_guard_acquire>
   b77ec:	b168      	cbz	r0, b780a <_Z22__fetch_global_Serial1v+0x36>
   b77ee:	a801      	add	r0, sp, #4
   b77f0:	f7ff ffd6 	bl	b77a0 <_Z20acquireSerial1Bufferv>
   b77f4:	aa01      	add	r2, sp, #4
   b77f6:	4621      	mov	r1, r4
   b77f8:	4806      	ldr	r0, [pc, #24]	; (b7814 <_Z22__fetch_global_Serial1v+0x40>)
   b77fa:	f7ff fd9f 	bl	b733c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b77fe:	4628      	mov	r0, r5
   b7800:	f7fc fc73 	bl	b40ea <__cxa_guard_release>
   b7804:	4804      	ldr	r0, [pc, #16]	; (b7818 <_Z22__fetch_global_Serial1v+0x44>)
   b7806:	f000 f91d 	bl	b7a44 <atexit>
    return serial1;
}
   b780a:	4802      	ldr	r0, [pc, #8]	; (b7814 <_Z22__fetch_global_Serial1v+0x40>)
   b780c:	b007      	add	sp, #28
   b780e:	bd30      	pop	{r4, r5, pc}
   b7810:	2003e744 	.word	0x2003e744
   b7814:	2003e748 	.word	0x2003e748
   b7818:	000b779d 	.word	0x000b779d

000b781c <_ZnajRKSt9nothrow_t>:
   b781c:	f7fc bc4d 	b.w	b40ba <_Znaj>

000b7820 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7820:	4901      	ldr	r1, [pc, #4]	; (b7828 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7822:	f000 b8f9 	b.w	b7a18 <_ZNKSt9type_infoeqERKS_>
   b7826:	bf00      	nop
   b7828:	000b89ec 	.word	0x000b89ec

000b782c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b782c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b782e:	2400      	movs	r4, #0
   b7830:	2310      	movs	r3, #16
   b7832:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7836:	6803      	ldr	r3, [r0, #0]
   b7838:	4615      	mov	r5, r2
   b783a:	699e      	ldr	r6, [r3, #24]
   b783c:	6812      	ldr	r2, [r2, #0]
   b783e:	466b      	mov	r3, sp
   b7840:	e9cd 4400 	strd	r4, r4, [sp]
   b7844:	47b0      	blx	r6
   b7846:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b784a:	f003 0306 	and.w	r3, r3, #6
   b784e:	2b06      	cmp	r3, #6
   b7850:	bf03      	ittte	eq
   b7852:	9b00      	ldreq	r3, [sp, #0]
   b7854:	602b      	streq	r3, [r5, #0]
   b7856:	2001      	moveq	r0, #1
   b7858:	4620      	movne	r0, r4
   b785a:	b004      	add	sp, #16
   b785c:	bd70      	pop	{r4, r5, r6, pc}

000b785e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b785e:	9800      	ldr	r0, [sp, #0]
   b7860:	4290      	cmp	r0, r2
   b7862:	bf14      	ite	ne
   b7864:	2001      	movne	r0, #1
   b7866:	2006      	moveq	r0, #6
   b7868:	4770      	bx	lr
	...

000b786c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b786c:	b510      	push	{r4, lr}
   b786e:	4b03      	ldr	r3, [pc, #12]	; (b787c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7870:	6003      	str	r3, [r0, #0]
   b7872:	4604      	mov	r4, r0
   b7874:	f000 f8cd 	bl	b7a12 <_ZNSt9type_infoD1Ev>
   b7878:	4620      	mov	r0, r4
   b787a:	bd10      	pop	{r4, pc}
   b787c:	000b8a2c 	.word	0x000b8a2c

000b7880 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7880:	b510      	push	{r4, lr}
   b7882:	4604      	mov	r4, r0
   b7884:	f7ff fff2 	bl	b786c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7888:	4620      	mov	r0, r4
   b788a:	2108      	movs	r1, #8
   b788c:	f7fc fc19 	bl	b40c2 <_ZdlPvj>
   b7890:	4620      	mov	r0, r4
   b7892:	bd10      	pop	{r4, pc}

000b7894 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7898:	461f      	mov	r7, r3
   b789a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b789e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b78a2:	4598      	cmp	r8, r3
   b78a4:	4606      	mov	r6, r0
   b78a6:	4615      	mov	r5, r2
   b78a8:	d107      	bne.n	b78ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78aa:	9907      	ldr	r1, [sp, #28]
   b78ac:	f000 f8b4 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b78b0:	b118      	cbz	r0, b78ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78b2:	7165      	strb	r5, [r4, #5]
   b78b4:	2000      	movs	r0, #0
   b78b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78ba:	4639      	mov	r1, r7
   b78bc:	4630      	mov	r0, r6
   b78be:	f000 f8ab 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b78c2:	2800      	cmp	r0, #0
   b78c4:	d0f6      	beq.n	b78b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b78c6:	2301      	movs	r3, #1
   b78c8:	f8c4 8000 	str.w	r8, [r4]
   b78cc:	7125      	strb	r5, [r4, #4]
   b78ce:	71a3      	strb	r3, [r4, #6]
   b78d0:	e7f0      	b.n	b78b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b78d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b78d2:	b538      	push	{r3, r4, r5, lr}
   b78d4:	4615      	mov	r5, r2
   b78d6:	461c      	mov	r4, r3
   b78d8:	f000 f89e 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b78dc:	b120      	cbz	r0, b78e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b78de:	2308      	movs	r3, #8
   b78e0:	60e3      	str	r3, [r4, #12]
   b78e2:	2306      	movs	r3, #6
   b78e4:	6025      	str	r5, [r4, #0]
   b78e6:	7123      	strb	r3, [r4, #4]
   b78e8:	bd38      	pop	{r3, r4, r5, pc}

000b78ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b78ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78ec:	4605      	mov	r5, r0
   b78ee:	460c      	mov	r4, r1
   b78f0:	9201      	str	r2, [sp, #4]
   b78f2:	461e      	mov	r6, r3
   b78f4:	f000 f890 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b78f8:	b950      	cbnz	r0, b7910 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78fa:	2e03      	cmp	r6, #3
   b78fc:	d808      	bhi.n	b7910 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78fe:	6823      	ldr	r3, [r4, #0]
   b7900:	9a01      	ldr	r2, [sp, #4]
   b7902:	695b      	ldr	r3, [r3, #20]
   b7904:	4629      	mov	r1, r5
   b7906:	4620      	mov	r0, r4
   b7908:	b002      	add	sp, #8
   b790a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b790e:	4718      	bx	r3
   b7910:	b002      	add	sp, #8
   b7912:	bd70      	pop	{r4, r5, r6, pc}

000b7914 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7914:	b510      	push	{r4, lr}
   b7916:	4b03      	ldr	r3, [pc, #12]	; (b7924 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7918:	6003      	str	r3, [r0, #0]
   b791a:	4604      	mov	r4, r0
   b791c:	f7ff ffa6 	bl	b786c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7920:	4620      	mov	r0, r4
   b7922:	bd10      	pop	{r4, pc}
   b7924:	000b8a8c 	.word	0x000b8a8c

000b7928 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7928:	b510      	push	{r4, lr}
   b792a:	4604      	mov	r4, r0
   b792c:	f7ff fff2 	bl	b7914 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7930:	4620      	mov	r0, r4
   b7932:	210c      	movs	r1, #12
   b7934:	f7fc fbc5 	bl	b40c2 <_ZdlPvj>
   b7938:	4620      	mov	r0, r4
   b793a:	bd10      	pop	{r4, pc}

000b793c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b793c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b793e:	9f08      	ldr	r7, [sp, #32]
   b7940:	4297      	cmp	r7, r2
   b7942:	4605      	mov	r5, r0
   b7944:	460e      	mov	r6, r1
   b7946:	4614      	mov	r4, r2
   b7948:	d00a      	beq.n	b7960 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b794a:	68a8      	ldr	r0, [r5, #8]
   b794c:	6802      	ldr	r2, [r0, #0]
   b794e:	9708      	str	r7, [sp, #32]
   b7950:	6a15      	ldr	r5, [r2, #32]
   b7952:	4631      	mov	r1, r6
   b7954:	4622      	mov	r2, r4
   b7956:	46ac      	mov	ip, r5
   b7958:	b003      	add	sp, #12
   b795a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b795e:	4760      	bx	ip
   b7960:	4619      	mov	r1, r3
   b7962:	9301      	str	r3, [sp, #4]
   b7964:	f000 f858 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b7968:	9b01      	ldr	r3, [sp, #4]
   b796a:	2800      	cmp	r0, #0
   b796c:	d0ed      	beq.n	b794a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b796e:	2006      	movs	r0, #6
   b7970:	b003      	add	sp, #12
   b7972:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7974:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7978:	460d      	mov	r5, r1
   b797a:	4619      	mov	r1, r3
   b797c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7980:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7984:	4681      	mov	r9, r0
   b7986:	4617      	mov	r7, r2
   b7988:	4698      	mov	r8, r3
   b798a:	f000 f845 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b798e:	b190      	cbz	r0, b79b6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7990:	2d00      	cmp	r5, #0
   b7992:	6034      	str	r4, [r6, #0]
   b7994:	7137      	strb	r7, [r6, #4]
   b7996:	db09      	blt.n	b79ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7998:	1961      	adds	r1, r4, r5
   b799a:	458a      	cmp	sl, r1
   b799c:	bf0c      	ite	eq
   b799e:	2106      	moveq	r1, #6
   b79a0:	2101      	movne	r1, #1
   b79a2:	71b1      	strb	r1, [r6, #6]
   b79a4:	2000      	movs	r0, #0
   b79a6:	b001      	add	sp, #4
   b79a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79ac:	3502      	adds	r5, #2
   b79ae:	d1f9      	bne.n	b79a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79b0:	2301      	movs	r3, #1
   b79b2:	71b3      	strb	r3, [r6, #6]
   b79b4:	e7f6      	b.n	b79a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79b6:	4554      	cmp	r4, sl
   b79b8:	d106      	bne.n	b79c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79ba:	4659      	mov	r1, fp
   b79bc:	4648      	mov	r0, r9
   b79be:	f000 f82b 	bl	b7a18 <_ZNKSt9type_infoeqERKS_>
   b79c2:	b108      	cbz	r0, b79c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79c4:	7177      	strb	r7, [r6, #5]
   b79c6:	e7ed      	b.n	b79a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79c8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b79cc:	6803      	ldr	r3, [r0, #0]
   b79ce:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b79d2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b79d6:	69dc      	ldr	r4, [r3, #28]
   b79d8:	463a      	mov	r2, r7
   b79da:	4643      	mov	r3, r8
   b79dc:	4629      	mov	r1, r5
   b79de:	46a4      	mov	ip, r4
   b79e0:	b001      	add	sp, #4
   b79e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79e6:	4760      	bx	ip

000b79e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b79e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79ec:	4607      	mov	r7, r0
   b79ee:	460c      	mov	r4, r1
   b79f0:	4615      	mov	r5, r2
   b79f2:	461e      	mov	r6, r3
   b79f4:	f7ff ff6d 	bl	b78d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b79f8:	b948      	cbnz	r0, b7a0e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b79fa:	68b8      	ldr	r0, [r7, #8]
   b79fc:	6803      	ldr	r3, [r0, #0]
   b79fe:	699f      	ldr	r7, [r3, #24]
   b7a00:	462a      	mov	r2, r5
   b7a02:	4633      	mov	r3, r6
   b7a04:	4621      	mov	r1, r4
   b7a06:	46bc      	mov	ip, r7
   b7a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7a0c:	4760      	bx	ip
   b7a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a12 <_ZNSt9type_infoD1Ev>:
   b7a12:	4770      	bx	lr

000b7a14 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7a14:	2000      	movs	r0, #0
   b7a16:	4770      	bx	lr

000b7a18 <_ZNKSt9type_infoeqERKS_>:
   b7a18:	4281      	cmp	r1, r0
   b7a1a:	b508      	push	{r3, lr}
   b7a1c:	d00e      	beq.n	b7a3c <_ZNKSt9type_infoeqERKS_+0x24>
   b7a1e:	6840      	ldr	r0, [r0, #4]
   b7a20:	7803      	ldrb	r3, [r0, #0]
   b7a22:	2b2a      	cmp	r3, #42	; 0x2a
   b7a24:	d00c      	beq.n	b7a40 <_ZNKSt9type_infoeqERKS_+0x28>
   b7a26:	6849      	ldr	r1, [r1, #4]
   b7a28:	780b      	ldrb	r3, [r1, #0]
   b7a2a:	2b2a      	cmp	r3, #42	; 0x2a
   b7a2c:	bf08      	it	eq
   b7a2e:	3101      	addeq	r1, #1
   b7a30:	f7fc faf4 	bl	b401c <strcmp>
   b7a34:	fab0 f080 	clz	r0, r0
   b7a38:	0940      	lsrs	r0, r0, #5
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	2001      	movs	r0, #1
   b7a3e:	e7fc      	b.n	b7a3a <_ZNKSt9type_infoeqERKS_+0x22>
   b7a40:	2000      	movs	r0, #0
   b7a42:	e7fa      	b.n	b7a3a <_ZNKSt9type_infoeqERKS_+0x22>

000b7a44 <atexit>:
   b7a44:	2300      	movs	r3, #0
   b7a46:	4601      	mov	r1, r0
   b7a48:	461a      	mov	r2, r3
   b7a4a:	4618      	mov	r0, r3
   b7a4c:	f000 b844 	b.w	b7ad8 <__register_exitproc>

000b7a50 <memcpy>:
   b7a50:	440a      	add	r2, r1
   b7a52:	4291      	cmp	r1, r2
   b7a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7a58:	d100      	bne.n	b7a5c <memcpy+0xc>
   b7a5a:	4770      	bx	lr
   b7a5c:	b510      	push	{r4, lr}
   b7a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7a62:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7a66:	4291      	cmp	r1, r2
   b7a68:	d1f9      	bne.n	b7a5e <memcpy+0xe>
   b7a6a:	bd10      	pop	{r4, pc}

000b7a6c <memset>:
   b7a6c:	4402      	add	r2, r0
   b7a6e:	4603      	mov	r3, r0
   b7a70:	4293      	cmp	r3, r2
   b7a72:	d100      	bne.n	b7a76 <memset+0xa>
   b7a74:	4770      	bx	lr
   b7a76:	f803 1b01 	strb.w	r1, [r3], #1
   b7a7a:	e7f9      	b.n	b7a70 <memset+0x4>

000b7a7c <srand>:
   b7a7c:	b538      	push	{r3, r4, r5, lr}
   b7a7e:	4b10      	ldr	r3, [pc, #64]	; (b7ac0 <srand+0x44>)
   b7a80:	681d      	ldr	r5, [r3, #0]
   b7a82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a84:	4604      	mov	r4, r0
   b7a86:	b9b3      	cbnz	r3, b7ab6 <srand+0x3a>
   b7a88:	2018      	movs	r0, #24
   b7a8a:	f7fe fd11 	bl	b64b0 <malloc>
   b7a8e:	4602      	mov	r2, r0
   b7a90:	63a8      	str	r0, [r5, #56]	; 0x38
   b7a92:	b920      	cbnz	r0, b7a9e <srand+0x22>
   b7a94:	4b0b      	ldr	r3, [pc, #44]	; (b7ac4 <srand+0x48>)
   b7a96:	480c      	ldr	r0, [pc, #48]	; (b7ac8 <srand+0x4c>)
   b7a98:	2142      	movs	r1, #66	; 0x42
   b7a9a:	f7fe fd31 	bl	b6500 <__assert_func>
   b7a9e:	490b      	ldr	r1, [pc, #44]	; (b7acc <srand+0x50>)
   b7aa0:	4b0b      	ldr	r3, [pc, #44]	; (b7ad0 <srand+0x54>)
   b7aa2:	e9c0 1300 	strd	r1, r3, [r0]
   b7aa6:	4b0b      	ldr	r3, [pc, #44]	; (b7ad4 <srand+0x58>)
   b7aa8:	6083      	str	r3, [r0, #8]
   b7aaa:	230b      	movs	r3, #11
   b7aac:	8183      	strh	r3, [r0, #12]
   b7aae:	2100      	movs	r1, #0
   b7ab0:	2001      	movs	r0, #1
   b7ab2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ab8:	2200      	movs	r2, #0
   b7aba:	611c      	str	r4, [r3, #16]
   b7abc:	615a      	str	r2, [r3, #20]
   b7abe:	bd38      	pop	{r3, r4, r5, pc}
   b7ac0:	2003e57c 	.word	0x2003e57c
   b7ac4:	000b8ac5 	.word	0x000b8ac5
   b7ac8:	000b8adc 	.word	0x000b8adc
   b7acc:	abcd330e 	.word	0xabcd330e
   b7ad0:	e66d1234 	.word	0xe66d1234
   b7ad4:	0005deec 	.word	0x0005deec

000b7ad8 <__register_exitproc>:
   b7ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7adc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7b98 <__register_exitproc+0xc0>
   b7ae0:	4606      	mov	r6, r0
   b7ae2:	f8d8 0000 	ldr.w	r0, [r8]
   b7ae6:	461f      	mov	r7, r3
   b7ae8:	460d      	mov	r5, r1
   b7aea:	4691      	mov	r9, r2
   b7aec:	f000 f856 	bl	b7b9c <__retarget_lock_acquire_recursive>
   b7af0:	4b25      	ldr	r3, [pc, #148]	; (b7b88 <__register_exitproc+0xb0>)
   b7af2:	681c      	ldr	r4, [r3, #0]
   b7af4:	b934      	cbnz	r4, b7b04 <__register_exitproc+0x2c>
   b7af6:	4c25      	ldr	r4, [pc, #148]	; (b7b8c <__register_exitproc+0xb4>)
   b7af8:	601c      	str	r4, [r3, #0]
   b7afa:	4b25      	ldr	r3, [pc, #148]	; (b7b90 <__register_exitproc+0xb8>)
   b7afc:	b113      	cbz	r3, b7b04 <__register_exitproc+0x2c>
   b7afe:	681b      	ldr	r3, [r3, #0]
   b7b00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b04:	6863      	ldr	r3, [r4, #4]
   b7b06:	2b1f      	cmp	r3, #31
   b7b08:	dd07      	ble.n	b7b1a <__register_exitproc+0x42>
   b7b0a:	f8d8 0000 	ldr.w	r0, [r8]
   b7b0e:	f000 f847 	bl	b7ba0 <__retarget_lock_release_recursive>
   b7b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7b1a:	b34e      	cbz	r6, b7b70 <__register_exitproc+0x98>
   b7b1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7b20:	b988      	cbnz	r0, b7b46 <__register_exitproc+0x6e>
   b7b22:	4b1c      	ldr	r3, [pc, #112]	; (b7b94 <__register_exitproc+0xbc>)
   b7b24:	b923      	cbnz	r3, b7b30 <__register_exitproc+0x58>
   b7b26:	f8d8 0000 	ldr.w	r0, [r8]
   b7b2a:	f000 f838 	bl	b7b9e <__retarget_lock_release>
   b7b2e:	e7f0      	b.n	b7b12 <__register_exitproc+0x3a>
   b7b30:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7b34:	f7fe fcbc 	bl	b64b0 <malloc>
   b7b38:	2800      	cmp	r0, #0
   b7b3a:	d0f4      	beq.n	b7b26 <__register_exitproc+0x4e>
   b7b3c:	2300      	movs	r3, #0
   b7b3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7b42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7b46:	6863      	ldr	r3, [r4, #4]
   b7b48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7b4c:	2201      	movs	r2, #1
   b7b4e:	409a      	lsls	r2, r3
   b7b50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7b54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7b58:	4313      	orrs	r3, r2
   b7b5a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7b5e:	2e02      	cmp	r6, #2
   b7b60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7b64:	bf02      	ittt	eq
   b7b66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7b6a:	4313      	orreq	r3, r2
   b7b6c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7b70:	6863      	ldr	r3, [r4, #4]
   b7b72:	f8d8 0000 	ldr.w	r0, [r8]
   b7b76:	1c5a      	adds	r2, r3, #1
   b7b78:	3302      	adds	r3, #2
   b7b7a:	6062      	str	r2, [r4, #4]
   b7b7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7b80:	f000 f80e 	bl	b7ba0 <__retarget_lock_release_recursive>
   b7b84:	2000      	movs	r0, #0
   b7b86:	e7c6      	b.n	b7b16 <__register_exitproc+0x3e>
   b7b88:	2003e7e8 	.word	0x2003e7e8
   b7b8c:	2003e75c 	.word	0x2003e75c
   b7b90:	00000000 	.word	0x00000000
   b7b94:	000b64b1 	.word	0x000b64b1
   b7b98:	2003e5e0 	.word	0x2003e5e0

000b7b9c <__retarget_lock_acquire_recursive>:
   b7b9c:	4770      	bx	lr

000b7b9e <__retarget_lock_release>:
   b7b9e:	4770      	bx	lr

000b7ba0 <__retarget_lock_release_recursive>:
   b7ba0:	4770      	bx	lr

000b7ba2 <link_code_end>:
	...

000b7ba4 <link_const_data_start>:
   b7ba4:	514d0400 	.word	0x514d0400
   b7ba8:	00045454 	.word	0x00045454
   b7bac:	49514d06 	.word	0x49514d06
   b7bb0:	03706473 	.word	0x03706473

000b7bb4 <dynalib_user>:
   b7bb4:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b7bc4:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b7bd4:	72697620 6c617574 546e6900 6369706f      virtual.inTopic
   b7be4:	7069482f 41736f70 65566572 61547972     /HipposAreVeryTa
   b7bf4:	2f797473 6e690041 69706f54 69482f63     sty/A.inTopic/Hi
   b7c04:	736f7070 56657241 54797265 79747361     pposAreVeryTasty
   b7c14:	6900422f 706f546e 482f6369 6f707069     /B.inTopic/Hippo
   b7c24:	65724173 79726556 74736154 00432f79     sAreVeryTasty/C.
   b7c34:	6f546e69 2f636970 70706948 7241736f     inTopic/HipposAr
   b7c44:	72655665 73615479 4c2f7974 31006465     eVeryTasty/Led.1
   b7c54:	66003000 656c6961 6f430064 63656e6e     .0.failed.Connec
   b7c64:	676e6974 002e2e2e 74747542 41206e6f     ting....Button A
   b7c74:	4200203a 6f747475 3a42206e 75420020     : .Button B: .Bu
   b7c84:	6e6f7474 203a4320 62616c00 6568742e     tton C: .lab.the
   b7c94:	2e6c6377 006d6f63                       wcl.com.

000b7c9c <_ZL4font>:
   b7c9c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   b7cac:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   b7cbc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   b7ccc:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   b7cdc:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   b7cec:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   b7cfc:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   b7d0c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   b7d1c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   b7d2c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   b7d3c:	00000000 5f000000 07000000 14000700     ......._........
   b7d4c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   b7d5c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   b7d6c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   b7d7c:	08080800 00000808 20006060 02040810     ........``. ....
   b7d8c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   b7d9c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   b7dac:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   b7dbc:	00001e29 00000014 00003440 22140800     ).......@4....."
   b7dcc:	14141441 41001414 02081422 06095901     A......A"....Y..
   b7ddc:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   b7dec:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   b7dfc:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   b7e0c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   b7e1c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   b7e2c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   b7e3c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   b7e4c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   b7e5c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   b7e6c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   b7e7c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   b7e8c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   b7e9c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   b7eac:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   b7ebc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   b7ecc:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   b7edc:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   b7eec:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   b7efc:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   b7f0c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   b7f1c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   b7f2c:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   b7f3c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   b7f4c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   b7f5c:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   b7f6c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   b7f7c:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   b7f8c:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   b7f9c:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   b7fac:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   b7fbc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   b7fcc:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   b7fdc:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   b7fec:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   b7ffc:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   b800c:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   b801c:	00ff0000 ff101010 14141400 101000ff     ................
   b802c:	10ff00ff f010f010 fc141414 f7141400     ................
   b803c:	0000ff00 14ff00ff fc04f414 10171414     ................
   b804c:	1f10101f 14141f10 10001f14 00f01010     ................
   b805c:	1f000000 10101010 1010101f 0010f010     ................
   b806c:	10ff0000 10101010 10101010 000010ff     ................
   b807c:	0014ff00 ff00ff00 101f0000 fc000017     ................
   b808c:	1414f404 14171017 f404f414 00ff0000     ................
   b809c:	141414f7 14141414 14f700f7 14171414     ................
   b80ac:	101f1010 1414141f 101014f4 00f010f0     ................
   b80bc:	1f101f00 1f000000 00000014 000014fc     ................
   b80cc:	10f010f0 ff10ff10 ff141414 10101014     ................
   b80dc:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   b80ec:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   b80fc:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   b810c:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   b811c:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   b812c:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   b813c:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   b814c:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   b815c:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   b816c:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   b817c:	00000018 30001010 0101ff40 01011f00     .......0@.......
   b818c:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000b819c <_ZTV12Adafruit_GFX>:
	...
   b81ac:	000b5321 000b6909 000b40c9 000b4d27     !S...i...@..'M..
   b81bc:	000b4d29 000b4d5b 000b4d37 000b4d49     )M..[M..7M..IM..
   b81cc:	000b4c69 000b4d27 000b4f53 000b4f51     iL..'M..SO..QO..
   b81dc:	000b4d73 000b4db1 000b4deb 000b4e31     sM...M...M..1N..
   b81ec:	000b4e4d 000b4ed1 61666564 20746c75     MN...N..default 
   b81fc:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   b820c:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   b821c:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   b822c:	20732520 45444f4d 003e7525               %s MODE%u>.

000b8238 <_ZTVN8particle11SPISettingsE>:
	...
   b8240:	000b545d 000b542f 000b5431              ]T../T..1T..

000b824c <_ZL12splash1_data>:
   b824c:	00000000 00800100 00000000 00000000     ................
   b825c:	00008003 00000000 07000000 000000c0     ................
   b826c:	00000000 c0070000 00000000 00000000     ................
   b827c:	00c00f00 00000000 00000000 0000e01f     ................
   b828c:	00000000 1f000000 000000e0 00000000     ................
   b829c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   b82b4:	0000f07f 00000000 7ff81f00 000000f0     ................
   b82c4:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   b82d4:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   b82e4:	00000000 f9ff0f00 0000c0ff 00000000     ................
   b82f4:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   b8304:	00000000 fc030000 80ffff73 00000000     ........s.......
   b8314:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   b8324:	000000ff 00000000 fc1ffe7f 00000000     ................
   b8334:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   b8344:	0000e0ff 00000000 ff191f00 000000c0     ................
   b8354:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   b8364:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   b8374:	00000000 fcffff00 00000000 00000000     ................
   b8384:	00feffff 00000000 ff000000 0000feff     ................
   b8394:	00000000 efff0100 000000fe 00000000     ................
   b83a4:	fecfff01 00000000 03000000 00fe07ff     ................
   b83b4:	00000000 fc030000 0000fe07 00000000     ................
   b83c4:	03f00300 000000fe 00000000 fe008001     ................
	...
   b83dc:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   b83f4:	0000000c 07000000 00fc0080 00c00300     ................
   b8404:	80070000 0000fc01 0000c003 01800700     ................
   b8414:	030000fc 000000c0 e0018007 1e000000     ................
   b8424:	07000000 00e00180 001e0000 9ff7e37f     ................
   b8434:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   b8444:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   b8454:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   b8464:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   b8474:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   b8484:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   b8494:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   b84a4:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   b84b4:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   b84c4:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   b84d4:	ffffff00 ffffffff c0ffffff ffffffff     ................
   b84e4:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   b84f4:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   b8504:	5b6bfdff c0fd6adb                       ..k[.j..

000b850c <_ZL12splash2_data>:
   b850c:	00600000 00000000 00000000 00000000     ..`.............
   b851c:	0000e000 00000000 00000000 01000000     ................
   b852c:	000000e0 00000000 00000000 f0010000     ................
	...
   b8548:	00f00300 00000000 00000000 00000000     ................
   b8558:	0000f007 00000000 00000000 07000000     ................
   b8568:	000000f8 00000000 00000000 f80f0000     ................
   b8578:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   b8588:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   b8598:	00c00300 010000fe ffff00e0 000000f8     ................
   b85a8:	f000c003 0f000000 7ffe7f00 030000c0     ................
   b85b8:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   b85c8:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   b85d8:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   b85e8:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   b85f8:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   b8608:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   b8618:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   b8628:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   b8638:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   b8648:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   b8658:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   b8668:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   b8678:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   b8688:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   b86a0:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   b86b0:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   b86c0:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   b86d0:	ff7f000f a5feffff 198d9dad 060000e0     ................
   b86e0:	ffff7f00 adb5feff e07eb5ed              ..........~.

000b86ec <_ZTV16Adafruit_SSD1306>:
	...
   b86f4:	000b54b1 000b54c9 000b5321 000b6909     .T...T..!S...i..
   b8704:	000b54dd 000b4d27 000b4d29 000b4d5b     .T..'M..)M..[M..
   b8714:	000b4d37 000b4d49 000b4c69 000b4d27     7M..IM..iL..'M..
   b8724:	000b4f53 000b567b 000b5c23 000b5bd5     SO..{V..#\...[..
   b8734:	000b4deb 000b4e31 000b4e4d 000b4ed1     .M..1N..MN...N..

000b8744 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8744:	e0c08000 fefcf8f0                       ........

000b874c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b874c:	07030100 7f3f1f0f                       ......?.

000b8754 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8754:	a880d5ae                                ....

000b8758 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8758:	8d4000d3                                ..@.

000b875c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b875c:	c8a10020                                 ...

000b8760 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b8760:	a6a440db                                 .@....

000b8766 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8766:	8f8102da                                ....

000b876a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b876a:	                                         ...

000b876d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b876d:	                                         ...

000b8770 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b8770:	21ff0022 00000000                       "..!....

000b8778 <_ZTV16OledWingAdafruit>:
	...
   b8780:	000b5e59 000b5e79 000b5321 000b6909     Y^..y^..!S...i..
   b8790:	000b54dd 000b4d27 000b4d29 000b4d5b     .T..'M..)M..[M..
   b87a0:	000b4d37 000b4d49 000b4c69 000b4d27     7M..IM..iL..'M..
   b87b0:	000b4f53 000b567b 000b5c23 000b5bd5     SO..{V..#\...[..
   b87c0:	000b4deb 000b4e31 000b4e4d 000b4ed1     .M..1N..MN...N..

000b87d0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b87d8 <_ZTVN5spark13EthernetClassE>:
	...
   b87e0:	000b6597 000b658d 000b6583 000b6579     .e...e...e..ye..
   b87f0:	000b656d 000b6561 000b67e5 000b67ed     me..ae...g...g..
   b8800:	000b6555 000b654d 000b6543 000b6539     Ue..Me..Ce..9e..
   b8810:	000b681d                                .h..

000b8814 <_ZTV7TwoWire>:
	...
   b881c:	000b65b5 000b65ff 000b65d7 000b65b7     .e...e...e...e..
   b882c:	000b65df 000b65e7 000b65ef 000b65f7     .e...e...e...e..

000b883c <_ZTV9IPAddress>:
	...
   b8844:	000b6689 000b6679 000b667b 00707061     .f..yf..{f..app.

000b8854 <_ZTVN5spark12NetworkClassE>:
	...
   b885c:	000b67a5 000b67af 000b67b9 000b67c3     .g...g...g...g..
   b886c:	000b67cd 000b67d9 000b67e5 000b67ed     .g...g...g...g..
   b887c:	000b67f5 000b6801 000b6809 000b6813     .g...h...h...h..
   b888c:	000b681d                                .h..

000b8890 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8890:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   b88a0:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000b88b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b88b8:	000b6d51 000b6d75 000b72a7 000b6d83     Qm..um...r...m..
   b88c8:	000b6d55                                Um..

000b88cc <_ZTV9TCPClient>:
	...
   b88d4:	000b6e01 000b6e35 000b6ccd 000b6ce7     .n..5n...l...l..
   b88e4:	000b713d 000b6d11 000b6fb3 000b6d45     =q...m...o..Em..
   b88f4:	000b7045 000b6e85 000b6fe1 000b71f1     Ep...n...o...q..
   b8904:	000b6f81 000b6d47 000b6cf9 000b6d89     .o..Gm...l...m..
   b8914:	000b6e65 252d5925 64252d6d 3a482554     en..%Y-%m-%dT%H:
   b8924:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b8934 <_ZTV11USARTSerial>:
	...
   b893c:	000b72c1 000b732d 000b7305 000b6909     .r..-s...s...i..
   b894c:	000b72d5 000b72f1 000b72e3 000b72ff     .r...r...r...r..
   b895c:	000b72c3 000b72c7                       .r...r..

000b8964 <_ZTV9USBSerial>:
	...
   b896c:	000b736b 000b73d3 000b73a9 000b6909     ks...s...s...i..
   b897c:	000b739b 000b736d 000b737d 000b73cd     .s..ms..}s...s..
   b898c:	000b738d 000b7365                       .s..es..

000b8994 <_ZTVN5spark9WiFiClassE>:
	...
   b899c:	000b74d3 000b74c9 000b74bf 000b7475     .t...t...t..ut..
   b89ac:	000b74b3 000b74a7 000b67e5 000b67ed     .t...t...g...g..
   b89bc:	000b749b 000b7493 000b7489 000b747f     .t...t...t...t..
   b89cc:	000b681d                                .h..

000b89d0 <_ZSt7nothrow>:
	...

000b89d1 <_ZTSSt19_Sp_make_shared_tag>:
   b89d1:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b89e1:	5f646572 00676174                        red_tag....

000b89ec <_ZTISt19_Sp_make_shared_tag>:
   b89ec:	000b8a2c 000b89d1                       ,.......

000b89f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b89f4:	000b8a8c 000b8a00 000b8ab0              ............

000b8a00 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8a00:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b8a10:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b8a20:	00000045                                E...

000b8a24 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8a24:	00000000 000b89f4 000b786d 000b7881     ........mx...x..
   b8a34:	000b7a15 000b7a15 000b78eb 000b782d     .z...z...x..-x..
   b8a44:	000b78d3 000b7895 000b785f              .x...x.._x..

000b8a50 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8a50:	000b8a8c 000b8a5c 000b89f4              ....\.......

000b8a5c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8a5c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b8a6c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b8a7c:	456f666e 00000000                       nfoE....

000b8a84 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8a84:	00000000 000b8a50 000b7915 000b7929     ....P....y..)y..
   b8a94:	000b7a15 000b7a15 000b78eb 000b782d     .z...z...x..-x..
   b8aa4:	000b79e9 000b7975 000b793d              .y..uy..=y..

000b8ab0 <_ZTISt9type_info>:
   b8ab0:	000b8a2c 000b8ab8                       ,.......

000b8ab8 <_ZTSSt9type_info>:
   b8ab8:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8ac8:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8ad8:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b8ae8:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b8af8:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b8b08:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b8b18:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b8b28:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b8b35 <link_const_data_end>:
   b8b35:	00          	.byte	0x00
	...

000b8b38 <link_constructors_location>:
   b8b38:	000b43a9 	.word	0x000b43a9
   b8b3c:	000b6529 	.word	0x000b6529
   b8b40:	000b65a1 	.word	0x000b65a1
   b8b44:	000b6795 	.word	0x000b6795
   b8b48:	000b68f5 	.word	0x000b68f5
   b8b4c:	000b6a31 	.word	0x000b6a31
   b8b50:	000b6ca9 	.word	0x000b6ca9
   b8b54:	000b72ad 	.word	0x000b72ad
   b8b58:	000b74dd 	.word	0x000b74dd
